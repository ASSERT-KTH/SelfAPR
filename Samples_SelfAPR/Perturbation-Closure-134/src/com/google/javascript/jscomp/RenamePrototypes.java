[P8_Replace_Mix]^private  boolean aggressiveRenaming;^60^^^^^55^65^private final boolean aggressiveRenaming;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private  char[] reservedCharacters;^61^^^^^56^66^private final char[] reservedCharacters;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private  VariableMap prevUsedRenameMap;^64^^^^^59^69^private final VariableMap prevUsedRenameMap;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P1_Replace_Type]^char oldName;^71^^^^^66^76^String oldName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P1_Replace_Type]^char newName;^72^^^^^67^77^String newName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P1_Replace_Type]^long  prototypeCount;^73^^^^^68^78^int prototypeCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P1_Replace_Type]^long  objLitCount;^74^^^^^69^79^int objLitCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^short  objLitCount;^74^^^^^69^79^int objLitCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P1_Replace_Type]^short  refCount;^75^^^^^70^80^int refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private static  Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^151^152^^^^151^161^private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private final Set<Node> stringNodes  = null ;^165^^^^^160^170^private final Set<Node> stringNodes = new HashSet<Node> (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, Property> properties = new HashMap<String, Property> (  ) ;^168^169^^^^168^169^private final Map<String, Property> properties = new HashMap<String, Property> (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOfin", "lastIndexOf", "toString", "valueOf" )  ) ;^172^173^174^^^172^174^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "laastIndexOf", "toString", "valueOf" )  ) ;^172^173^174^^^172^174^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "Strin", "valueOf" )  ) ;^172^173^174^^^172^174^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "v" )  ) ;^172^173^174^^^172^174^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private final Set<String> reservedNames  = null ;^172^173^174^^^172^174^private final Set<String> reservedNames = new HashSet<String> ( Arrays.asList ( "indexOf", "lastIndexOf", "toString", "valueOf" )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P8_Replace_Mix]^private  Set<Node> prototypeObjLits = new HashSet<Node> (  ) ;^177^^^^^172^182^private final Set<Node> prototypeObjLits = new HashSet<Node> (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties   [VARIABLES] 
[P5_Replace_Variable]^this.oldName = oldName;^79^^^^^78^85^this.oldName = name;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^prop.newName = prevName;this.oldName = name;^79^^^^^78^85^this.oldName = name;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.newName = null;this.oldName = name;^79^^^^^78^85^this.oldName = name;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.input = null;this.oldName = name;^79^^^^^78^85^this.oldName = name;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.newName = false;^80^^^^^78^85^this.newName = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.oldName = name;this.newName = null;^80^^^^^78^85^this.newName = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^prop.newName = prevName;this.newName = null;^80^^^^^78^85^this.newName = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.input = null;this.newName = null;^80^^^^^78^85^this.newName = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P12_Insert_Condition]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { this.newName = null; this.prototypeCount = 0; }^80^81^^^^78^85^this.newName = null; this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^this.prototypeCount = objLitCount;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.prototypeCount = 0 - 4;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.refCount = 0;this.prototypeCount = 0;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.objLitCount = 0;this.prototypeCount = 0;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^this.objLitCount = 9;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.objLitCount = 0 - 2;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.prototypeCount = 0;this.objLitCount = 0;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.refCount = 0;this.objLitCount = 0;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P12_Insert_Condition]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { this.objLitCount = 0; this.refCount = 0; }^82^83^^^^78^85^this.objLitCount = 0; this.refCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^this.refCount = 3;^83^^^^^78^85^this.refCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.prototypeCount = 0;this.refCount = 0;^83^^^^^78^85^this.refCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.objLitCount = 0;this.refCount = 0;^83^^^^^78^85^this.refCount = 0;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.input = false;^84^^^^^78^85^this.input = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.oldName = name;this.input = null;^84^^^^^78^85^this.input = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^prop.input = input;this.input = null;^84^^^^^78^85^this.input = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.newName = null;this.input = null;^84^^^^^78^85^this.input = null;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.compiler =  null;^191^^^^^188^195^this.compiler = compiler;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.aggressiveRenaming =  null;^192^^^^^188^195^this.aggressiveRenaming = aggressiveRenaming;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.reservedCharacters =  null;^193^^^^^188^195^this.reservedCharacters = reservedCharacters;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^this.prevUsedRenameMap =  null;^194^^^^^188^195^this.prevUsedRenameMap = prevUsedRenameMap;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean aggressiveRenaming Nullable
char[] reservedCharacters VariableMap prevUsedRenameMap [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^return prototypeCount  ^  objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return refCount + objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return prototypeCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return prototypeCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] count [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.prototypeCount > 0 || this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.prototypeCount < 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.prototypeCount > 0 && this.objLitCount != 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( this.prototypeCount > prototypeCount && this.objLitCount == prototypeCount )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( prototypeCount > 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( this.prototypeCount > 0 ) {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  (  this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( refCount > 4 ) {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return canRenamePrototypeProperty();^92^93^94^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { return canRenamePrototypeProperty (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^92^93^94^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { return canRenamePrototypeProperty (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  (  ( this.objLitCount )  > 0 )  &&  (  ( this.prototypeCount )  == 0 )  )  {     return canRenameObjLitProperty (  ) ; }^92^^^^^91^103^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^return canRenameObjLitProperty (  ) ;^93^^^^^91^103^return canRenamePrototypeProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^93^^^^^91^103^return canRenamePrototypeProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.objLitCount > 0 || this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.objLitCount >= 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( this.objLitCount > 0 && this.prototypeCount >= 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( this.objLitCount >  && this.prototypeCount ==  )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( this.objLitCount > 7 && this.prototypeCount == 7 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( refCount > 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( this.objLitCount > 0 && refCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( this.objLitCount > 0 ) {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  (  this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  (  this.prototypeCount == 3 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return canRenameObjLitProperty();^95^96^97^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { return canRenameObjLitProperty (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^95^96^97^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { return canRenameObjLitProperty (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  (  ( this.prototypeCount )  > 0 )  &&  (  ( this.objLitCount )  == 0 )  )  {     return canRenamePrototypeProperty (  ) ; }^95^^^^^91^103^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^return canRenamePrototypeProperty (  ) ;^96^^^^^91^103^return canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^96^^^^^91^103^return canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^return canRenamePrototypeProperty (  )  || canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^return canRenameObjLitProperty (  )  && canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^return canRenamePrototypeProperty (  )  && canRenamePrototypeProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getNext ( oldName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isExported ( oldName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return false;^106^107^108^109^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^106^107^108^109^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^106^^^^^105^128^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return true;^108^^^^^105^128^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^106^^^^^105^128^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getNext ( oldName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isPrivate ( oldName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return true;^111^112^113^114^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^111^112^113^114^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^111^^^^^105^128^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return false;^113^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^111^^^^^105^128^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return true;^116^117^118^^^105^128^if  ( aggressiveRenaming )  { return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^116^117^118^^^105^128^if  ( aggressiveRenaming )  { return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return false;^117^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( Character.isUpperCase ( ch )  && !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( Character.isUpperCase ( ch )  ) {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  (  !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( Character.isLetter ( ch )  || !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( Character.isUpperCase ( ch )  || !Character.isUpperCase ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return true;^123^124^125^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^123^124^125^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return false;^124^^^^^105^128^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^for  (  short  i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^for  ( int i = 0, n = oldName.length (  ) ; i > n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() - 0 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( refCountnt i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( int i = 0, refCount = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( int i = 0, n = newName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( int i = 0 = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( oldNament i = 0, n = i.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( int i = 0, oldName = n.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^int ch = oldName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^char ch = oldName.charAt ( prototypeCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^char ch = newName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^char ch = oldName.compareTo ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^char ch = newName .compareTo ( oldName )  ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^char ch = oldName.charAt ( refCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^for  (  long  i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^for  ( int i = i, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() - 3 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() - 7 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() - 6 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^120^121^^123^124^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  { char ch = oldName.charAt ( i ) ; if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return true;^127^^^^^105^128^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  char  ch  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getNext ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isExported ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return false;^131^132^133^134^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^131^132^133^134^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^131^^^^^130^144^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return true;^133^^^^^130^144^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^131^^^^^130^144^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getNext ( oldName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .isExported ( oldName )   )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isPrivate ( oldName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return true;^136^137^138^139^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^136^137^138^139^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^136^^^^^130^144^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return false;^138^^^^^130^144^return true;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .isExported ( name )   )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^136^^^^^130^144^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^return true;^143^^^^^130^144^return false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  int  i  n  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^short  n1 = a1.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^int n1 = a1.Property (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^int n1 = a1 .Property ( newName )  ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^int n1 = a2.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^int n2 = a2.count (  ) ;int n1 = a1.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^154^155^^^^153^160^int n1 = a1.count (  ) ; int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^short  n2 = a2.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^int n2 = a1.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^int n2 = a2.Property (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^int n1 = a1.count (  ) ;int n2 = a2.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^int n2 = a2 .Property ( name )  ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( n1 >= n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( refCount != n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n1 != refCount )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( n2 - n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( prototypeCount != n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prop == null )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^return n2 - n1;^156^157^158^^^153^160^if  ( n1 != n2 )  { return n2 - n1; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^156^157^158^^^153^160^if  ( n1 != n2 )  { return n2 - n1; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^return n2  &  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return refCount - n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^returnprototypeCount - n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^return n2  >>  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^return refCount -prototypeCount;^157^^^^^153^160^return n2 - n1;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return a1.oldName.compareTo ( newName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return a2.oldName.oldName.compareTo ( a1 ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^return a1.oldName.compareTo ( oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return a1.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^return a1.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  Set  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  Map  properties  Property  a1  a2  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P4_Replace_Constructor]^new ProcessProperties (  )   ) ;^205^^^^^190^220^new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, externs, NodeTraversal.traverse ( compiler, externs,  new ProcessProperties (  )   ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, new ProcessExternedProperties (  )  ) ;^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^204^205^^^^189^219^NodeTraversal.traverse ( compiler, externs, new ProcessExternedProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new ProcessExternedProperties (  )   ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, n, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^206^^^^^191^221^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P1_Replace_Type]^new  LinkedList <Property> ( FREQUENCY_COMPARATOR ) ;^210^^^^^195^225^new TreeSet<Property> ( FREQUENCY_COMPARATOR ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a.canRename (  )  || !reservedNames.contains ( a.oldName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a.canRename (  )  && !reservedNames.contains ( newName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  ( a.canRename (  )  ) {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  (  !reservedNames.contains ( a.oldName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^if  ( a.Property (  )  && !reservedNames.contains ( a.oldName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^if  ( a.canRename (  )  && !reservedNames.contains ( oldName )  )  {^215^^^^^200^230^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^218^^^^^215^223^it.remove (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames.contains ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^stringNodes.add ( n ) ;reservedNames.add ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^return a1.oldName.compareTo ( a2.oldName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;reservedNames.add ( a.oldName ) ;^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( a.oldName ) ; }^222^^^^^215^223^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^216^^^^^201^231^propsByFrequency.add ( a ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^prototypeObjLits.add ( map ) ;propsByFrequency.add ( a ) ;^216^^^^^201^231^propsByFrequency.add ( a ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^for  ( Iterator<Map.Entry<String, Property>> it = properties.values (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^212^213^^^^197^227^for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it .next (  )  ;  )  {^212^213^^^^197^227^for  ( Iterator<Map.Entry<String, Property>> it = properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a.canRename (  )  || !reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a.canRename (  )  && !reservedNames.contains ( oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  ( a.canRename (  )  ) {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  (  !reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^if  ( a.Property (  )  && !reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^if  ( a.canRename (  )  && !reservedNames .iterator (  )   )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^218^^^^^212^224^it.remove (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames.contains ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames .iterator (  )  ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^stringNodes.add ( n ) ;reservedNames.add ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^return a1.oldName.compareTo ( a2.oldName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;reservedNames.add ( a.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( a.oldName ) ; }^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^216^^^^^212^224^propsByFrequency.add ( a ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^prototypeObjLits.add ( map ) ;propsByFrequency.add ( a ) ;^216^^^^^212^224^propsByFrequency.add ( a ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^Property a = properties.get ( oldName ) ;Property a = it.next (  ) .getValue (  ) ;^214^^^^^212^224^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^Property a = it .hasNext (  )  .getValue (  ) ;^214^^^^^212^224^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^Property a = this .hasNext (  )  .getValue (  ) ;^214^^^^^212^224^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^214^^^^^212^224^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^if  ( a .canRenameObjLitProperty (  )   && !reservedNames.contains ( a.oldName )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a.oldName.canRename (  )  && !reservedNames.contains ( a )  )  {^215^^^^^212^224^if  ( a.canRename (  )  && !reservedNames.contains ( a.oldName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P13_Insert_Block]^if  ( reservedNames.contains ( prevName )  )  {     continue; }^215^^^^^212^224^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^it .next (  )  ;^218^^^^^212^224^it.remove (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( newName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( a.oldName.oldName ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( a ) ;^222^^^^^212^224^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^Property a = it .hasNext (  )  .getValue (  ) ;^214^^^^^199^229^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^Property a = properties.get ( oldName ) ;Property a = it.next (  ) .getValue (  ) ;^214^^^^^199^229^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^properties.values (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^213^^^^^198^228^properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^213^214^^^^198^228^properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  { Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^properties.entrySet (  ) .iterator (  ) ; it .next (  )  ;  )  {^213^^^^^198^228^properties.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ;  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^214^^^^^199^229^Property a = it.next (  ) .getValue (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P13_Insert_Block]^if  ( reservedNames.contains ( prevName )  )  {     continue; }^215^^^^^200^230^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^218^^^^^203^233^it.remove (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( a ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames.contains ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^reservedNames .iterator (  )  ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^stringNodes.add ( n ) ;reservedNames.add ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^return a1.oldName.compareTo ( a2.oldName ) ;reservedNames.add ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;reservedNames.add ( a.oldName ) ;^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( a.oldName ) ; }^222^^^^^207^237^reservedNames.add ( a.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( prevUsedRenameMap == null )  {^227^^^^^212^242^if  ( prevUsedRenameMap != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^if  ( prevUsedRenameMap != this )  {^227^^^^^212^242^if  ( prevUsedRenameMap != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( p.newName != null )  {^227^^^^^212^242^if  ( prevUsedRenameMap != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( prevName != null )  {^227^^^^^212^242^if  ( prevUsedRenameMap != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P15_Unwrap_Block]^reusePrototypeNames(propsByFrequency);^227^228^229^^^212^242^if  ( prevUsedRenameMap != null )  { reusePrototypeNames ( propsByFrequency ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P16_Remove_Block]^^227^228^229^^^212^242^if  ( prevUsedRenameMap != null )  { reusePrototypeNames ( propsByFrequency ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^reusePrototypeNames ( this ) ;^228^^^^^213^243^reusePrototypeNames ( propsByFrequency ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^228^^^^^213^243^reusePrototypeNames ( propsByFrequency ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator (  "", reservedCharacters ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator ( reservedNames, "" ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator ( reservedCharacters, "", reservedNames ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^NameGenerator nameGen = new NameGenerator ( 3, "", reservedCharacters ) ;^232^233^^^^217^247^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;StringBuilder debug = new StringBuilder (  ) ;^234^^^^^219^249^StringBuilder debug = new StringBuilder (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a.newName != null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( oldName == null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a.newName.newName == null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a == null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^if  ( newName == false )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( a != null && a.newName != null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( p.newName != null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( prevName != null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( prop == null )  {^236^^^^^221^251^if  ( a.newName == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P15_Unwrap_Block]^a.newName = nameGen.generateNextName(); reservedNames.add(a.newName);^236^237^238^239^^221^251^if  ( a.newName == null )  { a.newName = nameGen.generateNextName (  ) ; reservedNames.add ( a.newName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P16_Remove_Block]^^236^237^238^239^^221^251^if  ( a.newName == null )  { a.newName = nameGen.generateNextName (  ) ; reservedNames.add ( a.newName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^a.newName =  nnullmeGen.genernullteNextNnullme (  ) ;^237^^^^^222^252^a.newName = nameGen.generateNextName (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^237^^^^^222^252^a.newName = nameGen.generateNextName (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( oldName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( a ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames.contains ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^stringNodes.add ( n ) ;reservedNames.add ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.oldName ) ;reservedNames.add ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^n.setString ( a.newName ) ;reservedNames.add ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;reservedNames.add ( a.newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( a.newName ) ; }^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^reservedNames.add ( newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^reservedNames .iterator (  )  ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^reservedNames.contains ( newName ) ;^238^^^^^223^253^reservedNames.add ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P3_Replace_Literal]^debug.append ( a.oldName ) .append ( ">=> " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^debug.append ( a.oldName ) .append ( " => " ) .append ( oldName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^debug.append ( a.newName ) .append ( " => " ) .append ( a.oldName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^debug .append ( name )^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^debug .append ( oldName )^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^debug .append ( newName )^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P3_Replace_Literal]^debug.append ( a.oldName ) .append ( " =>" ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^debug.append ( oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^debug.append ( a.oldName.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P3_Replace_Literal]^debug.append ( a.oldName ) .append ( " =>  =" ) .append ( a.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^debug.append ( a ) .append ( " => " ) .append ( a.oldName.newName ) .append ( '\n' ) ;^241^^^^^226^256^debug.append ( a.oldName ) .append ( " => " ) .append ( a.newName ) .append ( '\n' ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^compiler.addToDebugLog ( "JS property assignments:\n"  ==  debug ) ;^244^^^^^229^259^compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P3_Replace_Literal]^compiler.addToDebugLog ( "y assignmentS property assignments:\n" + debug ) ;^244^^^^^229^259^compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^244^^^^^229^259^compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^244^^^^^229^259^compiler.addToDebugLog ( "JS property assignments:\n" + debug ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P3_Replace_Literal]^boolean changed = true;^247^^^^^232^262^boolean changed = false;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a != null || a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a == null && a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( a != null && a.newName == null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a != rootull && a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a != null && newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( n != aull && a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( a != a.newNameull && n != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  ( a != null ) {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  (  a.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P6_Replace_Expression]^if  ( changed || equals(oldName)) )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^if  (  a.newName != false )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( a.newName == null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P9_Replace_Statement]^if  ( p.newName != null )  {^251^^^^^236^266^if  ( a != null && a.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P15_Unwrap_Block]^n.setString(a.newName); changed = changed || (!(a.newName.equals(oldName)));^251^252^253^254^^236^266^if  ( a != null && a.newName != null )  { n.setString ( a.newName ) ; changed = changed || !a.newName.equals ( oldName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P16_Remove_Block]^^251^252^253^254^^236^266^if  ( a != null && a.newName != null )  { n.setString ( a.newName ) ; changed = changed || !a.newName.equals ( oldName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^changed = changed && !a.newName.equals ( oldName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^changed = aggressiveRenaming || !a.newName.equals ( oldName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^changed = changed || !a.newName.equals ( newName ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^changed = changed || !a.newName .compareTo ( name )  ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^n.setString ( oldName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;n.setString ( a.newName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^changed = oldName || !a.newName.equals ( changed ) ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^changed = changed || !a.newName .compareTo ( oldName )  ;^253^^^^^238^268^changed = changed || !a.newName.equals ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P1_Replace_Type]^char oldName = n.getchar (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^String oldName = root.getString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^String oldName = n.setString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^String oldName = root.setString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^Property a = properties.get ( newName ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^Property a = oldName.get ( properties ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^Property a = it.next (  ) .getValue (  ) ;Property a = properties.get ( oldName ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^Property prop = properties.get ( name ) ;Property a = properties.get ( oldName ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^String s = dest.getString (  ) ;String oldName = n.getString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;String oldName = n.getString (  ) ;^249^^^^^234^264^String oldName = n.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^Property a = 3.get ( oldName ) ;^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^250^^^^^235^265^Property a = properties.get ( oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^n.setString ( newName ) ;^252^^^^^237^267^n.setString ( a.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P5_Replace_Variable]^if  ( aggressiveRenaming )  {^257^^^^^242^272^if  ( changed )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P15_Unwrap_Block]^compiler.reportCodeChange();^257^258^259^^^242^272^if  ( changed )  { compiler.reportCodeChange (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P16_Remove_Block]^^257^258^259^^^242^272^if  ( changed )  { compiler.reportCodeChange (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^258^^^^^243^273^compiler.reportCodeChange (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P14_Delete_Statement]^^258^^^^^243^273^compiler.reportCodeChange (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P13_Insert_Block]^if  ( changed )  {     compiler.reportCodeChange (  ) ; }^258^^^^^243^273^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P8_Replace_Mix]^compiler .addToDebugLog ( name )  ;^258^^^^^243^273^compiler.reportCodeChange (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  prototypeObjLits  reservedNames  stringNodes  StringBuilder  debug  Node  externs  n  root  NameGenerator  nameGen  String  name  newName  oldName  SortedSet  propsByFrequency  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  VariableMap  prevUsedRenameMap  Iterator  it  Map  properties  Property  a  
[P2_Replace_Operator]^if  ( prevName == null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( oldName != null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( prevName != false )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( a.newName == null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( p.newName != null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prevUsedRenameMap != null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prop == null )  {^271^^^^^268^280^if  ( prevName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^if (reservedNames.contains(prevName)) {    continue;}; prop.newName = prevName; reservedNames.add(prevName);^271^272^273^274^^268^280^if  ( prevName != null )  { if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^271^272^273^274^^268^280^if  ( prevName != null )  { if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( prevName.contains ( reservedNames )  )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( reservedNames .iterator (  )   )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^continue;^272^273^274^^^268^280^if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^272^273^274^^^268^280^if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^prop.newName = oldName;^276^^^^^268^280^prop.newName = prevName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^prop.newName =  prevName;^276^^^^^268^280^prop.newName = prevName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.oldName = name;prop.newName = prevName;^276^^^^^268^280^prop.newName = prevName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.newName = null;prop.newName = prevName;^276^^^^^268^280^prop.newName = prevName;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( reservedNames.contains ( oldName )  )  {^272^^^^^268^280^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( reservedNames.contains ( prevName )  )  {     continue; }^272^^^^^268^280^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^reservedNames.add ( oldName ) ;^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames.contains ( prevName ) ;^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( prevName ) ; }^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^char prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String prevName = prevUsedRenameMap.lookupNewName ( oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String prevName = prop.lookupNewName ( prevUsedRenameMap.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String prevName = prop.oldName.lookupNewName ( prevUsedRenameMap ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^String prevName = prevUsedRenameMap.VariableMap ( prop.oldName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String prevName = prevUsedRenameMap.lookupNewName ( prevName ) ;^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^270^^^^^268^280^String prevName = prevUsedRenameMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames .iterator (  )  ;^277^^^^^268^280^reservedNames.add ( prevName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] reusePrototypeNames [RETURN_TYPE] void   Property> properties [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( dest.getType (  )  <= Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( dest.setString (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^reservedNames.add(dest.getString());^293^294^295^^^288^297^if  ( dest.getType (  )  == Token.STRING )  { reservedNames.add ( dest.getString (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^293^294^295^^^288^297^if  ( dest.getType (  )  == Token.STRING )  { reservedNames.add ( dest.getString (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^293^^^^^288^297^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^293^^^^^288^297^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^293^^^^^288^297^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^293^^^^^288^297^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames.contains ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames .iterator (  )  ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames.add ( dest.setString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames.add ( dest .setString ( name )   ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;reservedNames.add ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^String s = dest.getString (  ) ;reservedNames.add ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.oldName ) ;reservedNames.add ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;reservedNames.add ( dest.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^reservedNames.add ( dest .setString ( newName )   ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .isExported (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.setString (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^switch  ( parent .getString (  )   )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  )  .isExported ( oldName )  ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^Node dest = parent.setString (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^reservedNames.add ( dest .setString ( prevName )   ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  dest  n  parent  String  name  newName  oldName  prevName  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( dest.setString (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  ( s.equals ( "prototype" )  )  {     processPrototypeParent ( parent, t.getInput (  )  ) ; }else {     markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^314^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( s.equals ( "to" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( prevName.equals ( "prototype" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^processPrototypeParent(parent, t.getInput());^316^317^318^319^320^309^339^if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ; } else { markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^316^317^318^319^320^309^339^if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ; } else { markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     String s = dest.getString (  ) ;     if  ( s.equals ( "prototype" )  )  {         processPrototypeParent ( parent, t.getInput (  )  ) ;     }else {         markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;     } }^316^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( dest, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( key, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^processPrototypeParent ( parent, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^processPrototypeParent (  t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^processPrototypeParent ( paren t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^markObjLitPropertyCandidate ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^char s = dest.getchar (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^String s = parent.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^String s = dest.setString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^String s = dest .setString ( newName )  ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;String s = dest.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( dest.getString (  )  ) ;String s = dest.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( s.equals ( "r" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( s .compareTo ( prevName )   )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^markPrototypePropertyCandidate ( parent, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( dest, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( key, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^processPrototypeParent ( parent, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( s.equals ( "prototyper" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( !prototypeObjLits.contains ( parent )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( child.getType() == STRING )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( !prototypeObjLits.add ( n )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( child.setString (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.1 )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^markObjLitPropertyCandidate(child, t.getInput());^332^333^334^^^309^339^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^332^333^334^^^309^339^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^332^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^332^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^332^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^332^^^^^309^339^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( child, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^for  ( Node child = n.setString (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^for  ( Node parent = n.setString (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( child.getType (  )  < Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( child.setString (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^markObjLitPropertyCandidate(child, t.getInput());^332^333^334^^^328^335^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^332^333^334^^^328^335^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^332^^^^^328^335^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^332^^^^^328^335^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^332^^^^^328^335^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^332^^^^^328^335^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( child, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^child = parent.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^child = child.isExported (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^child = child .isExported ( name )^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^child = child.setString (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^for  ( Node child = parent.setString (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^child = child .isExported ( s )^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^child = child .isExported ( prevName )^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.null )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .isExported (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.setString (  ) .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  )  .isExported ( oldName )  ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P3_Replace_Literal]^if  ( s.equals ( "prototyperot" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^markPrototypePropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  NodeTraversal  t  Node  child  dest  n  parent  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.1 )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( dest.setString (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(dest, input);^352^353^354^^^337^367^if  ( dest.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( dest, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^352^353^354^^^337^367^if  ( dest.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( dest, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^352^^^^^337^367^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^352^^^^^337^367^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^352^^^^^337^367^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^352^^^^^337^367^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( dest, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( map.getType (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.this )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( n.setString (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^map = n.getFirstChild().getNext();^361^362^363^364^365^346^376^if  ( n.getType (  )  == Token.ASSIGN )  { map = n.getFirstChild (  ) .getNext (  ) ; } else { map = n.getLastChild (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^361^362^363^364^365^346^376^if  ( n.getType (  )  == Token.ASSIGN )  { map = n.getFirstChild (  ) .getNext (  ) ; } else { map = n.getLastChild (  ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^361^^^^^346^376^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^361^^^^^346^376^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^361^^^^^346^376^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^361^^^^^346^376^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map = map.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n.setString (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map =  key.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^map = n.getFirstChild (  ) .getNext (  ) ;map = n.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map = map.setString (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map = map.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n.getFirstChild (  ) .isExported (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n.getFirstChild (  )  .isExported ( newName )  ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n.setString (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map =  key.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^map = n.getLastChild (  ) ;map = n.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;map = n.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n .getLastChild (  )  .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map = map.setString (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( map.getType (  )  != Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( map.getType (  )  >= Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( key != null )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P6_Replace_Expression]^if  ( key.getType() == STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( map.setString (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( map .getString (  )   == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( key.setString (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(key, input);^375^376^377^^^360^390^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^375^376^377^^^360^390^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^375^^^^^360^390^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^375^^^^^360^390^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^375^^^^^360^390^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^375^^^^^360^390^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( key, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^markObjLitPropertyCandidate ( n, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node key = n.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node n = map.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^for  ( Node key = map.setString (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^for  ( Node key = n .getLastChild (  )  ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( key.setString (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(key, input);^375^376^377^^^373^378^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^375^376^377^^^373^378^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^375^^^^^373^378^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^375^^^^^373^378^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^375^^^^^373^378^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     reservedNames.add ( dest.getString (  )  ) ; }^375^^^^^373^378^[Delete]^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( key, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( n.setString (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^key != null; n = key.getNext (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key.isExported (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key.setString (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^key !=  null; n^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^for  ( Node key = n.setString (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^prototypeObjLits.add ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^prototypeObjLits.contains ( map ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^prototypeObjLits.contains ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P12_Insert_Condition]^if  ( !prototypeObjLits.contains ( n )  )  { prototypeObjLits.add ( map ) ; }^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^373^374^375^376^377^358^388^for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key .isExported ( newName )^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^374^375^376^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( n.setString (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map = map.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n.setString (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^map = n .getFirstChild (  )  ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map =  key.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^map = n.getFirstChild (  ) .getNext (  ) ;map = n.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key .isExported ( name )^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key .isExported ( s )^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^key !=  null; null^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .isExported (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  )  .isExported ( newName )  ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n.setString (  ) .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^347^^^^^332^362^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^switch  ( map .getString (  )   )  {^347^^^^^332^362^switch  ( n.getType (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( map.setString (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( n.setString (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^key != null; key = key .isExported ( oldName )^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^key != null; n = key.setString (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  dest  key  map  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^stringNodes .iterator (  )  ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;stringNodes.add ( n ) ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;stringNodes.add ( n ) ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.oldName ) ;stringNodes.add ( n ) ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n.setString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .refCount++;getProperty ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .objLitCount++;getProperty ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n .setString ( name )  , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^stringNodes .iterator (  )  ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^404^405^^^^403^406^stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;stringNodes.add ( n ) ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;stringNodes.add ( n ) ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.oldName ) ;stringNodes.add ( n ) ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n.setString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .prototypeCount++;getProperty ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .refCount++;getProperty ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n .setString ( s )  , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^416^^^^^415^418^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^416^417^^^^415^418^stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.newName ) ;stringNodes.add ( n ) ;^416^^^^^415^418^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;stringNodes.add ( n ) ;^416^^^^^415^418^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^reservedNames.add ( a.oldName ) ;stringNodes.add ( n ) ;^416^^^^^415^418^stringNodes.add ( n ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n.setString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^getProperty ( n .setString ( newName )  , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .prototypeCount++;getProperty ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .objLitCount++;getProperty ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  Node  n  String  name  newName  oldName  prevName  s  Map  properties  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Property prop = properties.get ( s ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^Property a = properties.get ( oldName ) ;Property prop = properties.get ( name ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^Property prop = properties.get ( prevName ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^Property prop = 4.get ( name ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( prop != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( prop == true )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( n1 != n2 )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( a.newName == null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( p.newName != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prevName != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P4_Replace_Constructor]^prop = prop =  new ProcessExternedProperties (  )  ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^prop = new Property ( s ) ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^prop.input =  input;^432^^^^^424^435^prop.input = input;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P11_Insert_Donor_Statement]^this.input = null;prop.input = input;^432^^^^^424^435^prop.input = input;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^prop = new Property ( prevName ) ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^properties.put ( prevName, prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^properties.put (  prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^properties.put ( name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^properties.put ( s, prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^prop =   new ProcessExternedProperties (  )  ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  properties  Property  prop  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P2_Replace_Operator]^if  ( p.newName == null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( s != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^if  ( p != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^if  ( p.newName != false )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( a.newName == null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( a != null && a.newName != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prevUsedRenameMap != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prevName != null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P9_Replace_Statement]^if  ( prop == null )  {^446^^^^^443^451^if  ( p.newName != null )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P15_Unwrap_Block]^map.put(p.oldName, p.newName);^446^447^448^^^443^451^if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P16_Remove_Block]^^446^447^448^^^443^451^if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( oldName, p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.oldName, oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.oldName.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put (  p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.oldName.oldName, p.newName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.newName, p.oldName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P7_Replace_Invocation]^for  ( Property p : properties.entrySet (  )  )  {^445^^^^^443^451^for  ( Property p : properties.values (  )  )  {^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P14_Delete_Statement]^^445^446^447^448^^443^451^for  ( Property p : properties.values (  )  )  { if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.oldName, s ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^map.put ( p.newName.oldName, p ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^map.put ( p.oldName, prevName ) ;^447^^^^^443^451^map.put ( p.oldName, p.newName ) ;^[CLASS] RenamePrototypes Property 1 ProcessExternedProperties ProcessProperties  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^char oldName;^71^^^^^66^76^String oldName;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^char newName;^72^^^^^67^77^String newName;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^short  prototypeCount;^73^^^^^68^78^int prototypeCount;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^long  objLitCount;^74^^^^^69^79^int objLitCount;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P1_Replace_Type]^long  refCount;^75^^^^^70^80^int refCount;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P8_Replace_Mix]^short  refCount;^75^^^^^70^80^int refCount;^[CLASS] Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  CompilerInput  input  boolean  aggressiveRenaming  changed  Set  properties  prototypeObjLits  reservedNames  stringNodes  VariableMap  prevUsedRenameMap  String  name  newName  oldName  prevName  s  Map  map  properties  Property  p  int  i  n  n1  n2  objLitCount  prototypeCount  refCount  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  
[P5_Replace_Variable]^this.oldName = oldName;^79^^^^^78^85^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.newName = null;this.oldName = name;^79^^^^^78^85^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.input = null;this.oldName = name;^79^^^^^78^85^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^this.newName = true;^80^^^^^78^85^this.newName = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.oldName = name;this.newName = null;^80^^^^^78^85^this.newName = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.input = null;this.newName = null;^80^^^^^78^85^this.newName = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^this.prototypeCount = refCount;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^this.prototypeCount = 1;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.refCount = 0;this.prototypeCount = 0;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.objLitCount = 0;this.prototypeCount = 0;^81^^^^^78^85^this.prototypeCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P12_Insert_Condition]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { this.prototypeCount = 0; this.objLitCount = 0; }^81^82^^^^78^85^this.prototypeCount = 0; this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^this.objLitCount = prototypeCount;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^this.objLitCount = 4;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.prototypeCount = 0;this.objLitCount = 0;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.refCount = 0;this.objLitCount = 0;^82^^^^^78^85^this.objLitCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^this.refCount = refCount;^83^^^^^78^85^this.refCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^this.refCount = 1;^83^^^^^78^85^this.refCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.prototypeCount = 0;this.refCount = 0;^83^^^^^78^85^this.refCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.objLitCount = 0;this.refCount = 0;^83^^^^^78^85^this.refCount = 0;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^this.input = false;^84^^^^^78^85^this.input = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.oldName = name;this.input = null;^84^^^^^78^85^this.input = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P11_Insert_Donor_Statement]^this.newName = null;this.input = null;^84^^^^^78^85^this.input = null;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^return prototypeCount  !=  objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return objLitCount + objLitCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return prototypeCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return prototypeCount + objLitCount + objLitCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return refCount + objLitCount + prototypeCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return objLitCount + prototypeCount + refCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^return prototypeCount + refCount + objLitCount;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^return true ;^88^^^^^87^89^return prototypeCount + objLitCount + refCount;^[CLASS] Property  [METHOD] count [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.prototypeCount > 0 || this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.prototypeCount == 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.prototypeCount > 0 && this.objLitCount >= 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^if  ( this.prototypeCount > -7 && this.objLitCount == -7 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( refCount > 0 && this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  ( this.prototypeCount > 0 ) {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  (  this.objLitCount == 0 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^if  (  this.objLitCount == 0 + 4 )  {^92^^^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return canRenamePrototypeProperty();^92^93^94^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { return canRenamePrototypeProperty (  ) ; }^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^92^93^94^^^91^103^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  { return canRenamePrototypeProperty (  ) ; }^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  (  (  ( this.objLitCount )  > 0 )  &&  (  ( this.prototypeCount )  == 0 )  )  {     return canRenameObjLitProperty (  ) ; }^92^^^^^91^103^[Delete]^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^return canRenameObjLitProperty (  ) ;^93^^^^^91^103^return canRenamePrototypeProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P14_Delete_Statement]^^93^^^^^91^103^return canRenamePrototypeProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.objLitCount > 0 || this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.objLitCount < 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( this.objLitCount > 0 && this.prototypeCount != 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^if  ( this.objLitCount > 9 && this.prototypeCount == 9 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( prototypeCount > 0 && this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( this.objLitCount > 0 && refCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( this.prototypeCount > 0 && this.objLitCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  ( this.objLitCount > 0 ) {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  (  this.prototypeCount == 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^if  (  refCount == 0 / 0 )  {^95^^^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  {^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return canRenameObjLitProperty();^95^96^97^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { return canRenameObjLitProperty (  ) ; }^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^95^96^97^^^91^103^if  ( this.objLitCount > 0 && this.prototypeCount == 0 )  { return canRenameObjLitProperty (  ) ; }^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  (  (  ( this.prototypeCount )  > 0 )  &&  (  ( this.objLitCount )  == 0 )  )  {     return canRenamePrototypeProperty (  ) ; }^95^^^^^91^103^[Delete]^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^return canRenamePrototypeProperty (  ) ;^96^^^^^91^103^return canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P14_Delete_Statement]^^96^^^^^91^103^return canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^return canRenamePrototypeProperty (  )  || canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^return canRenameObjLitProperty (  )  && canRenameObjLitProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^return canRenamePrototypeProperty (  )  && canRenamePrototypeProperty (  ) ;^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P14_Delete_Statement]^^102^^^^^91^103^return canRenamePrototypeProperty (  )  && canRenameObjLitProperty (  ) ;^[CLASS] Property  [METHOD] canRename [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .isPrivate ( newName )   )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return false;^106^107^108^109^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^106^107^108^109^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^106^^^^^105^128^[Delete]^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return true;^108^^^^^105^128^return false;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( null.getCodingConvention (  ) .isExported ( oldName )  )  {^106^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^106^^^^^105^128^[Delete]^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return true;^111^112^113^114^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^111^112^113^114^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^111^^^^^105^128^[Delete]^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return false;^113^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^111^^^^^105^128^[Delete]^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( 2.getCodingConvention (  ) .isPrivate ( oldName )  )  {^111^^^^^105^128^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return true;^116^117^118^^^105^128^if  ( aggressiveRenaming )  { return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^116^117^118^^^105^128^if  ( aggressiveRenaming )  { return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return false;^117^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^if  ( Character.isUpperCase ( ch )  && !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  ( Character.isUpperCase ( ch )  ) {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P6_Replace_Expression]^if  (  !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^if  ( Character.isLetter ( ch )  || !Character.isLetter ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^if  ( Character.isUpperCase ( ch )  || !Character.isUpperCase ( ch )  )  {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^if  ( Character.isLetter ( ch )  ) {^123^^^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return true;^123^124^125^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^123^124^125^^^105^128^if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return false;^124^^^^^105^128^return true;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P1_Replace_Type]^for  (  long  i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P2_Replace_Operator]^for  ( int i = 0, n = oldName.length (  ) ; i <= n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^for  ( int i = i, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() - 4 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( refCountnt i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( int i = 0, refCount = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( int i = 0, n = newName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( int i = 0 = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( nnt i = 0, i = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^for  ( int i = 0, oldName = n.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P1_Replace_Type]^String ch = oldName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^char ch = newName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^char ch = i.charAt ( oldName ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P8_Replace_Mix]^char ch = oldName.charAt ( refCount ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P14_Delete_Statement]^^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P1_Replace_Type]^for  (  short  i = 0, n = oldName.length (  ) ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() + 3 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^for  ( int i = 0, n = oldName.length() + 2 ; i < n; i++ )  {^120^^^^^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  {^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P1_Replace_Type]^int ch = oldName.charAt ( i ) ;^121^^^^^105^128^char ch = oldName.charAt ( i ) ;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P14_Delete_Statement]^^120^121^^123^124^105^128^for  ( int i = 0, n = oldName.length (  ) ; i < n; i++ )  { char ch = oldName.charAt ( i ) ; if  ( Character.isUpperCase ( ch )  || !Character.isLetter ( ch )  )  { return true; }^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return true;^127^^^^^105^128^return false;^[CLASS] Property  [METHOD] canRenamePrototypeProperty [RETURN_TYPE] boolean   [VARIABLES] char  ch  CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( null.getCodingConvention (  ) .isExported ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( newName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isExported ( compiler )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .isPrivate ( name )   )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return false;^131^132^133^134^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^131^132^133^134^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {  return false; }^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^131^^^^^130^144^[Delete]^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return true;^133^^^^^130^144^return false;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .isPrivate ( newName )   )  {^131^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^131^^^^^130^144^[Delete]^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isPrivate ( newName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P5_Replace_Variable]^if  ( oldName.getCodingConvention (  ) .isPrivate ( compiler )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P9_Replace_Statement]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {^136^^^^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P15_Unwrap_Block]^return true;^136^137^138^139^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P16_Remove_Block]^^136^137^138^139^^130^144^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {  return true; }^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( oldName )  )  {     return false; }^136^^^^^130^144^[Delete]^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return false;^138^^^^^130^144^return true;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isPrivate ( oldName )  )  {     return true; }^136^^^^^130^144^[Delete]^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P3_Replace_Literal]^return true;^143^^^^^130^144^return false;^[CLASS] Property  [METHOD] canRenameObjLitProperty [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  i  n  objLitCount  prototypeCount  refCount  
[P1_Replace_Type]^short  n1 = a1.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^int n1 = a2.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P11_Insert_Donor_Statement]^int n2 = a2.count (  ) ;int n1 = a1.count (  ) ;^154^^^^^153^160^int n1 = a1.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P14_Delete_Statement]^^154^155^^^^153^160^int n1 = a1.count (  ) ; int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P1_Replace_Type]^long  n2 = a2.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^int n2 = a1.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P11_Insert_Donor_Statement]^int n1 = a1.count (  ) ;int n2 = a2.count (  ) ;^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P14_Delete_Statement]^^155^^^^^153^160^int n2 = a2.count (  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P2_Replace_Operator]^if  ( n1 == n2 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^if  ( n2 != n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P6_Replace_Expression]^if  ( n2 - n1 )  {^156^^^^^153^160^if  ( n1 != n2 )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P15_Unwrap_Block]^return n2 - n1;^156^157^158^^^153^160^if  ( n1 != n2 )  { return n2 - n1; }^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P16_Remove_Block]^^156^157^158^^^153^160^if  ( n1 != n2 )  { return n2 - n1; }^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P2_Replace_Operator]^return n2  !=  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return n1 - n2;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P8_Replace_Mix]^return n2  ;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P2_Replace_Operator]^return n2  <<  n1;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P8_Replace_Mix]^return n2   instanceof   n1;^157^^^^^153^160^return n2 - n1;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return a1.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return a2.oldName.compareTo ( a1.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return a1.oldName.compareTo ( a2 ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return a2.compareTo ( a1.oldName.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P5_Replace_Variable]^return a1.compareTo ( a2.oldName ) ;^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P14_Delete_Statement]^^159^^^^^153^160^return a1.oldName.compareTo ( a2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property a1 Property a2 [VARIABLES] boolean  Property  a1  a2  int  n1  n2  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^293^^^^^288^297^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P15_Unwrap_Block]^reservedNames.add(dest.getString());^293^294^295^^^288^297^if  ( dest.getType (  )  == Token.STRING )  { reservedNames.add ( dest.getString (  )  ) ; }^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P16_Remove_Block]^^293^294^295^^^288^297^if  ( dest.getType (  )  == Token.STRING )  { reservedNames.add ( dest.getString (  )  ) ; }^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P7_Replace_Invocation]^reservedNames.add ( dest .getFirstChild (  )   ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P8_Replace_Mix]^reservedNames.add ( parent.getString (  )  ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P14_Delete_Statement]^^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^289^^^^^288^297^switch  ( n.getType (  )  )  {^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P14_Delete_Statement]^^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P7_Replace_Invocation]^Node dest = n .getString (  )  .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P8_Replace_Mix]^Node dest = parent .getString (  )  .getNext (  ) ;^292^^^^^288^297^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P8_Replace_Mix]^reservedNames.add ( parent .getFirstChild (  )   ) ;^294^^^^^288^297^reservedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExternedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  dest  n  parent  
[P2_Replace_Operator]^if  ( dest.getType (  )  >= Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^314^^^^^309^339^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  ( s.equals ( "prototype" )  )  {     processPrototypeParent ( parent, t.getInput (  )  ) ; }else {     markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^314^^^^^309^339^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P15_Unwrap_Block]^processPrototypeParent(parent, t.getInput());^316^317^318^319^320^309^339^if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ; } else { markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P16_Remove_Block]^^316^317^318^319^320^309^339^if  ( s.equals ( "prototype" )  )  { processPrototypeParent ( parent, t.getInput (  )  ) ; } else { markPropertyAccessCandidate ( dest, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     String s = dest.getString (  ) ;     if  ( s.equals ( "prototype" )  )  {         processPrototypeParent ( parent, t.getInput (  )  ) ;     }else {         markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;     } }^316^^^^^309^339^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^markPrototypePropertyCandidate ( parent, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( dest, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( key, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^processPrototypeParent ( parent, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^316^320^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^processPrototypeParent ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^processPrototypeParent (  t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^processPrototypeParent ( paren t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^processPrototypeParent ( t, parent.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P1_Replace_Type]^char s = dest.getchar (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^String s = parent.getString (  ) ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^String s = parent .getLastChild (  )  ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( parent, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate (  t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( des t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markPropertyAccessCandidate ( t, dest.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( dest, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markPrototypePropertyCandidate ( key, input ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P11_Insert_Donor_Statement]^processPrototypeParent ( parent, t.getInput (  )  ) ;markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^319^^^^^309^339^markPropertyAccessCandidate ( dest, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P3_Replace_Literal]^if  ( s.equals ( "prototypeproto" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^if  ( !prototypeObjLits.contains ( parent )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P6_Replace_Expression]^if  ( child.getType() == STRING )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^if  ( !prototypeObjLits.add ( n )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P15_Unwrap_Block]^markObjLitPropertyCandidate(child, t.getInput());^332^333^334^^^309^339^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P16_Remove_Block]^^332^333^334^^^309^339^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^332^^^^^309^339^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^332^^^^^309^339^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^332^^^^^309^339^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( child, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^for  ( Node child = parent.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P15_Unwrap_Block]^markObjLitPropertyCandidate(child, t.getInput());^332^333^334^^^328^335^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P16_Remove_Block]^^332^333^334^^^328^335^if  ( child.getType (  )  == Token.STRING )  { markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^332^^^^^328^335^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^332^^^^^328^335^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^332^^^^^328^335^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate (  t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^markObjLitPropertyCandidate ( t, child.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^markPrototypePropertyCandidate ( child, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^markPrototypePropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^333^^^^^328^335^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^child = parent.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^for  ( Node child = parent .getLastChild (  )  ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^markPrototypePropertyCandidate ( parent, t.getInput (  )  ) ;^333^^^^^309^339^markObjLitPropertyCandidate ( child, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.STRING )  {^332^^^^^328^335^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^child =  null.getNext (  ) .getNext (  )  )  {^330^^^^^309^339^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^String s = dest .getLastChild (  )  ;^315^^^^^309^339^String s = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ;^328^^^^^309^339^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^310^^^^^309^339^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P14_Delete_Statement]^^313^^^^^309^339^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P3_Replace_Literal]^if  ( s.equals ( "ro" )  )  {^316^^^^^309^339^if  ( s.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^markObjLitPropertyCandidate ( n, t.getInput (  )  ) ;^317^^^^^309^339^processPrototypeParent ( parent, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^if  ( !prototypeObjLits.add ( parent )  )  {^324^^^^^309^339^if  ( !prototypeObjLits.contains ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.STRING )  {^332^^^^^309^339^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  String  s  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.null )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^352^^^^^337^367^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(dest, input);^352^353^354^^^337^367^if  ( dest.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( dest, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P16_Remove_Block]^^352^353^354^^^337^367^if  ( dest.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( dest, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^352^^^^^337^367^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^352^^^^^337^367^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^352^^^^^337^367^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, dest ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( dest, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^markObjLitPropertyCandidate ( n, input ) ;^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^353^^^^^338^368^markPrototypePropertyCandidate ( dest, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( map.getType (  )  == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P15_Unwrap_Block]^map = n.getFirstChild().getNext();^361^362^363^364^365^346^376^if  ( n.getType (  )  == Token.ASSIGN )  { map = n.getFirstChild (  ) .getNext (  ) ; } else { map = n.getLastChild (  ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P16_Remove_Block]^^361^362^363^364^365^346^376^if  ( n.getType (  )  == Token.ASSIGN )  { map = n.getFirstChild (  ) .getNext (  ) ; } else { map = n.getLastChild (  ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^361^^^^^346^376^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( key, input ) ; }^361^^^^^346^376^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^361^^^^^346^376^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^map = map.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^map =  key.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P11_Insert_Donor_Statement]^map = n.getFirstChild (  ) .getNext (  ) ;map = n.getLastChild (  ) ;^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^364^^^^^361^365^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^map = map.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^map = n .getLastChild (  )  .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^map =  key.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P11_Insert_Donor_Statement]^map = n.getLastChild (  ) ;map = n.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;map = n.getFirstChild (  ) .getNext (  ) ;^362^^^^^347^377^map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( map.getType (  )  < Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( map.getType (  )  >= Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P6_Replace_Expression]^if  ( key != null )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P6_Replace_Expression]^if  ( key.getType() == STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^if  ( map .getString (  )   == Token.OBJECTLIT )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^366^^^^^351^381^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^375^^^^^360^390^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(key, input);^375^376^377^^^360^390^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P16_Remove_Block]^^375^376^377^^^360^390^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^375^^^^^360^390^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^375^^^^^360^390^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^375^^^^^360^390^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( key, input ) ;^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^376^^^^^361^391^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^for  ( Node n = map.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^for  ( Node map = key.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^for  ( Node key = map .getLastChild (  )  ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P15_Unwrap_Block]^markPrototypePropertyCandidate(key, input);^375^376^377^^^373^378^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P16_Remove_Block]^^375^376^377^^^373^378^if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     markObjLitPropertyCandidate ( child, t.getInput (  )  ) ; }^375^^^^^373^378^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( ASSIGN )  )  {     map = n.getFirstChild (  ) .getNext (  ) ; }else {     map = n.getLastChild (  ) ; }^375^^^^^373^378^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     markPrototypePropertyCandidate ( dest, input ) ; }^375^^^^^373^378^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( n, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate (  input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^markPrototypePropertyCandidate ( input, key ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^markObjLitPropertyCandidate ( key, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^key != null; n = key.getNext (  ) .getNext (  )  )  {^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^key !=  null; null^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^for  ( Node key = n.getFirstChild (  ) ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^prototypeObjLits.add ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^prototypeObjLits.contains ( map ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^prototypeObjLits.contains ( n ) ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P12_Insert_Condition]^if  ( !prototypeObjLits.contains ( n )  )  { prototypeObjLits.add ( map ) ; }^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^373^374^375^376^377^358^388^for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^374^375^376^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^if  ( key .getString (  )   == Token.STRING )  {^375^^^^^373^378^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^markObjLitPropertyCandidate ( n, input ) ;^376^^^^^373^378^markPrototypePropertyCandidate ( key, input ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^map = map.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^map =  key.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P11_Insert_Donor_Statement]^map = n.getFirstChild (  ) .getNext (  ) ;map = n.getLastChild (  ) ;^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^key !=  null; n^374^^^^^359^389^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P5_Replace_Variable]^switch  ( map.getType (  )  )  {^347^^^^^332^362^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^351^^^^^336^366^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.ASSIGN )  {^361^^^^^346^376^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P14_Delete_Statement]^^364^^^^^349^379^map = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^prototypeObjLits .contains ( dest )  ;^369^^^^^354^384^prototypeObjLits.add ( map ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P8_Replace_Mix]^for  ( Node key = n .getLastChild (  )  ;^373^^^^^358^388^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  dest  key  map  n  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^392^^^^^391^394^stringNodes.add ( n ) ;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^392^393^^^^391^394^stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^getProperty ( n .getLastChild (  )  , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .refCount++;getProperty ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .objLitCount++;getProperty ( n.getString (  ) , input ) .prototypeCount++;^393^^^^^391^394^getProperty ( n.getString (  ) , input ) .prototypeCount++;^[CLASS] ProcessProperties  [METHOD] markPrototypePropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^404^^^^^403^406^stringNodes.add ( n ) ;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^404^405^^^^403^406^stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^getProperty ( n .getLastChild (  )  , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .prototypeCount++;getProperty ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .refCount++;getProperty ( n.getString (  ) , input ) .objLitCount++;^405^^^^^403^406^getProperty ( n.getString (  ) , input ) .objLitCount++;^[CLASS] ProcessProperties  [METHOD] markObjLitPropertyCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^stringNodes.contains ( n ) ;^416^^^^^415^418^stringNodes.add ( n ) ;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^416^417^^^^415^418^stringNodes.add ( n ) ; getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( n.getString (  )  ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^getProperty ( input.getString (  ) , n ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^processPrototypeParent ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P7_Replace_Invocation]^getProperty ( n .getLastChild (  )  , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P14_Delete_Statement]^^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .prototypeCount++;getProperty ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P11_Insert_Donor_Statement]^getProperty ( n.getString (  ) , input ) .objLitCount++;getProperty ( n.getString (  ) , input ) .refCount++;^417^^^^^415^418^getProperty ( n.getString (  ) , input ) .refCount++;^[CLASS] ProcessProperties  [METHOD] markPropertyAccessCandidate [RETURN_TYPE] void   Node n CompilerInput input [VARIABLES] CompilerInput  input  boolean  Node  n  
[P5_Replace_Variable]^Property prop = name.get ( properties ) ;^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P14_Delete_Statement]^^425^^^^^424^435^Property prop = properties.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P2_Replace_Operator]^if  ( prop != null )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P8_Replace_Mix]^if  ( prop == true )  {^426^^^^^424^435^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P8_Replace_Mix]^prop =  new Property ( null ) ;^427^^^^^424^435^prop = new Property ( name ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P8_Replace_Mix]^prop.input =  input;^432^^^^^424^435^prop.input = input;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P5_Replace_Variable]^properties.put (  prop ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P5_Replace_Variable]^properties.put ( name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P5_Replace_Variable]^properties.put ( prop, name ) ;^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
[P14_Delete_Statement]^^428^^^^^424^435^properties.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] getProperty [RETURN_TYPE] RenamePrototypes$Property   String name CompilerInput input [VARIABLES] CompilerInput  input  boolean  String  name  Property  prop  
