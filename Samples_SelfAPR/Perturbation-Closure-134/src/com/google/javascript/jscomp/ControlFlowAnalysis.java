[P8_Replace_Mix]^private  AbstractCompiler compiler;^59^^^^^54^64^private final AbstractCompiler compiler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P8_Replace_Mix]^private  Comparator<DiGraphNode<Node, Branch>> priorityComparator = new Comparator<DiGraphNode<Node, Branch>> (  )  {^71^72^^^^71^78^private final Comparator<DiGraphNode<Node, Branch>> priorityComparator = new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P1_Replace_Type]^private  short  astPositionCounter;^80^^^^^75^85^private int astPositionCounter;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P1_Replace_Type]^private  long  priorityCounter;^81^^^^^76^86^private int priorityCounter;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P8_Replace_Mix]^private  short  priorityCounter;^81^^^^^76^86^private int priorityCounter;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P8_Replace_Mix]^private final Deque<Node> exceptionHandler  = null ;^95^^^^^90^100^private final Deque<Node> exceptionHandler = new ArrayDeque<Node> (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P8_Replace_Mix]^private final Multimap<Node, Node> finallyMap  = null ;^126^^^^^121^131^private final Multimap<Node, Node> finallyMap = HashMultimap.create (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^137^^^^^135^139^this.compiler = compiler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean shouldTraverseFunctions [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^this.shouldTraverseFunctions =  null;^138^^^^^135^139^this.shouldTraverseFunctions = shouldTraverseFunctions;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean shouldTraverseFunctions [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^super ( root ) ;^954^^^^^952^956^super ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^954^^^^^952^956^super ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^worklist.add ( entry ) ;super ( entry ) ;^954^^^^^952^956^super ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^this.priorities =  null;^955^^^^^952^956^this.priorities = priorities;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^this.root = root;this.priorities = priorities;^955^^^^^952^956^this.priorities = priorities;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return astPosition.get ( a.getValue (  )  )   ==  astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return bstPosition.get ( a.getValue (  )  )  - astPosition.get ( a.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return b.get ( a.getValue (  )  )  - astPosition.get ( astPosition.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return astPosition.put ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return astPositionstPosition.get ( a.getValue (  )  )  - a.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return a.get ( astPosition.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( null.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^this.root = value;^147^^^^^132^162^this.root = root;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^this.root =  null;^147^^^^^132^162^this.root = root;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^this.priorities = priorities;this.root = root;^147^^^^^132^162^this.root = root;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^astPositionCounter = priorityCounter;^148^^^^^133^163^astPositionCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^astPositionCounter = 0 >>> 4;^148^^^^^133^163^astPositionCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^priorityCounter = 0;astPositionCounter = 0;^148^^^^^133^163^astPositionCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^astPosition  =  astPosition ;^149^^^^^134^164^astPosition = Maps.newHashMap (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities = Maps.newHashMap (  ) ;astPosition = Maps.newHashMap (  ) ;^149^^^^^134^164^astPosition = Maps.newHashMap (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^149^150^^^^134^164^astPosition = Maps.newHashMap (  ) ; nodePriorities = Maps.newHashMap (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^nodePriorities ;^150^^^^^135^165^nodePriorities = Maps.newHashMap (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPosition = Maps.newHashMap (  ) ;nodePriorities = Maps.newHashMap (  ) ;^150^^^^^135^165^nodePriorities = Maps.newHashMap (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^150^151^^^^135^165^nodePriorities = Maps.newHashMap (  ) ; cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg = new AstControlFlowGraph ( computeFallThrough ( value ) , nodePriorities ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , this ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg = new AstControlFlowGraph ( computeFallThrough ( root )  ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg = new AstControlFlowGraph ( computeFallThrough ( nodePriorities ) , root ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg = new AstControlFlowGraph ( computeFollowNode ( root ) , nodePriorities ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cfg = new AstControlFlowGraph ( computeFollowNode ( value ) , nodePriorities ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^151^152^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ; NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, value, this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^152^153^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ; astPosition.put ( null, ++astPositionCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^153^^^^^138^168^astPosition.put ( null, ++astPositionCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPosition.put ( n, astPositionCounter++ ) ;astPosition.put ( null, ++astPositionCounter ) ;^153^^^^^138^168^astPosition.put ( null, ++astPositionCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( candidate, ++priorityCounter ) ;astPosition.put ( null, ++astPositionCounter ) ;^153^^^^^138^168^astPosition.put ( null, ++astPositionCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( current, ++priorityCounter ) ;astPosition.put ( null, ++astPositionCounter ) ;^153^^^^^138^168^astPosition.put ( null, ++astPositionCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^priorityCounter = 1;^157^^^^^142^172^priorityCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^priorityCounter = 2;^157^^^^^142^172^priorityCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPositionCounter = 0;priorityCounter = 0;^157^^^^^142^172^priorityCounter = 0;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^DiGraphNode<Node, Branch> entry = cfg.getImplicitReturn (  ) ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^DiGraphNode<Node, Branch> entry = cfg .createNode ( entry )  ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^DiGraphNode<Node, Branch> entry = cfg .createNode ( value )  ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^DiGraphNode<Node, Branch> entry = null.getImplicitReturn (  ) ;^158^^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^158^159^^^^143^173^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ; prioritizeFromEntryNode ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( entry ) ;^159^^^^^144^174^prioritizeFromEntryNode ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^159^^^^^144^174^prioritizeFromEntryNode ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^prioritizeFromEntryNode ( candidate ) ;prioritizeFromEntryNode ( entry ) ;^159^^^^^144^174^prioritizeFromEntryNode ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( value != null )  {^161^^^^^146^176^if  ( shouldTraverseFunctions )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( value.getType (  )  == FUNCTION )  {^161^^^^^146^176^if  ( shouldTraverseFunctions )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( !(nodePriorities.containsKey(candidate) || candidate == entry) )  {^161^^^^^146^176^if  ( shouldTraverseFunctions )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( candidate == entry )  {^161^^^^^146^176^if  ( shouldTraverseFunctions )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( value != null || value.getType (  )  == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( value == null && value.getType (  )  == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( value != null && value.getType (  )  != Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( root != null && value.getType (  )  == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( value != null ) {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  value.getType (  )  == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( value.getType (  )  == FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( !(nodePriorities.containsKey(candidate) || candidate == entry) )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( candidate == entry )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( value != null && value .getParent (  )   == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( value != this ) {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(((!(nodePriorities.containsKey(candidate))) || (candidate == entry))); prioritizeFromEntryNode(candidate);^166^167^168^169^170^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ; prioritizeFromEntryNode ( candidate ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^166^167^168^169^170^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ; prioritizeFromEntryNode ( candidate ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  && candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate != entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( !nodePriorities.containsKey ( entry )  || candidate == candidate ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( !nodePriorities.get ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( !nodePriorities .get (  )   || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^!nodePriorities.get ( candidate )  || candidate == entry ) ;^168^^^^^153^183^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^168^169^^^^153^183^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ; prioritizeFromEntryNode ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( !nodePriorities.containsKey ( candidate )  )  { !nodePriorities.containsKey ( candidate )  || candidate == entry ) ; }^168^^^^^153^183^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( candidate ) ;^169^^^^^154^184^prioritizeFromEntryNode ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^169^^^^^154^184^prioritizeFromEntryNode ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^prioritizeFromEntryNode ( entry ) ;prioritizeFromEntryNode ( candidate ) ;^169^^^^^154^184^prioritizeFromEntryNode ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^worklist.add ( candidate ) ;prioritizeFromEntryNode ( candidate ) ;^169^^^^^154^184^prioritizeFromEntryNode ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node value = this.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node value = candidate.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node value = candidate.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node value = candidate.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node value = candidate.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node value = candidate.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( DiGraphNode<Node, Branch> candidate : cfg.getEntry (  )  )  {^164^^^^^149^179^for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate > entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( !nodePriorities.containsKey ( 0 )  || candidate == entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( root != true && value.getType (  )  == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate >= entry ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node value = 2.getValue (  ) ;^165^^^^^150^180^Node value = candidate.getValue (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( root != null && value .getParent (  )   == Token.FUNCTION )  {^166^^^^^151^181^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( !nodePriorities.get ( candidate )  || candidate == null ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^168^^^^^153^183^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( !nodePriorities.containsKey ( null )  )  {^179^^^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( !nodePriorities.get ( candidate )  )  {^179^^^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( !nodePriorities .get (  )   )  {^179^^^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nodePriorities.containsKey ( current )  )  {^179^^^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^nodePriorities.put(candidate, (++(priorityCounter)));^179^180^181^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  { nodePriorities.put ( candidate, ++priorityCounter ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^179^180^181^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  { nodePriorities.put ( candidate, ++priorityCounter ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^nodePriorities.put ( null, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^nodePriorities.put (  ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^nodePriorities.get ( candidate, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( current, ++priorityCounter ) ;nodePriorities.put ( candidate, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPosition.put ( null, ++astPositionCounter ) ;nodePriorities.put ( candidate, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;nodePriorities.put ( candidate, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^!nodePriorities.containsKey ( candidate )  || candidate == entry ) ;nodePriorities.put ( candidate, ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( DiGraphNode<Node, Branch> candidate : cfg.getEntry (  )  )  {^178^^^^^163^193^for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( DiGraphNode<Node, Branch> candidate : null.getDirectedGraphNodes (  )  )  {^178^^^^^163^193^for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^178^179^180^181^^163^193^for  ( DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes (  )  )  { if  ( !nodePriorities.containsKey ( candidate )  )  { nodePriorities.put ( candidate, ++priorityCounter ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( !nodePriorities.containsKey ( this )  )  {^179^^^^^164^194^if  ( !nodePriorities.containsKey ( candidate )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( nodePriorities.containsKey ( current )  )  {     continue; }^179^^^^^164^194^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^nodePriorities.put ( 0.getImplicitReturn (  ) , ++priorityCounter ) ;^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^nodePriorities.get ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^nodePriorities.put ( cfg.getEntry (  ) , ++priorityCounter ) ;^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( candidate, ++priorityCounter ) ;nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( current, ++priorityCounter ) ;nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^185^^^^^170^200^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^new PriorityQueue<DiGraphNode<Node, Branch>> ( priorityCounter, priorityComparator ) ;^194^^^^^192^211^new PriorityQueue<DiGraphNode<Node, Branch>> ( 10, priorityComparator ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 7, priorityComparator ) ;^193^194^^^^192^211^PriorityQueue<DiGraphNode<Node, Branch>> worklist = new PriorityQueue<DiGraphNode<Node, Branch>> ( 10, priorityComparator ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^worklist.PriorityQueue ( entry ) ;^195^^^^^192^211^worklist.add ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^worklist.PriorityQueue ( 4 ) ;^195^^^^^192^211^worklist.add ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^195^^^^^192^211^worklist.add ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^worklist.add ( candidate ) ;worklist.add ( entry ) ;^195^^^^^192^211^worklist.add ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^super ( entry ) ;worklist.add ( entry ) ;^195^^^^^192^211^worklist.add ( entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^while  ( !worklist.add (  )  )  {^197^^^^^192^211^while  ( !worklist.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( current.containsKey ( nodePriorities )  )  {^199^^^^^192^211^if  ( nodePriorities.containsKey ( current )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( nodePriorities.get ( current )  )  {^199^^^^^192^211^if  ( nodePriorities.containsKey ( current )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( nodePriorities .get (  )   )  {^199^^^^^192^211^if  ( nodePriorities.containsKey ( current )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( !nodePriorities.containsKey ( candidate )  )  {^199^^^^^192^211^if  ( nodePriorities.containsKey ( current )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^continue;^199^200^201^^^192^211^if  ( nodePriorities.containsKey ( current )  )  { continue; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^199^200^201^^^192^211^if  ( nodePriorities.containsKey ( current )  )  { continue; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^DiGraphNode<Node, Branch> current = worklist.add (  ) ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^DiGraphNode<Node, Branch> current = worklist .isEmpty (  )  ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^List<DiGraphNode<Node, Branch>> successors = current.getDirectedSuccNodes ( cfg ) ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^List<DiGraphNode<Node, Branch>> successors = cfg.createNode ( current ) ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^List<DiGraphNode<Node, Branch>> successors = cfg .getDirectedGraphNodes (  )  ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^DiGraphNode<Node, Branch> entry = cfg.getEntry (  ) ;List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^while  ( !worklist.isEmpty (  )  )  { DiGraphNode<Node, Branch> current = worklist.remove (  ) ;DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( nodePriorities.containsKey ( current )  )  {     continue; }^199^^^^^192^211^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^nodePriorities.put (  ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^nodePriorities.get ( current, ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( candidate, ++priorityCounter ) ;nodePriorities.put ( current, ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPosition.put ( null, ++astPositionCounter ) ;nodePriorities.put ( current, ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nodePriorities.put ( cfg.getImplicitReturn (  ) , ++priorityCounter ) ;nodePriorities.put ( current, ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg.createNode ( current ) ;^206^^^^^192^211^cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg .getDirectedGraphNodes (  )  ;^206^^^^^192^211^cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^206^^^^^192^211^cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^worklist.PriorityQueue ( candidate ) ;^208^^^^^192^211^worklist.add ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^208^^^^^192^211^worklist.add ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^prioritizeFromEntryNode ( candidate ) ;worklist.add ( candidate ) ;^208^^^^^192^211^worklist.add ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^worklist.add ( entry ) ;worklist.add ( candidate ) ;^208^^^^^192^211^worklist.add ( candidate ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^197^198^^^^192^211^while  ( !worklist.isEmpty (  )  )  { DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^DiGraphNode<Node, Branch> current = 2.add (  ) ;^198^^^^^192^211^DiGraphNode<Node, Branch> current = worklist.remove (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^nodePriorities .put ( 3 , priorityCounter )  ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^astPosition.put ( value, astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^astPosition.put (  astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^astPosition.put ( nCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^astPosition.put ( astPosition, nCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^astPosition.get ( n, astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^astPosition.get ( value, astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^astPosition.put ( null, ++astPositionCounter ) ;astPosition.put ( n, astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( shouldTraverseFunctions && n == cfg.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( shouldTraverseFunctions || n != cfg.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( shouldTraverseFunctions || value == cfg.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( cfg || n == shouldTraverseFunctions.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( shouldTraverseFunctions || cfg == n.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( shouldTraverseFunctions ) {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  n == cfg.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getType (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( shouldTraverseFunctions || n == cfg.getImplicitReturn (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( shouldTraverseFunctions || n == null.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^exceptionHandler.push(n); return true;^220^221^222^223^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  { exceptionHandler.push ( n ) ; return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^220^221^222^223^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  { exceptionHandler.push ( n ) ; return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^222^^^^^207^237^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^exceptionHandler.push ( root ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^221^222^^^^206^236^exceptionHandler.push ( n ) ; return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.pop (  ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;exceptionHandler.push ( n ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^224^^^^^209^239^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^227^^^^^212^242^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( value.getType (  )  )  {^218^^^^^203^233^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( root.getType (  )  )  {^218^^^^^203^233^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^exceptionHandler.push ( value ) ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^exceptionHandler .peek (  )  ;^221^^^^^206^236^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^exceptionHandler.push ( value ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^exceptionHandler .peek (  )  ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.pop (  ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;exceptionHandler.push ( n ) ;^226^^^^^211^241^exceptionHandler.push ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent == null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( value != null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent != rootull )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n != parentull )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( n == parent.getLastChild() )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( n != parent.getFirstChild() )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( n != getNext() )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( n == getNext() )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( exceptionHandler.peek (  )  == parent )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( parent != true )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^246^^^^^231^261^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( n != parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( n <= parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( root == parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n == value.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( exceptionHandler.peek (  )  == parent )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( n == parent.getFirstChild (  ) .equals (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( n == parent.getFirstChild (  )  .getType (  )   )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent.getFirstChild (  )  == node )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(((exceptionHandler.peek()) == parent)); exceptionHandler.pop();^281^282^283^284^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ; exceptionHandler.pop (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^281^282^283^284^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ; exceptionHandler.pop (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( exceptionHandler.peek (  )  <= parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( exceptionHandler.peek (  )  == root ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( parent.peek (  )  == exceptionHandler ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( exceptionHandler.pop (  )  == parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( exceptionHandler.peek (  )  == value ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( n ==  ( parent.getFirstChild (  ) .getNext (  )  )  )  {     checkState (  (  ( exceptionHandler.peek (  )  )  == parent )  ) ;     exceptionHandler.pop (  ) ; }^282^^^^^267^297^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^exceptionHandler.peek (  ) ;^283^^^^^268^298^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^283^^^^^268^298^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;exceptionHandler.pop (  ) ;^283^^^^^268^298^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n != parent.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value == parent.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return parent == n.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return n == parent .getFirstChild (  )  ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n == parent.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value != parent.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n != value.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return parent != n.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n != parent .getLastChild (  )  ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { return n != parent.getFirstChild (  ) ; }^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return n != parent.getFirstChild (  ) ; }^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n == parent.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value != parent.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n != value.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return parent != n.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n != parent.getFirstChild (  ) .equals (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n != parent.getFirstChild (  )  .getType (  )  ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n != parent .getLastChild (  )  .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^returnvalue  ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n >= parent.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value != parent.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n != value.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return parent != n.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return true ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { return n != parent.getFirstChild (  ) ; }^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return n != parent.getFirstChild (  ) ; }^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n < parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n == value.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return parent == n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n == parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n == parent.getFirstChild (  )  .getType (  )^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return n == value.getFirstChild (  ) .equals (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^273^^^^^258^288^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( root.getType (  )  )  {^247^^^^^232^262^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( value.getType (  )  )  {^247^^^^^232^262^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n == root.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return n == value.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n != root.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n != root.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n == parent .getLastChild (  )  .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return n == root.getFirstChild (  ) .equals (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n == root.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n == value.getFirstChild (  ) .equals (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( n == parent .getLastChild (  )  .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( exceptionHandler.pop (  )  == value ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^282^283^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ; exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( this.peek (  )  == parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( n < parent.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == n.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n == value.getFirstChild (  )  .getType (  )   )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( exceptionHandler.peek (  )  >= parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( exceptionHandler .push ( parent )   == parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return true ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n >= parent.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n < parent.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return false ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n <= parent.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return n != parent .getLastChild (  )  ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^return n >= parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^returvalue n  &&  parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( null.peek (  )  == parent ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^287^^^^^272^302^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( root.getType (  )  )  {^292^^^^^277^307^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^292^293^294^^^277^307^switch  ( n.getType (  )  )  { case Token.IF: handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleIf ( root ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleDo ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleIf ( value ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleIf ( n ) ;^294^^^^^279^309^handleIf ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleWhile ( root ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleWith ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleWhile ( n ) ;^297^^^^^282^312^handleWhile ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleDo ( value ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleFor ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleDo ( root ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^300^301^^^^285^315^handleDo ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleDo ( n ) ;^300^^^^^285^315^handleDo ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleFor ( value ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleDo ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^303^304^^^^288^318^handleFor ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleFor ( n ) ;^303^^^^^288^318^handleFor ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleSwitch ( value ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleWith ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleSwitch ( root ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^306^307^^^^291^321^handleSwitch ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleSwitch ( n ) ;^306^^^^^291^321^handleSwitch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleCase ( root ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleCatch ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleCase ( value ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^309^310^^^^294^324^handleCase ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleCase ( n ) ;^309^^^^^294^324^handleCase ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleDefault ( value ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleReturn ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleDefault ( root ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^312^313^^^^297^327^handleDefault ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleDefault ( n ) ;^312^^^^^297^327^handleDefault ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleStmt ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleStmt ( value ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleStmtList ( n ) ;^316^^^^^301^331^handleStmtList ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleFunction ( value ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleFor ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleFunction ( n ) ;^319^^^^^304^334^handleFunction ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleExpr ( value ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleFor ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^322^323^^^^307^337^handleExpr ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleExpr ( n ) ;^322^^^^^307^337^handleExpr ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleThrow ( root ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleTry ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleTry ( value ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^325^326^^^^310^340^handleThrow ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleThrow ( n ) ;^325^^^^^310^340^handleThrow ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleTry ( value ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleThrow ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleTry ( n ) ;^328^^^^^313^343^handleTry ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleCatch ( value ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleSwitch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleSwitch ( value ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleCatch ( n ) ;^331^^^^^316^346^handleCatch ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleBreak ( value ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleTry ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^334^335^^^^319^349^handleBreak ( n ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleBreak ( n ) ;^334^^^^^319^349^handleBreak ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleContinue ( value ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleWhile ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^handleWhile ( root ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleContinue ( n ) ;^337^^^^^322^352^handleContinue ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleReturn ( value ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleExpr ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleReturn ( n ) ;^340^^^^^325^355^handleReturn ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleWith ( value ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleSwitch ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmt ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleWith ( n ) ;^343^^^^^328^358^handleWith ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^handleStmt ( value ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^handleTry ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCatch ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleIf ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFunction ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleTry ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleCase ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleReturn ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDefault ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWith ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleWhile ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleBreak ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleExpr ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleFor ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleSwitch ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleDo ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleStmtList ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleContinue ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^handleThrow ( n ) ;handleStmt ( n ) ;^348^^^^^333^363^handleStmt ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node thenBlock = parent.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node thenBlock = node.getFirstChild (  ) .equals (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node thenBlock = node .getLastChild (  )  .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { Node thenBlock = node.getFirstChild (  ) .getNext (  ) ; }^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { Node thenBlock = node.getFirstChild (  ) .getNext (  ) ; }^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node thenBlock = value.getFirstChild (  ) .getNext (  ) ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node thenBlock = node.getFirstChild (  )  .getType (  )  ;^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^354^355^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ; Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^354^^^^^353^366^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node elseBlock = value.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node elseBlock = value .getType (  )  ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node elseBlock = node.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node elseBlock = thenBlock.getNext (  ) ;^355^^^^^353^366^Node elseBlock = thenBlock.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( value )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( thenBlock, Branch.ON_TRUE, computeFallThrough ( node )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFollowNode ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^356^^^^^353^366^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^356^^^^^353^366^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( elseBlock != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( value == null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  (  else {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^358^^^^^353^366^if  ( elseBlock == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.ON_FALSE, computeFollowNode(node));^358^359^360^361^362^353^366^if  ( elseBlock == null )  { createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; } else { createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^358^359^360^361^362^353^366^if  ( elseBlock == null )  { createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; } else { createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( thenBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( elseBlock, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( value )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^362^363^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^362^^^^^353^366^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^362^^^^^353^366^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^362^^^^^353^366^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( parent )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( forNode )  ) ;computeFollowNode ( node )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( fromNode, parent ) ;computeFollowNode ( node )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( node, node ) ;computeFollowNode ( node )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( root, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^359^360^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( value )  ) ;^360^^^^^353^366^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( value )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( value, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( parent, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, NodeUtil.getCatchBlock ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( value, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^364^365^^^^353^366^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^node, NodeUtil.getConditionExpression ( root )  ) ;^365^^^^^353^366^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node, NodeUtil.getCatchBlock ( node )  ) ;^365^^^^^353^366^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^365^^^^^353^366^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;node, NodeUtil.getConditionExpression ( node )  ) ;^365^^^^^353^366^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFollowNode ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .equals (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  .getType (  )   )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node .getLastChild (  )  .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^370^371^^^^368^378^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( root.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node.getFirstChild (  ) .equals (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node.getFirstChild (  )  .getType (  )   )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( node.getNext (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^label = node.getFirstChild (  ) .getString (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ; }^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ; }^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node .getLastChild (  )  .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( parent.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( value.getFirstChild (  ) .getNext (  )  )  ) ;^371^^^^^368^378^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^374^375^^^^368^378^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( value )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( value )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( forNode )  ) ;computeFollowNode ( node )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( fromNode, parent ) ;computeFollowNode ( node )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( node, node ) ;computeFollowNode ( node )  ) ;^375^^^^^368^378^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, NodeUtil.getCatchBlock ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( root, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^376^377^^^^368^378^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^node, NodeUtil.getConditionExpression ( parent )  ) ;^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node, NodeUtil.getCatchBlock ( node )  ) ;^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node, NodeUtil .getCatchBlock ( thenBlock )   ) ;^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^node, NodeUtil.getConditionExpression ( root )  ) ;^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;node, NodeUtil.getConditionExpression ( node )  ) ;^377^^^^^368^378^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWhile [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFollowNode ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( node.getNext (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node .getLastChild (  )   )  ) ;^383^^^^^380^389^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^385^386^^^^380^389^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( root )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( parent )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( forNode )  ) ;computeFollowNode ( node )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( fromNode, parent ) ;computeFollowNode ( node )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( node, node ) ;computeFollowNode ( node )  ) ;^386^^^^^380^389^computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( thenBlock, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, NodeUtil.getCatchBlock ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( parent, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^387^388^^^^380^389^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^node, NodeUtil.getConditionExpression ( value )  ) ;^388^^^^^380^389^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node, NodeUtil.getCatchBlock ( node )  ) ;^388^^^^^380^389^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^388^^^^^380^389^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;node, NodeUtil.getConditionExpression ( node )  ) ;^388^^^^^380^389^node, NodeUtil.getConditionExpression ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDo [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( forNode.getChildCount (  )  != 4 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^if  ( forNode.getChildCount (  )  == -2 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node.getChildCount (  )  == 4 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( forNode .hasChildren (  )   == 4L )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( node.hasChildren (  )  )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( cur.getChildCount (  )  == 4 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node item = n.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node collection = thenBlock.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node collection = item .getType (  )  ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node collection = root.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node curHandler = iter.next (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node body = n.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node body = collection .getType (  )  ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = thenBlock.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node item = forNode .getLastChild (  )  ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getLastChild (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) ;Node item = forNode.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node collection = n.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^417^418^^^^402^432^Node collection = item.getNext (  ) ; Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;Node collection = item.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = root.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node body = collection.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( n )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( body, Branch.ON_TRUE, computeFallThrough ( forNode )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( forNode, Branch.ON_TRUE, computeFollowNode ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^420^421^422^423^424^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;  createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ; connectToPossibleExceptionHandler ( forNode, collection ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( node )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( forNode, Branch.ON_FALSE, computeFallThrough ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^422^423^424^425^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ; connectToPossibleExceptionHandler ( forNode, collection ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( n )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( thenBlock )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^423^424^425^^^408^438^computeFollowNode ( forNode )  ) ; connectToPossibleExceptionHandler ( forNode, collection ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( fromNode ) ;computeFollowNode ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( toNode ) ;computeFollowNode ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( node )  ) ;computeFollowNode ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( fromNode, parent ) ;computeFollowNode ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( node, node ) ;computeFollowNode ( forNode )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( n, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( forNode, parent ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler (  collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( forNode ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( collection, forNode ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^424^425^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( forNode, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node init = node.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node init = thenBlock.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node cond = value.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node curHandler = iter.next (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node iter = thenBlock.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node iter = cond .getType (  )  ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node curHandler = iter.next (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node body = iter .getType (  )  ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = parent.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node curHandler = iter.next (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node init = n.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node init = forNode .getLastChild (  )  ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getLastChild (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) ;Node init = forNode.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^395^396^^^^380^410^Node cond = init.getNext (  ) ; Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node cond = init.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node iter = n.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node iter = node.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node iter = cond.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node body = node.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node body = iter.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND, parent ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.UNCOND, init ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, value ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( init, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( node )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( body, Branch.ON_TRUE, computeFallThrough ( forNode )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( forNode, Branch.ON_TRUE, computeFollowNode ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( n )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( parent )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( forNode, Branch.ON_FALSE, computeFallThrough ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( root )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( node )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( fromNode ) ;computeFollowNode ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( toNode ) ;computeFollowNode ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( node )  ) ;computeFollowNode ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( fromNode, parent ) ;computeFollowNode ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFollowNode ( node, node ) ;computeFollowNode ( forNode )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, node ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.UNCOND, iter ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( iter, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( value, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^411^412^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ; connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( init, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( value, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( forNode, value ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler (  cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( forNode ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( cond, forNode ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( forNode, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( item, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( iter, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node init = thenBlock .getLastChild (  )  ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node cond = node.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = n.getNext (  ) ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node item = node.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node body = node.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = parent.getNext (  ) ;^418^^^^^403^433^Node body = collection.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( thenBlock.getChildCount (  )  == 4 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( root.getChildCount (  )  == 4 )  {^392^^^^^377^407^if  ( forNode.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node init = value.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node init = parent.getFirstChild (  ) ;^394^^^^^379^409^Node init = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node cond = iter.getNext (  ) ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node cond = init .getType (  )  ;^395^^^^^380^410^Node cond = init.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node iter = iter.getNext (  ) ;^396^^^^^381^411^Node iter = cond.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node body = n .getType (  )  ;^397^^^^^382^412^Node body = iter.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND, node ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( init, Branch.UNCOND, value ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( iter )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( n, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^404^405^^^^389^419^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFollowNode ( node )  ) ;^405^^^^^390^420^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, value ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( iter, init ) ;^411^^^^^396^426^connectToPossibleExceptionHandler ( init, init ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( node, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( n, cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( n, iter ) ;^413^^^^^398^428^connectToPossibleExceptionHandler ( iter, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node item = root.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node item = value.getFirstChild (  ) ;^416^^^^^401^431^Node item = forNode.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node collection = iter.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node collection = node.getNext (  ) ;^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^417^^^^^402^432^Node collection = item.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( iter )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^422^423^^^^407^437^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( parent )  ) ;^423^^^^^408^438^computeFollowNode ( forNode )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( value, collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = getNextSiblingOfType ( item.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = handleSwitch ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .equals (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = getNextSiblingOfType ( root.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = getNextSiblingOfType ( node .getLastChild (  )  .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = getNextSiblingOfType ( n.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^431^432^^^^428^443^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node.getFirstChild (  ) .equals (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node.getFirstChild (  )  .getType (  )  , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ; }^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^node .getLastChild (  )  .getNext (  ) , Token.CASE, Token.EMPTY ) ;^432^^^^^428^443^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( next == null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getNext() != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next != true )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^433^^^^^428^443^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( node.getFirstChild (  ) .getNext (  )  )  != null )  {     createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^433^^^^^428^443^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^433^^^^^428^443^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getFirstChild (  ) .getNext (  )  == null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getFirstChild (  ) .getNext (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  ) .equals (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node .getLastChild (  )  .getNext (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( node.getFirstChild (  ) .getNext (  )  != this )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.UNCOND, node.getFirstChild().getNext());^436^437^438^439^440^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^436^437^438^439^440^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( deflt != null )  {     createEdge ( node, Branch.ON_FALSE, deflt ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }^436^^^^^428^443^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^436^^^^^428^443^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.UNCOND, next ) ; }else {     if  (  ( node.getFirstChild (  ) .getNext (  )  )  != null )  {         createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;     }else {         createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;     } }^436^^^^^428^443^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( root, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .equals (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  .getType (  )   ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( parent, Branch.UNCOND, node.getFirstChild (  ) .equals (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; }^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node .getLastChild (  )  .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  )  .getType (  )   != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( value.getFirstChild (  ) .getNext (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item.getFirstChild (  ) .getNext (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( next, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.UNCOND, computeFallThrough ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, item ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.UNCOND, node ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, value ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( item, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next.getFirstChild (  ) .getNext (  )  != null )  {^436^^^^^428^443^if  ( node.getFirstChild (  ) .getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( item, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.UNCOND, node.getFirstChild (  )  .getType (  )   ) ;^437^^^^^428^443^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( thenBlock, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( next, Branch.UNCOND, computeFollowNode ( node )  ) ;^439^^^^^428^443^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node.getFirstChild (  )  ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node.getFirstChild (  )  ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, node .getLastChild (  )   ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( n, node.getFirstChild (  )  ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( n, node .getLastChild (  )   ) ;^442^^^^^428^443^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .equals (  )  ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  )  .getType (  )   ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_TRUE, node .getLastChild (  )  .getNext (  )  ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^447^448^^^^445^465^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^node.getFirstChild (  ) .equals (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^node .getLastChild (  )  .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cur.getLastChild (  )  )  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^label = node.getFirstChild (  ) .getString (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;node.getFirstChild (  ) .getNext (  )  ) ;^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { node.getFirstChild (  ) .getNext (  )  ) ; }^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { node.getFirstChild (  ) .getNext (  )  ) ; }^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { node.getFirstChild (  ) .getNext (  )  ) ; }^448^^^^^445^465^node.getFirstChild (  ) .getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = getNextSiblingOfType ( iter.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = handleSwitch ( node.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = handleSwitch ( iter.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = getNextSiblingOfType ( item.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = getNextSiblingOfType ( node .getType (  )  , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = handleSwitch ( root.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = getNextSiblingOfType ( value.getNext (  ) , Token.CASE ) ;^450^^^^^445^465^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( next == null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter != null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( next.getType (  )  == CASE )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( deflt != null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next != this )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^451^^^^^445^465^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( deflt == null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter != null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( deflt != false )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.ON_FALSE, deflt);^458^459^460^461^462^445^465^if  ( deflt != null )  { createEdge ( node, Branch.ON_FALSE, deflt ) ; } else { createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^458^459^460^461^462^445^465^if  ( deflt != null )  { createEdge ( node, Branch.ON_FALSE, deflt ) ; } else { createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( node.getFirstChild (  ) .getNext (  )  )  != null )  {     createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^458^^^^^445^465^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^458^^^^^445^465^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, null ) ; }else {     finallyMap.put ( lastJump, null ) ; }^458^^^^^445^465^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^458^^^^^445^465^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^458^^^^^445^465^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, next ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( deflt, Branch.ON_FALSE, node ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( n, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = value.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = item.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node deflt = getNextSiblingOfType ( n.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node deflt = handleSwitch ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .equals (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node deflt = getNextSiblingOfType ( parent .getLastChild (  )  .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node deflt = getNextSiblingOfType ( root.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = thenBlock.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = parent.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^target = target.getParent (  ) ;Node parent = node.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node deflt = getNextSiblingOfType ( iter.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .equals (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^parent .getLastChild (  )  .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  ) , Token.CASE, Token.EMPTY ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, iter ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( n, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( next.getType (  )  != Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( n.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( value.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( iter.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, iter ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.ON_FALSE, node ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.ON_FALSE, item ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( deflt != this )  {^458^^^^^445^465^if  ( deflt != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( root, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, n ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = iter.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = n.getParent (  ) ;^455^^^^^445^465^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( next.getType (  )  == Token.null ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^452^453^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ; createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( item.getType (  )  == Token.CASE ) ;^452^^^^^445^465^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  )  .getType (  )  , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node deflt = getNextSiblingOfType ( n.getFirstChild (  )  .getType (  )  , Token.DEFAULT ) ;^456^457^^^^445^465^Node deflt = getNextSiblingOfType ( parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^parent.getFirstChild (  )  .getType (  )  , Token.DEFAULT ) ;^457^^^^^445^465^parent.getFirstChild (  ) .getNext (  ) , Token.DEFAULT ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.ON_FALSE, thenBlock ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( parent, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^461^^^^^445^465^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node.getFirstChild (  )  ) ;^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node.getFirstChild (  )  ) ;^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, node .getLastChild (  )   ) ;^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( value, node.getFirstChild (  )  ) ;^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( parent, node.getFirstChild (  )  ) ;^464^^^^^445^465^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node .getLastChild (  )   ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( parent, Branch.UNCOND, node.getFirstChild (  )  ) ;^469^^^^^467^470^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleDefault [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( thenBlock, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( item, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node .getFirstChild (  )   ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( next, Branch.UNCOND, node.getLastChild (  )  ) ;^474^^^^^472^476^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node.getFirstChild (  )  ) ;^475^^^^^472^476^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node.getFirstChild (  )  ) ;^475^^^^^472^476^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( next, node.getFirstChild (  )  ) ;^475^^^^^472^476^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^475^^^^^472^476^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( next, node.getFirstChild (  )  ) ;^475^^^^^472^476^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleWith [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = n.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = thenBlock.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = iter.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^target = target.getParent (  ) ;Node parent = node.getParent (  ) ;^479^^^^^464^494^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.BLOCK || parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.BLOCK && parent == null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  != node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.BLOCK && iter != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.this && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.BLOCK && node != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType (  )  == Token.BLOCK ) {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( (((node.getType() == BLOCK) && (parent != null)) && (parent.getType() == TRY) && getCatchBlock(parent) == node) )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( ((node.getType() == BLOCK) && (parent != null) && parent.getType() == TRY) )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( (node.getType() == BLOCK && parent != null) )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType (  )  == BLOCK )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( parent != null )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( parent.getType (  )  == TRY )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getCatchBlock ( parent )  == node )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.hasCatchHandler ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.getCatchBlock ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil .getCatchBlock ( next )   )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return ;^481^482^483^484^485^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^481^482^483^484^485^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node .getParent (  )   == Token.BLOCK && parent != null && parent^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( iter.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( item )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^482^483^484^^^467^497^parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^NodeUtil.getCatchBlock ( iter )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^483^484^^^^468^498^NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^NodeUtil.hasCatchHandler ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^483^484^^^^468^498^NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^NodeUtil .hasCatchHandler ( externs )   == node && !NodeUtil.hasCatchHandler ( node )  )  {^483^484^^^^468^498^NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^NodeUtil.getCatchBlock ( n )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^483^484^^^^468^498^NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^483^484^485^^^468^498^NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  { return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!NodeUtil.hasCatchHandler ( init )  )  {^484^^^^^469^499^!NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^!NodeUtil.getCatchBlock ( node )  )  {^484^^^^^469^499^!NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^!NodeUtil .getCatchBlock ( init )   )  {^484^^^^^469^499^!NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^484^485^^^^469^499^!NodeUtil.hasCatchHandler ( node )  )  { return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node child = item.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node child = node .getLastChild (  )  ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node child = next.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node child = init.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getLastChild (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^label = node.getFirstChild (  ) .getString (  ) ;Node child = node.getFirstChild (  ) ;^489^^^^^474^504^Node child = node.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( child != null || child.getType (  )  == Token.FUNCTION )  {^493^^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( child == null && child.getType (  )  == Token.FUNCTION )  {^493^^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( child != null && child.getType (  )  != Token.FUNCTION )  {^493^^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^while  ( item != null && child.getType (  )  == Token.FUNCTION )  {^493^^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^child = next.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^child =  null.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^child = item.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^child = iter.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;child = child.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^while  ( next != null && child.getType (  )  == Token.FUNCTION )  {^493^^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^493^494^^^^478^508^while  ( child != null && child.getType (  )  == Token.FUNCTION )  { child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^child = value.getNext (  ) ;^494^^^^^479^509^child = child.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( child == null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter != null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( child != true )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^497^^^^^482^512^if  ( child != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));^497^498^499^500^501^482^512^if  ( child != null )  { createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^497^498^499^500^501^482^512^if  ( child != null )  { createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; } else { createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, computeFallThrough ( node )  ) ;^500^^^^^497^501^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( next )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( child, Branch.UNCOND, computeFallThrough ( node )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFollowNode ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFallThrough ( thenBlock )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^498^^^^^483^513^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^498^^^^^483^513^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( item )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, computeFollowNode ( item )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^498^^^^^483^513^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( iter )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( n )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, computeFallThrough ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( iter, Branch.UNCOND, computeFollowNode ( node )  ) ;^500^^^^^485^515^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent == null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item != null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType() == BLOCK && node.isSyntheticBlock() )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType (  )  == BLOCK )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( next != null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( parent != this )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^504^^^^^489^519^if  ( parent != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.BLOCK || node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.BLOCK && node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType (  )  == Token.BLOCK ) {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node.getType (  )  == BLOCK )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( next != null )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node.getType (  )  == Token.BLOCK && node .hasChildren (  )   )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node next = node.getLastChild(); if (next != null) {    createEdge(node, Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(next));};^511^512^513^514^515^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  { Node next = node.getLastChild (  ) ; if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^511^512^513^514^515^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  { Node next = node.getLastChild (  ) ; if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( next == null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( thenBlock != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next != true )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( nextSibling != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(next));^513^514^515^^^498^528^if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^513^514^515^^^498^528^if  ( next != null )  { createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( deflt != null )  {     createEdge ( node, Branch.ON_FALSE, deflt ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }^513^^^^^498^528^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^513^^^^^498^528^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^513^^^^^498^528^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^513^^^^^498^528^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^513^^^^^498^528^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( parent )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.SYN_BLOCK, computeFallThrough ( node )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.SYN_BLOCK, computeFollowNode ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( iter )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^514^^^^^499^529^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( value )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^514^^^^^499^529^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = n.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node next = node .getFirstChild (  )  ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = init.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node thenBlock = node.getFirstChild (  ) .getNext (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node next = item.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return parent.getNext (  ) .getFirstChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getLastChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;Node next = node.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( item )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( n )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.SYN_BLOCK, computeFollowNode ( init )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( value != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init != true )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = value .getFirstChild (  )  ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( init.getType (  )  )  {^505^^^^^490^520^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( item.getType (  )  )  {^505^^^^^490^520^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = thenBlock.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( value, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( init )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.BLOCK && node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^511^^^^^496^526^if  ( node.getType (  )  == Token.BLOCK && node.isSyntheticBlock (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = iter.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( node, Branch.SYN_BLOCK, computeFallThrough ( n )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init != null )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next != this )  {^513^^^^^498^528^if  ( next != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = n .getFirstChild (  )  ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( root.getType (  )  )  {^505^^^^^490^520^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node next = next.getLastChild (  ) ;^512^^^^^497^527^Node next = node.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( root )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.SYN_BLOCK, computeFollowNode ( value )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.SYN_BLOCK, computeFollowNode ( n )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( node.getChildCount (  )  > 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( node.getChildCount (  )  >= 6 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( root.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( node .hasChildren (  )   >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( item .hasChildren (  )   >= 3 ) ;^524^^^^^522^529^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( init, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .equals (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  )  .getType (  )^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node .getLastChild (  )  .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^525^526^^^^522^529^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( iter.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node.getFirstChild (  ) .equals (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node.getFirstChild (  )  .getType (  )^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^526^527^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ; Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( item.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( next.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( node .getLastChild (  )  .getNext (  ) .getNext (  )  )  ) ;^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ; }^526^^^^^522^529^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( exceptionHandler.peek (  )  != node ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( exceptionHandler.peek (  )  == init ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( node.peek (  )  == exceptionHandler ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( exceptionHandler.pop (  )  == node ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( exceptionHandler.peek (  )  == item ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( exceptionHandler .push ( externs )   == node ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^exceptionHandler.peek (  ) ;^528^^^^^522^529^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^exceptionHandler .push ( deflt )  ;^528^^^^^522^529^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^exceptionHandler .push ( value )  ;^528^^^^^522^529^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^528^^^^^522^529^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^exceptionHandler.push ( n ) ;exceptionHandler.pop (  ) ;^528^^^^^522^529^exceptionHandler.pop (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( iter, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( root, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( parent, Branch.UNCOND, computeFollowNode ( node )  ) ;^532^^^^^531^534^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( n, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( item, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, node ) ;^533^^^^^531^534^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleExpr [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( init, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, node ) ;^537^^^^^536^538^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleThrow [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node .getLastChild (  )   ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, node.getFirstChild (  )  ) ;^541^^^^^540^542^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleTry [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, node .getFirstChild (  )   ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, node.getLastChild (  )  ) ;^545^^^^^544^546^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCatch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P1_Replace_Type]^char label = null;^549^^^^^534^564^String label = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.hasChildren (  )  )  {^551^^^^^536^566^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item.hasChildren (  )  )  {^551^^^^^536^566^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( forNode.getChildCount (  )  == 4 )  {^551^^^^^536^566^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^551^^^^^536^566^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^label = node.getFirstChild().getString();^551^552^553^^^536^566^if  ( node.hasChildren (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^551^552^553^^^536^566^if  ( node.hasChildren (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( cur.getChildCount (  )  )  == 4 )  {     iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^551^^^^^536^566^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ; }^551^^^^^536^566^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P1_Replace_Type]^label = node.getFirstChild (  ) .getchar (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^label = item.getFirstChild (  ) .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^label = node.getFirstChild (  ) .equals (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^label =  init.getFirstChild (  ) .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;label = node.getFirstChild (  ) .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { label = node.getFirstChild (  ) .getString (  ) ; }^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     label = node.getFirstChild (  ) .getString (  ) ; }^552^^^^^537^567^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^label = node .getLastChild (  )  .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^label = iter.getFirstChild (  ) .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^label =  null.getFirstChild (  ) .getString (  ) ;^552^^^^^537^567^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cur;Node cur;^554^^^^^539^569^Node cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = null;Node lastJump;^555^^^^^540^570^Node lastJump;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = cfgNode;Node lastJump;^555^^^^^540^570^Node lastJump;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = init.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = lastJump.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^target = target.getParent (  ) ;Node parent = node.getParent (  ) ;^556^^^^^541^571^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  <= Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == Token.TRY ) {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == TRY )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == node )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur .getParent (  )   == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil.isFunction ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= node )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( next == node )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == item )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == lastJump )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item == node )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(lastJump, Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));^570^571^572^573^574^555^585^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^570^571^572^573^574^555^585^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^570^^^^^555^585^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^574^^^^^570^575^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^574^^^^^570^575^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^574^^^^^570^575^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( thenBlock.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^574^^^^^570^575^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( iter.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cur, Branch.UNCOND, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( n.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^571^^^^^556^586^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^571^^^^^556^586^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^571^^^^^556^586^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^571^^^^^556^586^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( node.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( item.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^571^^^^^556^586^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cur .getFirstChild (  )   )  ) ;^572^^^^^557^587^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^572^^^^^557^587^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;cur.getLastChild (  )  )  ) ;^572^^^^^557^587^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;cur.getLastChild (  )  )  ) ;^572^^^^^557^587^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { cur.getLastChild (  )  )  ) ; }^572^^^^^557^587^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = iter;^576^^^^^561^591^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  item;^576^^^^^561^591^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = curHandler;lastJump = cur;^576^^^^^561^591^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = handler;lastJump = cur;^576^^^^^561^591^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( parent.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( next, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )   ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( item, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^574^^^^^559^589^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^574^^^^^559^589^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^574^^^^^559^589^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( lastJump .getFirstChild (  )   )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^574^^^^^559^589^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != node )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n == node )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == next )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == iter )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( parent, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( iter.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = next, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( item = node, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = node, next = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur =  lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = node = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = lastJump, node = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( thenBlock = node, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  != Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  >= Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == Token.TRY ) {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == TRY )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == node )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil.isFunction ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= node )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item == node )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == init )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == lastJump )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(lastJump, Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));^570^571^572^573^574^566^579^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^570^571^572^573^574^566^579^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^570^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^574^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^574^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^574^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( lastJump .getFirstChild (  )   )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^574^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( iter.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cur, Branch.UNCOND, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( item.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( child != null )  {     createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ; }else {     createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ; }^571^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^571^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^571^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^571^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( parent .getFirstChild (  )   )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^571^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cur .getFirstChild (  )   )  ) ;^572^^^^^566^579^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^572^^^^^566^579^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;cur.getLastChild (  )  )  ) ;^572^^^^^566^579^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;cur.getLastChild (  )  )  ) ;^572^^^^^566^579^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { cur.getLastChild (  )  )  ) ; }^572^^^^^566^579^cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = item;^576^^^^^566^579^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  n;^576^^^^^566^579^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = curHandler;lastJump = cur;^576^^^^^566^579^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = handler;lastJump = cur;^576^^^^^566^579^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( root, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( item.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( value, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != node )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter == node )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == parent )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == lastJump )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( item, computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( parent .getFirstChild (  )   )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( n, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  null;^576^^^^^566^579^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item.getType (  )  == Token.TRY && NodeUtil.isFunction ( cur )  )  {^569^^^^^566^579^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^569^^^^^566^579^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( node.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( n, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( n.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( priorityCounter )   ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( root.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( parent == null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( parent != null, "Cannot fin" ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( iter != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^566^579^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = item, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( cur =  n, lastJump^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = iter, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( cur =  parent, lastJump^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = item, parent = parent.getParent (  )  )  {^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cur =  n, n^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = next, parent = parent.getParent (  )  )  {^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cur =  item, item^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = lastJump;^576^^^^^561^591^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( iter, parent, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( cur, iter, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget (  parent, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( cur,  label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( cur, parent ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( parent, cur, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( cur, label, parent ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isBreakTarget ( label, parent, cur ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^!isContinueTarget ( cur, parent, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^!isBreakTarget ( cur, init, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^!isContinueTarget ( cur, parent, label ) ;!isBreakTarget ( cur, parent, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = lastJump, parent = parent.getParent (  )  )  {^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cur = init, parent = parent.getParent (  )  )  {^568^^^^^553^583^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil .hasCatchHandler ( elseBlock )   )  {^569^^^^^554^584^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^569^^^^^554^584^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( iter.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( node .getFirstChild (  )   )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( parent == null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( parent != null, "Cannot find break target.a" ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( value != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^578^^^^^563^593^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= node )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == node )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == n )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == value )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^580^^^^^565^595^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));^580^581^582^583^584^565^595^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; } else { finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^580^581^582^583^584^565^595^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; } else { finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( item, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFollowNode ( next )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFollowNode ( lastJump )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( item )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( item )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cur, Branch.UNCOND, computeFollowNode ( lastJump )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( lastJump )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( item )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFollowNode ( item )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFollowNode ( lastJump )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( next )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFollowNode ( iter )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P1_Replace_Type]^char label = null;^588^^^^^573^603^String label = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.hasChildren (  )  )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( node .getChildCount (  )   )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init .getChildCount (  )   )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( forNode.getChildCount (  )  == 4 )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^label = node.getFirstChild().getString();^589^590^591^^^574^604^if  ( node.hasChildren (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^589^590^591^^^574^604^if  ( node.hasChildren (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( cur.getChildCount (  )  )  == 4 )  {     iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^589^^^^^574^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ; }^589^^^^^574^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P1_Replace_Type]^label = node.getFirstChild (  ) .getchar (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^label = iter.getFirstChild (  ) .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^label = node.getFirstChild (  ) .equals (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;label = node.getFirstChild (  ) .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { label = node.getFirstChild (  ) .getString (  ) ; }^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { label = node.getFirstChild (  ) .getString (  ) ; }^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     label = node.getFirstChild (  ) .getString (  ) ; }^590^^^^^575^605^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^label = init.getFirstChild (  ) .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^label = node.getFirstChild (  )  .getFirstChild (  )  ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^label = node .getLastChild (  )  .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.hasChildren (  )  )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump.hasChildren (  )  )  {^589^^^^^574^604^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^label = n.getFirstChild (  ) .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^label = lastJump.getFirstChild (  ) .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^label = root .getLastChild (  )  .getString (  ) ;^590^^^^^575^605^label = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cur;Node cur;^592^^^^^577^607^Node cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = null;Node lastJump;^593^^^^^578^608^Node lastJump;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = cfgNode;Node lastJump;^593^^^^^578^608^Node lastJump;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = item.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = init.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^595^596^^^^580^610^Node parent = node.getParent (  ) ; for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^target = target.getParent (  ) ;Node parent = node.getParent (  ) ;^595^^^^^580^610^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  <= Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  != Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == Token.TRY ) {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == TRY )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == node )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur .getParent (  )   == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil.isFunction ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil .hasCatchHandler ( item )   )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( iter.getType (  )  == Token.TRY ) {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^if (lastJump == node) {    createEdge(lastJump, Branch.UNCOND, cur.getLastChild());}else {    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));}; lastJump = cur;^599^600^601^602^603^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^599^600^601^602^603^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != node )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( next == node )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == parent )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == lastJump )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item == node )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(lastJump, Branch.UNCOND, cur.getLastChild());^600^601^602^603^604^585^615^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^600^601^602^603^604^585^615^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^600^^^^^585^615^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^603^^^^^600^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^603^^^^^600^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^603^^^^^600^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^603^^^^^600^604^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, item.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cur, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, next.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, iter.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, cur .getFirstChild (  )   ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = item;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  parent;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = curHandler;lastJump = cur;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = handler;lastJump = cur;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, value.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, n.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( item, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )   ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( parent, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^603^^^^^588^618^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^603^^^^^588^618^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^603^^^^^588^618^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^603^^^^^588^618^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump < node )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter == node )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == iter )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == item )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( item, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )   ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( parent.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( iter.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( value .getFirstChild (  )   )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, root.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( n, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, thenBlock.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = parent, lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( lastJump = node, lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = node, item = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur =  lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = node = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( value = node, lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  == Token.TRY || NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  > Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getType (  )  != Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == Token.TRY ) {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( cur.getType (  )  == TRY )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == node )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil.isFunction ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil .hasCatchHandler ( deflt )   )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^if (lastJump == node) {    createEdge(lastJump, Branch.UNCOND, cur.getLastChild());}else {    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));}; lastJump = cur;^599^600^601^602^603^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^599^600^601^602^603^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  { if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump >= node )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( value == node )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == lastJump )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == lastJump )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init == node )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(lastJump, Branch.UNCOND, cur.getLastChild());^600^601^602^603^604^596^608^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^600^601^602^603^604^596^608^if  ( lastJump == node )  { createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  (  ( cur.getType (  )  )  ==  ( TRY )  )  &&  ( hasFinally ( cur )  )  )  {     if  ( lastJump == node )  {         createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;     }     lastJump = cur; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^600^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( cur .getFirstChild (  )   )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( item.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^603^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^603^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^603^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( iter.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^603^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, item.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cur, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( iter, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, iter.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, next.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = item;^605^^^^^596^608^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = curHandler;lastJump = cur;^605^^^^^596^608^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = handler;lastJump = cur;^605^^^^^596^608^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( lastJump, Branch.UNCOND, cur .getFirstChild (  )   ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )   ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( node.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= node )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item == node )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == parent )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == init )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( priorityCounter )   ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( value.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, item .getFirstChild (  )   ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  n;^605^^^^^596^608^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur .getParent (  )   == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n .getParent (  )   == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil .hasCatchHandler ( value )   )  {^599^^^^^596^608^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^599^^^^^596^608^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, node.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( thenBlock.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFollowNode ( iter.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( parent == null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( parent != null, "Cannot find continue target.Cannot f" ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( init != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( next != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^596^608^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = item, lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( cur =  item, lastJump^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( cur = lastJump, lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = item, parent = parent.getParent (  )  )  {^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cur =  root, root^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = init, parent = parent.getParent (  )  )  {^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cur = parent, parent = parent .getNext (  )   )  {^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cur =  init, init^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = iter;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  n;^605^^^^^590^620^lastJump = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( item, parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( cur, next, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget (  parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( cur,  label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( cur, parent ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( parent, cur, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^!isContinueTarget ( label, parent, cur ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^!isBreakTarget ( cur, parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^!isContinueTarget ( iter, parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^!isBreakTarget ( cur, parent, label ) ;!isContinueTarget ( cur, parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;!isContinueTarget ( cur, parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cur = lastJump, parent = parent.getParent (  )  )  {^598^^^^^583^613^cur = parent, parent = parent.getParent (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur.getType (  )  == Token.TRY && NodeUtil .hasCatchHandler ( body )   )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^599^^^^^584^614^if  ( cur.getType (  )  == Token.TRY && NodeUtil.hasFinally ( cur )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^599^^^^^584^614^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, iter .getFirstChild (  )   ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( item, computeFollowNode ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( next.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( parent == null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( parent != null, "Cannot find continue target.n" ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( lastJump != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( iter != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^607^^^^^592^622^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node iter = n;^609^^^^^594^624^Node iter = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node iter = thenBlock;^609^^^^^594^624^Node iter = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = null;Node iter = cur;^609^^^^^594^624^Node iter = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cur;Node iter = cur;^609^^^^^594^624^Node iter = cur;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( cur.getChildCount (  )  != 4 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^if  ( cur.getChildCount (  )  == priorityCounter )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( cur .hasChildren (  )   == 4 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( cur.getChildCount (  )  == 4 * 2 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( forNode.getChildCount (  )  == 4 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^iter = cur.getFirstChild().getNext().getNext();^610^611^612^^^595^625^if  ( cur.getChildCount (  )  == 4 )  { iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^610^611^612^^^595^625^if  ( cur.getChildCount (  )  == 4 )  { iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     label = node.getFirstChild (  ) .getString (  ) ; }^610^^^^^595^625^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^iter = value.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^iter = cur.getFirstChild (  ) .equals (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter =  item.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^label = node.getFirstChild (  ) .getString (  ) ;iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( cur.getChildCount (  )  )  == 4 )  {     iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^611^^^^^596^626^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^iter = cur.getFirstChild (  )  .getType (  )^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter = parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^iter = cur .getLastChild (  )  .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter = iter.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^iter = n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter = iter .getLastChild (  )  .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getChildCount (  )  == 4 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next.getChildCount (  )  == 4 )  {^610^^^^^595^625^if  ( cur.getChildCount (  )  == 4 )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^iter = thenBlock.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter = lastJump.getFirstChild (  ) .equals (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^iter = node.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^611^^^^^596^626^iter = cur.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != node )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n == node )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == lastJump )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == lastJump )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == item )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.UNCOND, iter);^614^615^616^617^618^599^629^if  ( lastJump == node )  { createEdge ( node, Branch.UNCOND, iter ) ; } else { finallyMap.put ( lastJump, iter ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^614^615^616^617^618^599^629^if  ( lastJump == node )  { createEdge ( node, Branch.UNCOND, iter ) ; } else { finallyMap.put ( lastJump, iter ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, init ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, lastJump ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, item ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, lastJump ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, node ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, item ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, lastJump ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( value, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cur;Node lastJump = null;^622^^^^^621^648^Node lastJump = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump;Node lastJump = null;^622^^^^^621^648^Node lastJump = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = cfgNode;Node lastJump = null;^622^^^^^621^648^Node lastJump = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( lastJump == null )  { Node lastJump = null; }^622^^^^^621^648^Node lastJump = null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( item )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( curHandler )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( deflt )   )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( curHandler )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( parent )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^break;^625^626^627^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  { break; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^625^626^627^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  { break; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^625^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^625^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^625^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( item )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( curHandler )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( elseBlock )   )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( parent )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter == null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == false )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.UNCOND, curHandler.getLastChild());^629^630^631^632^633^621^648^if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^629^630^631^632^633^621^648^if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( curHandler )  )  {     if  ( lastJump == null )  {         createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;     }else {         finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;     }     lastJump = curHandler; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( elseBlock == null )  {     createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ; }else {     createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^629^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( next, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( curHandler, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( n, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( item.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( iter.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cur.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( node.getNext (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, item.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( curHandler, Branch.UNCOND, node.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, root.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = lastJump;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  null;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = cur;lastJump = curHandler;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = handler;lastJump = curHandler;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, curHandler .getFirstChild (  )   ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, n.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( curHandler, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFollowNode ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( item, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( curHandler .getFirstChild (  )   )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( item.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( parent.getLastChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cur.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getFirstChild (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( node.getNext (  )  ) ;computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item == null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == true )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( item.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( curHandler .getFirstChild (  )   )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( value, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( next.getLastChild (  )  )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, iter.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( iter, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( Iterator<Node> iter = exceptionHandler.isEmpty (  ) ; iter.hasNext (  ) ; )  {^623^^^^^621^648^for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Iterator<Node> iter = null.iterator (  ) ; iter.hasNext (  ) ; )  {^623^^^^^621^648^for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( next )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == null )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( priorityCounter )   ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( node.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFallThrough ( curHandler .getFirstChild (  )   )  ) ;^633^^^^^629^634^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, value.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = item;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  node;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, next.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, item.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( root.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, computeFallThrough ( curHandler .getFirstChild (  )   )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( node, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( iter.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( node.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( next.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == this )  {^629^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( iter, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = iter;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  n;^635^^^^^621^648^lastJump = curHandler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node curHandler = iter .hasNext (  )  ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node curHandler = null.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node curHandler = iter.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node curHandler = iter.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node curHandler = iter.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node curHandler = iter.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node curHandler = iter.next (  ) ;^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^624^^^^^621^648^Node curHandler = iter.next (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( child )   )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^625^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( iter )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( root )   )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^628^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^628^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^628^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( value, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, computeFallThrough ( n.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( priorityCounter )   ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^623^624^625^626^627^621^648^for  ( Iterator<Node> iter = exceptionHandler.iterator (  ) ; iter.hasNext (  ) ; )  { Node curHandler = iter.next (  ) ; if  ( NodeUtil.isFunction ( curHandler )  )  { break; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isForIn ( item )  )  {^625^^^^^621^648^if  ( NodeUtil.isFunction ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( lastJump )  )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( externs )   )  {^628^^^^^621^648^if  ( NodeUtil.hasFinally ( curHandler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( node, Branch.UNCOND, n .getFirstChild (  )   ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^computeFallThrough ( value.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFallThrough ( root.getLastChild (  )  )  ) ;^633^^^^^621^648^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.hasChildren (  )  )  {^639^^^^^621^648^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n.hasChildren (  )  )  {^639^^^^^621^648^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( forNode.getChildCount (  )  == 4 )  {^639^^^^^621^648^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^639^^^^^621^648^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^connectToPossibleExceptionHandler(node, node.getFirstChild());^639^640^641^^^621^648^if  ( node.hasChildren (  )  )  { connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^639^640^641^^^621^648^if  ( node.hasChildren (  )  )  { connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     label = node.getFirstChild (  ) .getString (  ) ; }^639^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( iter, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, node .getLastChild (  )   ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( node.hasChildren (  )  )  {     connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ; }^640^^^^^621^648^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( next, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( init, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( iter.hasChildren (  )  )  {^639^^^^^621^648^if  ( node.hasChildren (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^computeFollowNode ( n, node.getFirstChild (  )  ) ;^640^^^^^621^648^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init == null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init == false )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( label == null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == cfgNode )  {^643^^^^^621^648^if  ( lastJump == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(node, Branch.UNCOND, null);^643^644^645^646^647^621^648^if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, null ) ; } else { finallyMap.put ( lastJump, null ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^643^644^645^646^647^621^648^if  ( lastJump == null )  { createEdge ( node, Branch.UNCOND, null ) ; } else { finallyMap.put ( lastJump, null ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( node, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( init, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( parent, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( thenBlock, Branch.UNCOND, null ) ;^644^^^^^621^648^createEdge ( node, Branch.UNCOND, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( node.getFirstChild (  ) .getNext (  ) .getNext (  )  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( init, Branch.UNCOND, computeFollowNode ( node )  ) ;^652^^^^^650^654^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^connectToPossibleExceptionHandler ( item, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^computeFollowNode ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( init, init ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, node.getFirstChild (  )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, cond ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( node, NodeUtil.getConditionExpression ( node )  ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( iter, iter ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^connectToPossibleExceptionHandler ( forNode, collection ) ;connectToPossibleExceptionHandler ( node, node ) ;^653^^^^^650^654^connectToPossibleExceptionHandler ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmt [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, node ) ;^657^^^^^656^658^return computeFollowNode ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( node, node ) ;^657^^^^^656^658^return computeFollowNode ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( item, node ) ;^657^^^^^656^658^return computeFollowNode ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^657^^^^^656^658^return computeFollowNode ( node, node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = fromNode.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = init .getNext (  )  ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node value = candidate.getValue (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node item = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node init = forNode.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node parent = next.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node parent = item .getNext (  )  ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^target = target.getParent (  ) ;Node parent = node.getParent (  ) ;^689^^^^^674^704^Node parent = node.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node != root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( fromNode == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || item == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == fromNode )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( node == null || parent.getType (  )  == Token.FUNCTION || parent == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || root == node )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( parent == null ) {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( (parent == null || parent.getType() == FUNCTION) )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FUNCTION )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent == null || parent .getParent (  )   == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( parent == this || parent.getType (  )  == Token.FUNCTION || init == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return null;^690^691^692^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  { return null; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^690^691^692^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  { return null; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return this;^691^^^^^676^706^return null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getNext (  )  == null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.getNext (  )  != null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getType() == CASE )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getType() == DEFAULT )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent.equals (  )  != null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent .getType (  )   != null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( parent .getType (  )   != this )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent.getFirstChild (  )  == node )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( lastJump, parent ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getNext (  ) .getType (  )  <= Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getNext (  ) .getType (  )  != Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item.getNext (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getType() == DEFAULT )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent.getNext (  ) .equals (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent .getType (  )  .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent.equals (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump.getNext (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( parent.getNext (  )  )  != null )  {     if  (  ( parent.getNext (  ) .getType (  )  )  ==  ( CASE )  )  {         return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;     }else         if  (  ( parent.getNext (  ) .getType (  )  )  ==  ( DEFAULT )  )  {             return parent.getNext (  ) .getFirstChild (  ) ;         }else {             checkState ( false, "Not reachable" ) ;         }      }else {     return computeFollowNode ( fromNode, parent ) ; }^704^^^^^689^719^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( parent.getNext (  ) .getType (  )  )  ==  ( DEFAULT )  )  {     return parent.getNext (  ) .getFirstChild (  ) ; }else {     checkState ( false, "Not reachable" ) ; }^704^^^^^689^719^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getNext (  ) .getType (  )  < Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( lastJump.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^} else {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( parent.getNext (  ) .equals (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( parent .getType (  )  .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^}  if  ( fromNode.getNext (  ) .equals (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return parent.getNext().getFirstChild();^706^707^708^709^710^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^706^707^708^709^710^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  { return parent.getNext (  ) .getFirstChild (  ) ; } else { Preconditions.checkState ( false, "Not reachable" ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( parent.getNext (  ) .getType (  )  )  ==  ( CASE )  )  {     return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ; }else     if  (  ( parent.getNext (  ) .getType (  )  )  ==  ( DEFAULT )  )  {         return parent.getNext (  ) .getFirstChild (  ) ;     }else {         checkState ( false, "Not reachable" ) ;     }^706^^^^^691^721^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( true, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Not reachablet " ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( priority ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return next.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getNext (  ) .equals (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return parent.getNext (  )  .getLastChild (  )  ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getNext (  )  != null )  { return parent.getNext (  ) .getFirstChild (  ) ; }^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return init.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent .getType (  )  .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return init .getType (  )  .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return fromNode.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( n.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return lastJump.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( true, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "rea" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( priority ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( false, "Not reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return fromNode.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.equals (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getNext (  ) .equals (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent .getType (  )  .getFirstChild (  )^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ; }^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  { return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ; }^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return init.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return lastJump.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return iter.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getNext (  ) .getType (  )  != Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( fromNode.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( parent.getNext (  )  .getParent (  )   == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Not reacha" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return item.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getNext (  )  .getLastChild (  )  .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.getNext (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( fromNode.getNext (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( iter .getType (  )  .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return nextSibling.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return init.equals (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return n.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return next.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return item.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "habot reachable" ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getNext (  ) .getType (  )  >= Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent.getNext (  )  .getParent (  )   == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( value.getNext (  ) .getType (  )  == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( fromNode.getNext (  )  .getParent (  )   == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( init.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return item.getNext (  ) .equals (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return thenBlock.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Not reachableNot " ) ;^709^^^^^694^724^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getNext (  ) .getType (  )  <= Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( nextSibling.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^}  if  ( iter.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Notot reachable" ) ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^709^^^^^706^710^Preconditions.checkState ( false, "Not reachable" ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return iter.getNext (  ) .getFirstChild (  ) ;^707^^^^^692^722^return parent.getNext (  ) .getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isForIn ( item )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( parent )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( init )   )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( nextSibling )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( curHandler )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( curHandler )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( parent )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return parent;^716^717^718^719^720^701^731^if  ( NodeUtil.isForIn ( parent )  )  { return parent; } else { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^716^717^718^719^720^701^731^if  ( NodeUtil.isForIn ( parent )  )  { return parent; } else { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return fromNode.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getFirstChild (  )  .getType (  )^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent .getLastChild (  )  .getNext (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return n .getLastChild (  )  .getNext (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return iter.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return lastJump.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^716^720^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return fromNode;^717^^^^^702^732^return parent;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  != node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  <= node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.getFirstChild (  )  == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == n )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getCatchBlock(parent) == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( parent.getLastChild() == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( parent.putFirstChild (  )  == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( parent.getFirstChild (  )  == init )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());}else {    return computeFollowNode(fromNode, parent);};^726^727^728^729^730^711^741^if  ( parent.getFirstChild (  )  == node )  { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^726^727^728^729^730^711^741^if  ( parent.getFirstChild (  )  == node )  { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( NodeUtil.getCatchBlock ( parent )  >= node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( init )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( parent )  == init ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( node )  == parent ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^} else if  ( parent.getLastChild() == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^} else {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( NodeUtil.hasCatchHandler ( parent )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( NodeUtil .hasCatchHandler ( externs )   == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( NodeUtil.putCatchBlock ( parent )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^}  if  ( NodeUtil.getCatchBlock ( n )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());}else {    return computeFollowNode(fromNode, parent);};^733^734^735^736^737^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^733^734^735^736^737^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) { if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getLastChild (  )  != node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( item.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( parent.getLastChild (  )  == n ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^} else {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( parent .getFirstChild (  )   == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( parent.putLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( parent.getLastChild (  )  == init ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^for (com.google.javascript.rhino.Node finallyNode : finallyMap.get(parent)) {    createEdge(fromNode, Branch.UNCOND, finallyNode);}; return computeFollowNode(fromNode, parent);^740^741^742^743^^725^755^} else if  ( parent.getLastChild (  )  == node ) { for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^740^741^742^743^^725^755^} else if  ( parent.getLastChild (  )  == node ) { for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( item, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, item ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node finallyNode : finallyMap.get ( n )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node finallyNode : parent.get ( finallyMap )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( Node finallyNode : finallyMap.put ( parent )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap.get ( init )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^741^742^743^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  { createEdge ( fromNode, Branch.UNCOND, finallyNode ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( lastJump, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, item ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( finallyNode, Branch.UNCOND, fromNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( root, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, lastJump ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( init.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( iter.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node finallyNode : finallyMap.get ( iter )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : 4.get ( parent )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, root ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( iter, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( value, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( lastJump, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( n )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( parent )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.hasFinally ( nextSibling )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( curHandler )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( curHandler )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());^734^735^736^737^738^719^749^if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^734^735^736^737^738^719^749^if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( node.getNext (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( parent )  )  {     return computeFallThrough ( parent.getLastChild (  )  ) ; }else {     return computeFollowNode ( fromNode, parent ) ; }^734^^^^^719^749^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( nextSibling != null )  {     return computeFallThrough ( nextSibling ) ; }else {     return computeFollowNode ( fromNode, parent ) ; }^734^^^^^719^749^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( nextSibling, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, iter ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( item, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( next.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( node.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFallThrough ( node .getType (  )   ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^735^^^^^720^750^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^735^^^^^720^750^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( n.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( fromNode.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( item.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( fromNode )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.hasFinally ( item )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^734^^^^^719^749^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^734^^^^^719^749^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^734^^^^^719^749^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( init.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( item.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( item, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( lastJump, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( init )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, lastJump ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, item ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( fromNode, nextSibling ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( init.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( root.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getLastChild (  )  <= node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( parent.getLastChild (  )  == item ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( fromNode, next ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node finallyNode : finallyMap.get ( next )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap.put ( item )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( node, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, thenBlock ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( n, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( fromNode, thenBlock ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( iter.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( root, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( fromNode, item ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( nextSibling )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( NodeUtil.hasCatchHandler ( lastJump )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^733^^^^^718^748^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^733^^^^^718^748^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^733^^^^^718^748^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( lastJump )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( curHandler )   )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.hasFinally ( node )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( next, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap.get ( fromNode )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, lastJump ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( fromNode, Branch.UNCOND, node ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, nextSibling ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( init )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( parent )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( lastJump )   )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.hasFinally ( n )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( curHandler )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( curHandler )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());^727^728^729^730^731^712^742^if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^727^728^729^730^731^712^742^if  ( NodeUtil.hasFinally ( parent )  )  { return computeFallThrough ( parent.getLastChild (  )  ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( nextSibling != null )  {     return computeFallThrough ( nextSibling ) ; }else {     return computeFollowNode ( fromNode, parent ) ; }^727^^^^^712^742^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( hasFinally ( parent )  )  {     return computeFallThrough ( node.getNext (  )  ) ; }else {     return computeFollowNode ( fromNode, parent ) ; }^727^^^^^712^742^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( item, parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, iter ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( fromNode.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( parent.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFallThrough ( parent .getFirstChild (  )   ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^728^^^^^713^743^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( init.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, item ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( item )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^727^^^^^712^742^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^727^^^^^712^742^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^727^^^^^712^742^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( item.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( lastJump, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( init, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( item )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( finallyNode )   )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( node, parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, item ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, n ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( iter.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( NodeUtil.getCatchBlock ( parent )  != node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( parent )  == iter ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^} else if  ( NodeUtil .hasCatchHandler ( cond )   == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( n.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( parent.getLastChild (  )  == next ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( fromNode, init ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, n ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( init, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, node ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( fromNode.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( next.getLastChild (  )  == node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node finallyNode : finallyMap.get ( item )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap.get ( nextSibling )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( fromNode, Branch.UNCOND, iter ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( next, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( n, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, n ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( nextSibling.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( fromNode, init ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( collection )   )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( n, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( item )  )  {^734^^^^^719^749^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( node, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, root ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( lastJump, parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( parent.getNext (  )  ) ;^735^^^^^720^750^return computeFallThrough ( node.getNext (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^} else if  ( parent.getLastChild (  )  >= node ) {^740^^^^^725^755^} else if  ( parent.getLastChild (  )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap .put ( 0 , priorityCounter )   )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( fromNode, Branch.UNCOND, item ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( item, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return value;^717^^^^^702^732^return parent;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return iter.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getFirstChild (  ) .equals (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent.getFirstChild (  )  .getType (  )^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return parent .getLastChild (  )  .getNext (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( parent.getFirstChild (  )  == node )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( node.getFirstChild (  ) .getNext (  )  != null )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  { return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ; }^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return fromNode;^723^^^^^708^738^return parent;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return item;^723^^^^^708^738^return parent;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( item, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, nextSibling ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( item, parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( lastJump, parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( fromNode.getType (  )  )  {^695^^^^^680^710^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^switch  ( parent .getParent (  )   )  {^695^^^^^680^710^switch  ( parent.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, iter ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( fromNode, item ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( value.getNext (  )  != null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n .getType (  )   != null )  {^703^^^^^688^718^if  ( parent.getNext (  )  != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( fromNode.getNext (  )  .getParent (  )   == Token.CASE )  {^704^^^^^689^719^if  ( parent.getNext (  ) .getType (  )  == Token.CASE )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return init .getType (  )  .getFirstChild (  )^705^^^^^690^720^return parent.getNext (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( root.getNext (  ) .getType (  )  == Token.DEFAULT )  {^706^^^^^691^721^} else if  ( parent.getNext (  ) .getType (  )  == Token.DEFAULT )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( lastJump, parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( init, parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isForIn ( fromNode )  )  {^716^^^^^701^731^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^716^^^^^701^731^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^716^^^^^701^731^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^716^^^^^701^731^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return fromNode.getFirstChild (  ) .equals (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return item.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return init.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^719^^^^^704^734^return parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump.getFirstChild (  )  == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item.getFirstChild (  )  == node )  {^726^^^^^711^741^if  ( parent.getFirstChild (  )  == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( fromNode )  )  {^727^^^^^712^742^if  ( NodeUtil.hasFinally ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( iter.getLastChild (  )  ) ;^728^^^^^713^743^return computeFallThrough ( parent.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( n, parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^} else if  ( NodeUtil.getCatchBlock ( lastJump )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^} else if  ( NodeUtil.getCatchBlock ( fromNode )  == node ) {^733^^^^^718^748^} else if  ( NodeUtil.getCatchBlock ( parent )  == node ) {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, item ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( fromNode, nextSibling ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node finallyNode : finallyMap.get ( value )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( parent, Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node nextSibling = lastJump.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node nextSibling = init .getType (  )  ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = node.getLastChild (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node next = getNextSiblingOfType ( node.getNext (  ) , Token.CASE ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node curHandler = iter.next (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node collection = item.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node nextSibling = value.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node nextSibling = init.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^node.getFirstChild (  ) .getNext (  )  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^nextSibling = nextSibling.getNext (  ) ;Node nextSibling = node.getNext (  ) ;^750^^^^^735^765^Node nextSibling = node.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( nextSibling != null || nextSibling.getType (  )  == Token.FUNCTION )  {^753^^^^^738^768^while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( nextSibling == null && nextSibling.getType (  )  == Token.FUNCTION )  {^753^^^^^738^768^while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( nextSibling != null && nextSibling.getType (  )  != Token.FUNCTION )  {^753^^^^^738^768^while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^nextSibling = init.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^nextSibling =  fromNode.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^child = child.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node nextSibling = node.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node elseBlock = thenBlock.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node cond = init.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = iter.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node body = collection.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node iter = cond.getNext (  ) ;nextSibling = nextSibling.getNext (  ) ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^while  ( fromNode != null && nextSibling.getType (  )  == Token.FUNCTION )  {^753^^^^^738^768^while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^753^754^^^^738^768^while  ( nextSibling != null && nextSibling.getType (  )  == Token.FUNCTION )  { nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^nextSibling = nextSibling .getType (  )  ;^754^^^^^739^769^nextSibling = nextSibling.getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( nextSibling == null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( fromNode != null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n != false )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^757^^^^^742^772^if  ( nextSibling != null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);^757^758^759^^761^742^772^if  ( nextSibling != null )  { return computeFallThrough ( nextSibling ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^757^758^759^^761^742^772^if  ( nextSibling != null )  { return computeFallThrough ( nextSibling ) ; } else { return computeFollowNode ( fromNode, parent ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, lastJump ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( n, parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( iter, parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, thenBlock ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFollowNode ( item, parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( n ) ;^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( nextSibling ) ;^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( next != null )  {     createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ; }^758^^^^^743^773^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^758^^^^^743^773^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( init ) ;^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( iter ) ;^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( n, parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode, init ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode (  parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( fromNode ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( parent, fromNode ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return process ( fromNode, parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( n, parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( item ) ;^758^^^^^743^773^return computeFallThrough ( nextSibling ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFollowNode ( init, parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return process ( fromNode, n ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isForIn ( init )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunction ( n )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( node.hasChildren (  )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( curHandler )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( handler )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( parent )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return n;^775^776^777^^^770^784^if  ( NodeUtil.isForIn ( n )  )  { return n; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^775^776^777^^^770^784^if  ( NodeUtil.isForIn ( n )  )  { return n; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^775^^^^^770^784^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^775^^^^^770^784^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^775^^^^^770^784^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return lastJump;^776^^^^^770^784^return n;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( item.getFirstChild (  )  ) ;^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( n.getFirstChild (  )  ) ;^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return init;^776^^^^^770^784^return n;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( init.getFirstChild (  )  ) ;^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( n.getFirstChild (  )  ) ;^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( fromNode.getLastChild (  )  ) ;^780^^^^^770^784^return computeFallThrough ( n.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFollowNode ( n.getLastChild (  )  ) ;^780^^^^^770^784^return computeFallThrough ( n.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return init;^782^^^^^770^784^return n;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return value;^782^^^^^770^784^return n;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( init.getType (  )  )  {^771^^^^^770^784^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( next.getType (  )  )  {^771^^^^^770^784^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^771^772^773^^^770^784^switch  ( n.getType (  )  )  { case Token.DO: return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( fromNode.getFirstChild (  )  ) ;^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( lastJump.getFirstChild (  )  ) ;^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFallThrough ( n .getLastChild (  )   ) ;^773^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isForIn ( fromNode )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( init )  )  {^775^^^^^770^784^if  ( NodeUtil.isForIn ( n )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^775^^^^^770^784^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( fromNode.getFirstChild (  )  ) ;^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFallThrough ( n .getLastChild (  )   ) ;^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^return computeFallThrough ( item.getFirstChild (  )  ) ;^778^^^^^770^784^return computeFallThrough ( n.getFirstChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^return computeFallThrough ( n .getFirstChild (  )   ) ;^780^^^^^770^784^return computeFallThrough ( n.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^780^^^^^770^784^return computeFallThrough ( n.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^return computeFallThrough ( init.getLastChild (  )  ) ;^780^^^^^770^784^return computeFallThrough ( n.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFallThrough [RETURN_TYPE] Node   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg.getDirectedSuccNodes ( fromNode ) ;^794^^^^^792^797^cfg.createNode ( fromNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^794^^^^^792^797^cfg.createNode ( fromNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( forNode )  ) ;cfg.createNode ( fromNode ) ;^794^^^^^792^797^cfg.createNode ( fromNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( toNode ) ;cfg.createNode ( fromNode ) ;^794^^^^^792^797^cfg.createNode ( fromNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.createNode ( iter ) ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg.getDirectedSuccNodes ( toNode ) ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^cfg .getEntry (  )  ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cfg.createNode ( init ) ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFollowNode ( forNode )  ) ;cfg.createNode ( toNode ) ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^cfg.createNode ( fromNode ) ;cfg.createNode ( toNode ) ;^795^^^^^792^797^cfg.createNode ( toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( next, branch, toNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( fromNode, branch, lastJump ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound (  branch, toNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( fromNode,  toNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( fromNode, branch ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( toNode, branch, fromNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^cfg.connectIfNotFound ( fromNode, toNode, branch ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^cfg.connectIfNotFound ( fromNode, branch, item ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( mayThrowException ( target )  || !exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( mayThrowException ( target )  ) {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  (  !exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( handler.getType (  )  == TRY )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == cfgNode )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( handleFunction ( target )  && !exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( mayThrowException ( target )  && !exceptionHandler.iterator (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node lastJump = cfgNode; for (com.google.javascript.rhino.Node handler : exceptionHandler) {    if (com.google.javascript.jscomp.NodeUtil.isFunction(handler)) {        return ;    }    com.google.common.base.Preconditions.checkState(((handler.getType()) == (com.google.javascript.rhino.Token.TRY)));    com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);    if (!(com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock))) {        if (lastJump == cfgNode) {            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());        }else {            finallyMap.put(lastJump, handler.getLastChild());        }    }else {        if (lastJump == cfgNode) {            createEdge(cfgNode, Branch.ON_EX, catchBlock);            return ;        }else {            finallyMap.put(lastJump, catchBlock);        }    }    lastJump = handler;};^805^806^807^808^809^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  { Node lastJump = cfgNode; for  ( Node handler : exceptionHandler )  { if  ( NodeUtil.isFunction ( handler )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^805^806^807^808^809^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  { Node lastJump = cfgNode; for  ( Node handler : exceptionHandler )  { if  ( NodeUtil.isFunction ( handler )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( item )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( handler )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isFunction ( curHandler )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( curHandler )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( n )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( NodeUtil.hasFinally ( parent )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^return ;^808^809^810^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^808^809^810^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  { return; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^808^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^808^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^808^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( !NodeUtil.hasCatchHandler ( next )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( lastJump == cfgNode )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( !NodeUtil.getCatchBlock ( catchBlock )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( !NodeUtil.hasCatchHandler ( init )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^if (lastJump == cfgNode) {    createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());}else {    finallyMap.put(lastJump, handler.getLastChild());};^814^815^816^817^818^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  { if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^814^815^816^817^818^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  { if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= cfgNode )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( parent == cfgNode )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == item )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( n == cfgNode )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(cfgNode, Branch.ON_EX, catchBlock); return ;^821^822^823^824^825^814^827^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^821^822^823^824^825^814^827^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^821^^^^^814^827^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( node, Branch.UNCOND, iter ) ; }else {     finallyMap.put ( lastJump, iter ) ; }^821^^^^^814^827^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^821^^^^^814^827^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, null ) ; }else {     finallyMap.put ( lastJump, null ) ; }^821^^^^^814^827^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, iter ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, item ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( catchBlock, Branch.ON_EX, cfgNode ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( cfgNode, Branch.ON_EX, parent ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, thenBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( root, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, item ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( priorityCounter )  ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item == cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == item )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( init == cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());^815^816^817^818^819^804^831^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^815^816^817^818^819^804^831^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; } else { finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;     return ; }else {     finallyMap.put ( lastJump, catchBlock ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( node, Branch.UNCOND, iter ) ; }else {     finallyMap.put ( lastJump, iter ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, null ) ; }else {     finallyMap.put ( lastJump, null ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ; }^815^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, init.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( handler, lastJump.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( target, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, nextSibling.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, item.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( next, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, iter.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( handler, Branch.ON_EX, cfgNode.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( item, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  ) .getNext (  )  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( node.getFirstChild (  )  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, node.getFirstChild (  ) .getNext (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, next.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( cfgNode, Branch.ON_EX, init.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( iter, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^createEdge ( cfgNode, Branch.ON_EX, handler .getFirstChild (  )   ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, init.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( handler, lastJump.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, handler .getFirstChild (  )   ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return computeFallThrough ( n.getLastChild (  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, catchBlock ) ;finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, iter.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, lastJump.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump >= cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == init )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( cfgNode == lastJump )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == next )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, iter.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap.put ( lastJump, handler .getFirstChild (  )   ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, init .getFirstChild (  )   ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, lastJump.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( cfgNode, Branch.ON_EX, nextSibling.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump >= cfgNode )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter == cfgNode )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( cfgNode == lastJump )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == item )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P15_Unwrap_Block]^createEdge(cfgNode, Branch.ON_EX, catchBlock); return ;^821^822^823^824^825^804^831^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P16_Remove_Block]^^821^822^823^824^825^804^831^if  ( lastJump == cfgNode )  { createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return; } else { finallyMap.put ( lastJump, catchBlock ) ; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ; }else {     finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ; }^821^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == node )  {     createEdge ( node, Branch.UNCOND, iter ) ; }else {     finallyMap.put ( lastJump, iter ) ; }^821^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == cfgNode )  {     createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ; }else {     finallyMap.put ( lastJump, handler.getLastChild (  )  ) ; }^821^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( lastJump == null )  {     createEdge ( node, Branch.UNCOND, null ) ; }else {     finallyMap.put ( lastJump, null ) ; }^821^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, init ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, item ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge (  Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( catchBlock, Branch.ON_EX, cfgNode ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^connectToPossibleExceptionHandler ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( cfgNode, Branch.ON_EX, iter ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, next ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, null ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_FALSE, computeFollowNode ( forNode )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, iter ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, computeFollowNode ( node )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getFirstChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( iter, Branch.UNCOND, forNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, node.getLastChild (  )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.UNCOND, next ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( init, Branch.UNCOND, forNode ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_FALSE, deflt ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = init;^828^^^^^804^831^lastJump = handler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^lastJump =  null;^828^^^^^804^831^lastJump = handler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = cur;lastJump = handler;^828^^^^^804^831^lastJump = handler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^lastJump = curHandler;lastJump = handler;^828^^^^^804^831^lastJump = handler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node lastJump = init;^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node lastJump = node;^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump;Node lastJump = cfgNode;^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node lastJump = null;Node lastJump = cfgNode;^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P12_Insert_Condition]^if  ( lastJump == cfgNode )  { Node lastJump = cfgNode; }^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node catchBlock = NodeUtil.getCatchBlock ( iter ) ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node catchBlock = NodeUtil.hasCatchHandler ( handler ) ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( init )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^808^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( handler.getType (  )  <= Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( init.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find break target." ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( next.getType (  )  == Token.CASE ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( node.getChildCount (  )  >= 3 ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent != null, "Cannot find continue target." ) ;Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions.checkState ( node.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^811^812^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ; Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node catchBlock = NodeUtil .hasCatchHandler ( init )  ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node catchBlock = NodeUtil.getCatchBlock ( init ) ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( !NodeUtil.hasCatchHandler ( value )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( !NodeUtil.getCatchBlock ( init )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^814^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^814^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^814^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, item.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, next.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( n, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, n ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( n, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, item ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put (  catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, init ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, iter ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^finallyMap.put ( lastJump, null ) ;finallyMap.put ( lastJump, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( lastJump )  )  {^808^^^^^804^831^if  ( NodeUtil.isFunction ( handler )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( !NodeUtil.hasCatchHandler ( nextSibling )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( !NodeUtil .getCatchBlock ( curHandler )   )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( !NodeUtil.hasCatchHandler ( iter )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump != cfgNode )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( item == cfgNode )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( lastJump == iter )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( lastJump == n )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( root, catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( nextSibling, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( item, Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, nextSibling ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( iter, handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, lastJump.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, n.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( cfgNode, Branch.ON_EX, item.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^createEdge ( cfgNode, Branch.ON_EX, item.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( nextSibling, handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( lastJump, lastJump .getFirstChild (  )   ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump < cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( node == cfgNode )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, n.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( lastJump <= cfgNode )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init == cfgNode )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item == cfgNode )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( init, catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, iter ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^connectToPossibleExceptionHandler ( cfgNode, Branch.ON_EX, item ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P14_Delete_Statement]^^822^823^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ; return;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^lastJump = item;^828^^^^^804^831^lastJump = handler;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Node lastJump = iter;^806^^^^^804^831^Node lastJump = cfgNode;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node catchBlock = NodeUtil .hasCatchHandler ( cfgNode )  ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^Node catchBlock = NodeUtil.getCatchBlock ( item ) ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( mayThrowException ( init )  && !exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( mayThrowException ( lastJump )  && !exceptionHandler.isEmpty (  )  )  {^805^^^^^804^831^if  ( mayThrowException ( target )  && !exceptionHandler.isEmpty (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^805^^^^^804^831^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^Preconditions.checkState ( handler.getType (  )  != Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^Preconditions.checkState ( handler.getType (  )  == Token.this ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( handler .getParent (  )   == Token.TRY ) ;^811^^^^^804^831^Preconditions.checkState ( handler.getType (  )  == Token.TRY ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^Node catchBlock = NodeUtil .hasCatchHandler ( elseBlock )  ;^812^^^^^804^831^Node catchBlock = NodeUtil.getCatchBlock ( handler ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( !NodeUtil.hasCatchHandler ( item )  )  {^814^^^^^804^831^if  ( !NodeUtil.hasCatchHandler ( catchBlock )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( lastJump, value.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^createEdge ( lastJump, Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P5_Replace_Variable]^finallyMap.put ( next, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P7_Replace_Invocation]^finallyMap .put ( astPositionCounter )  ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P8_Replace_Mix]^finallyMap.put ( handler, catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( c.getType (  )  >= type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( n.getType (  )  == type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( c.getType (  )  == priorityCounter )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( type.getType (  )  == c )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P15_Unwrap_Block]^return c;^839^840^841^^^836^845^if  ( c.getType (  )  == type )  { return c; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P16_Remove_Block]^^839^840^841^^^836^845^if  ( c.getType (  )  == type )  { return c; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( label == null )  {     return true; }^839^^^^^836^845^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return iter;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return handler;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^for  ( Node c = first; c == null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node item = first; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node first = c; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node target = first; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( c.getType (  )  <= type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( handler.getType (  )  == type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( c .getParent (  )   == type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return lastJump;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return nextSibling;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return init;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P1_Replace_Type]^for  (  long  type : types )  {^838^^^^^836^845^for  ( int type : types )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( iter.getType (  )  == type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node handler = first; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node c =  first; init !^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return next;^840^^^^^836^845^return c;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node c = init; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node c = iter; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P1_Replace_Type]^for  (  short  type : types )  {^838^^^^^836^845^for  ( int type : types )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node init = first; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^837^838^839^840^841^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  { for  ( int type : types )  { if  ( c.getType (  )  == type )  { return c; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.getType (  )  == type )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return false;^844^^^^^836^845^return null;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return isBreakStructure ( target, label != null )  || matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return isBreakStructure ( target, label == null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure (  label != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( target != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( target, label != null )  && matchLabel (  label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( parent, label != null )  && matchLabel ( target, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( target, parent != null )  && matchLabel ( label, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return isBreakTarget ( target, label != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return isBreakStructure ( target, label != null )  && isBreakStructure ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return isBreakStructure ( nextSibling, label != false )  && isBreakStructure ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( label, target != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return isBreakStructure ( item, label != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isBreakStructure ( target, label != null )  && matchLabel ( fromNode, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return isContinueStructure ( target )  || matchLabel ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( nextSibling )  && matchLabel ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( target )  && matchLabel ( fromNode, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( target )  && matchLabel (  label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( target )  && matchLabel ( parent ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( parent )  && matchLabel ( target, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( label )  && matchLabel ( parent, target ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return handleReturn ( target )  && matchLabel ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return isContinueStructure ( target )  && isBreakStructure ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( item )  && matchLabel ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return isContinueStructure ( thenBlock )  && matchLabel ( parent, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( target )  && matchLabel ( init, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return isContinueStructure ( target )  && matchLabel ( label, parent ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return isContinueStructure ( target )  && isBreakStructure ( lastJump, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^if  ( label != null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( label == false )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( elseBlock == null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( next != null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( parent != null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( deflt != null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( lastJump == node )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P9_Replace_Statement]^if  ( child != null )  {^869^^^^^868^879^if  ( label == null )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P15_Unwrap_Block]^return true;^869^870^871^^^868^879^if  ( label == null )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P16_Remove_Block]^^869^870^871^^^868^879^if  ( label == null )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  == type )  {     return c; }^869^^^^^868^879^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^870^^^^^868^879^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^while  ( target.getType (  )  >= Token.LABEL )  {^872^^^^^868^879^while  ( target.getType (  )  == Token.LABEL )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^while  ( init.getType (  )  == Token.LABEL )  {^872^^^^^868^879^while  ( target.getType (  )  == Token.LABEL )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^while  ( target.getType (  )  == Token.null )  {^872^^^^^868^879^while  ( target.getType (  )  == Token.LABEL )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( label.getFirstChild (  ) .getString (  ) .equals ( target )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( target.getFirstChild (  ) .equals (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( target.getFirstChild (  )  .getFirstChild (  )  .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( next.getFirstChild (  ) .equals (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P15_Unwrap_Block]^return true;^873^874^875^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P16_Remove_Block]^^873^874^875^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^874^^^^^868^879^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^target = init.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( fromNode.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( target.getFirstChild (  ) .getString (  )  .getValue (  )   )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( item.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {     return true; }^873^^^^^868^879^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( target .getLastChild (  )  .getString (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( handler.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^target = handler.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;target = target.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n == parent.getLastChild (  ) ;target = target.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^return n != parent.getFirstChild (  ) ;target = target.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( value.getFirstChild (  ) .equals (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^target = fromNode.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^target =  nextSibling.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^while  ( handler.getType (  )  == Token.LABEL )  {^872^^^^^868^879^while  ( target.getType (  )  == Token.LABEL )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^872^873^874^^^868^879^while  ( target.getType (  )  == Token.LABEL )  { if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  { return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( init.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^target = iter.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^target = item.getParent (  ) ;^876^^^^^868^879^target = target.getParent (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^878^^^^^868^879^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^894^^^^^884^904^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^896^^^^^884^904^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( fromNode.getType (  )  )  {^885^^^^^884^904^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^885^^^^^884^904^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^switch  ( handler.getType (  )  )  {^885^^^^^884^904^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( mayThrowException ( init )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^if  ( handleFunction ( c )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( handleFunction ( parent )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P15_Unwrap_Block]^return true;^899^900^901^^^884^904^if  ( mayThrowException ( c )  )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P16_Remove_Block]^^899^900^901^^^884^904^if  ( mayThrowException ( c )  )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( handler )  )  {     return ; }^899^^^^^884^904^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isFunction ( curHandler )  )  {     break; }^899^^^^^884^904^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( isForIn ( n )  )  {     return n; }^899^^^^^884^904^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^900^^^^^884^904^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node c = init.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node value = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( handleFunction ( init )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( mayThrowException ( iter )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^if  ( mayThrowException ( handler )  )  {^899^^^^^884^904^if  ( mayThrowException ( c )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P13_Insert_Block]^if  ( mayThrowException ( c )  )  {     return true; }^899^^^^^884^904^[Delete]^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; handler !^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node c = handler.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node c = fromNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node c = item.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^898^899^900^901^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( mayThrowException ( c )  )  { return true; }^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^for  ( Node item = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^for  ( Node lastJump = n.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^903^^^^^884^904^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^915^^^^^909^923^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakStructure [RETURN_TYPE] boolean   Node n boolean labeled [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return shouldTraverseFunctions;^919^^^^^909^923^return labeled;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakStructure [RETURN_TYPE] boolean   Node n boolean labeled [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^921^^^^^909^923^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakStructure [RETURN_TYPE] boolean   Node n boolean labeled [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( fromNode.getType (  )  )  {^910^^^^^909^923^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakStructure [RETURN_TYPE] boolean   Node n boolean labeled [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return false;^933^^^^^928^937^return true;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueStructure [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P3_Replace_Literal]^return true;^935^^^^^928^937^return false;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueStructure [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^switch  ( init.getType (  )  )  {^929^^^^^928^937^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueStructure [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^929^^^^^928^937^switch  ( n.getType (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueStructure [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^if  ( shouldTraverseFunctions )  {^966^^^^^964^983^if  ( isForward )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P6_Replace_Expression]^if  ( getPosition(n2) - getPosition(n1) )  {^966^^^^^964^983^if  ( isForward )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return false ;^975^^^^^964^983^return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n2 )   &&  getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return getOptionalNodeComparator ( n2 )  - getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return new Comparator;^967^^^^^964^983^return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n1 )   <=  getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( 0 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return getOptionalNodeComparator ( n1 )  - getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return getPosition ( 3 )  - getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n1 )    instanceof   getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^return new Comparator;^975^^^^^964^983^return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n2 )   >=  getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( null )  - getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n1 )   &  getPosition ( n2 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( null ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return getOptionalNodeComparator ( n1 )  - getPosition ( n2 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return getPosition ( n2 )   &&  getPosition ( n1 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^return getOptionalNodeComparator ( n2 )  - getPosition ( n1 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^Integer priority = n.get ( priorities ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^Integer priority = priorities.containsKey ( n ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P5_Replace_Variable]^Integer priority = priorities.get ( 0 ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^990^991^^^^989^993^Integer priority = priorities.get ( n ) ; Preconditions.checkNotNull ( priority ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P7_Replace_Invocation]^Preconditions.checkState ( priority ) ;^991^^^^^989^993^Preconditions.checkNotNull ( priority ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P8_Replace_Mix]^Preconditions .checkState (  )  ;^991^^^^^989^993^Preconditions.checkNotNull ( priority ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P14_Delete_Statement]^^991^992^^^^989^993^Preconditions.checkNotNull ( priority ) ; return priority;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Not reachable" ) ;Preconditions.checkNotNull ( priority ) ;^991^^^^^989^993^Preconditions.checkNotNull ( priority ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[P2_Replace_Operator]^return astPosition.get ( a.getValue (  )  )   >>  astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P5_Replace_Variable]^return bstPosition.get ( a.getValue (  )  )  - astPosition.get ( a.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P5_Replace_Variable]^return b.get ( a.getValue (  )  )  - astPosition.get ( astPosition.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P8_Replace_Mix]^return astPosition.get ( a.getValue (  )  )   |  astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P5_Replace_Variable]^return astPositionstPosition.get ( a.getValue (  )  )  - a.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P5_Replace_Variable]^return a.get ( astPosition.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P14_Delete_Statement]^^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P8_Replace_Mix]^private  Map<DiGraphNode<Node, Branch>, Integer> priorities;^944^^^^^939^949^private final Map<DiGraphNode<Node, Branch>, Integer> priorities;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[P14_Delete_Statement]^^954^955^^^^952^956^super ( entry ) ; this.priorities = priorities;^[CLASS] AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Map  priorities  Node  entry  boolean  
[P8_Replace_Mix]^this.priorities =  null;^955^^^^^952^956^this.priorities = priorities;^[CLASS] AstControlFlowGraph 1 2  [METHOD] <init> [RETURN_TYPE] Map)   Node entry Integer> priorities [VARIABLES] Map  priorities  Node  entry  boolean  
[P6_Replace_Expression]^if  ( getPosition(n2) - getPosition(n1) )  {^966^^^^^964^983^if  ( isForward )  {^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return new Comparator;^975^^^^^964^983^return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P2_Replace_Operator]^return getPosition ( n2 )    instanceof   getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P5_Replace_Variable]^return getPosition ( null )  - getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( null ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return false ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P14_Delete_Statement]^^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return new Comparator;^967^^^^^964^983^return new Comparator<DiGraphNode<Node, Branch>> (  )  {^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P2_Replace_Operator]^return getPosition ( n1 )   >=  getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return true ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P14_Delete_Statement]^^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return getPosition ( n1 )  - getPosition ( null ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P2_Replace_Operator]^return getPosition ( n1 )   <=  getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return getPosition ( n1 )   |  getPosition ( n2 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P2_Replace_Operator]^return getPosition ( n2 )   <<  getPosition ( n1 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P8_Replace_Mix]^return getPosition ( n2 )   ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[P2_Replace_Operator]^return getPosition ( n1 )   ^  getPosition ( n2 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P8_Replace_Mix]^return getPosition ( n1 )   ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P14_Delete_Statement]^^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P2_Replace_Operator]^return getPosition ( n2 )    instanceof   getPosition ( n1 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( 4 )  - getPosition ( n1 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P8_Replace_Mix]^return getPosition ( n2 )   ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P14_Delete_Statement]^^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^Integer priority = n.get ( priorities ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  DiGraphNode  n  boolean  Map  priorities  
[P14_Delete_Statement]^^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  DiGraphNode  n  boolean  Map  priorities  
[P14_Delete_Statement]^^991^^^^^989^993^Preconditions.checkNotNull ( priority ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  DiGraphNode  n  boolean  Map  priorities  
[P2_Replace_Operator]^return getPosition ( n1 )   ||  getPosition ( n2 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P8_Replace_Mix]^return getPosition ( n1 )   ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( null )  - getPosition ( n2 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P14_Delete_Statement]^^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P2_Replace_Operator]^return getPosition ( n2 )   |  getPosition ( n1 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P5_Replace_Variable]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P8_Replace_Mix]^return getPosition ( n2 )   !=  getPosition ( null ) ;;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[P14_Delete_Statement]^^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
