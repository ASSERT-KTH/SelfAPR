[P1_Replace_Type]^private static final  short  serialVersionUID = -1L;^55^^^^^50^60^private static final long serialVersionUID = -1L;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID  = null ;^55^^^^^50^60^private static final long serialVersionUID = -1L;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P7_Replace_Invocation]^private final Map<E, Node<E>> elmap = Maps.newHashMap (  ) ;^58^^^^^53^63^private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap (  ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^private final Map<E, Node<E>> elmap ;^58^^^^^53^63^private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap (  ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P5_Replace_Variable]^Node<E> nodeForValue = this.get ( value ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P5_Replace_Variable]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P7_Replace_Invocation]^Node<E> nodeForValue = elmap.containsKey ( value ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P7_Replace_Invocation]^Node<E> nodeForValue = elmap .keySet (  )  ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^Node<E> nodeForValue  = null ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^E element;^208^^^^^203^213^final E element;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P1_Replace_Type]^long  rank = 0;^211^^^^^206^216^int rank = 0;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P3_Replace_Literal]^int rank = -7;^211^^^^^206^216^int rank = 0;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^int rank = 0L;^211^^^^^206^216^int rank = 0;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P1_Replace_Type]^short  size = 1;^217^^^^^212^222^int size = 1;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P3_Replace_Literal]^int size = ;^217^^^^^212^222^int size = 1;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P8_Replace_Mix]^short  size = 0 ;^217^^^^^212^222^int size = 1;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[P7_Replace_Invocation]^for  ( E elem : other.find (  )  )  {^72^^^^^71^75^for  ( E elem : other.elements (  )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^72^73^74^^^71^75^for  ( E elem : other.elements (  )  )  { union ( elem, other.find ( elem )  ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^union ( element, other.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^union (  other.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^union ( elem.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^union ( other, elem.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^union ( elem, this.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^union ( elem, other .elements (  )   ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^union ( element, other .elements (  )   ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^this.parent  =  this.parent ;^220^^^^^219^222^this.parent = this;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeB.parent = nodeA;this.parent = this;^220^^^^^219^222^this.parent = this;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P11_Insert_Donor_Statement]^this.element = element;this.parent = this;^220^^^^^219^222^this.parent = this;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeA.parent = nodeB;this.parent = this;^220^^^^^219^222^this.parent = this;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P5_Replace_Variable]^this.element = elem;^221^^^^^219^222^this.element = element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P11_Insert_Donor_Statement]^this.parent = this;this.element = element;^221^^^^^219^222^this.element = element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P5_Replace_Variable]^union ( element, e ) ;^78^^^^^77^79^union ( e, e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] add [RETURN_TYPE] void   E e [VARIABLES] boolean  E  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P7_Replace_Invocation]^areEquivalent ( e, e ) ;^78^^^^^77^79^union ( e, e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] add [RETURN_TYPE] void   E e [VARIABLES] boolean  E  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P14_Delete_Statement]^^78^^^^^77^79^union ( e, e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] add [RETURN_TYPE] void   E e [VARIABLES] boolean  E  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[P5_Replace_Variable]^Node<E> nodeA = findRootOrCreateNode ( element ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^Node<E> nodeA = findAll ( a ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> nodeB = findRootOrCreateNode ( b ) ;Node<E> nodeA = findRootOrCreateNode ( a ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> nodeA = findRootOrCreateNode ( a ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;Node<E> nodeA = findRootOrCreateNode ( a ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^Node<E> nodeA = findRootOrCreateNode ( elem ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^Node<E> nodeB = findRootOrCreateNode ( element ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^Node<E> nodeB = findAll ( b ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> nodeB = findRootOrCreateNode ( b ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;Node<E> nodeB = findRootOrCreateNode ( b ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> nodeForB = elmap.get ( b ) ;Node<E> nodeB = findRootOrCreateNode ( b ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^Node<E> nodeA = findRootOrCreateNode ( a ) ;Node<E> nodeB = findRootOrCreateNode ( b ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P2_Replace_Operator]^if  ( nodeA != nodeB )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeB == nodeA )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( builder == null )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( node.parent != node )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( nodeForB == null )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( nodeA.rank == nodeB.rank )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( node != null )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P15_Unwrap_Block]^return nodeA.element;^85^86^87^^^81^99^if  ( nodeA == nodeB )  { return nodeA.element; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P16_Remove_Block]^^85^86^87^^^81^99^if  ( nodeA == nodeB )  { return nodeA.element; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P13_Insert_Block]^if  ( nodeForB == null )  {     return false; }^85^^^^^81^99^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P13_Insert_Block]^if  ( node != null )  {     return findRoot ( node ) ; }^85^^^^^81^99^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P13_Insert_Block]^if  (  ( node.parent )  != node )  {     node.parent = findRoot ( node.parent ) ; }^85^^^^^81^99^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return e;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeA.element.element;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeA;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return element;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return elem;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P2_Replace_Operator]^if  ( nodeA.rank >= nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( size > nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeA.rank > size )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeB.rank > nodeA.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( nodeA.rank == nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P15_Unwrap_Block]^nodeB.parent = nodeA; nodeA.size += nodeB.size; return nodeA.element;^88^89^90^91^92^81^99^if  ( nodeA.rank > nodeB.rank )  { nodeB.parent = nodeA; nodeA.size += nodeB.size; return nodeA.element; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P16_Remove_Block]^^88^89^90^91^92^81^99^if  ( nodeA.rank > nodeB.rank )  { nodeB.parent = nodeA; nodeA.size += nodeB.size; return nodeA.element; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^nodeB.parent =  nodeA;^89^^^^^81^99^nodeB.parent = nodeA;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeB.size += nodeA.size;nodeB.parent = nodeA;^89^^^^^81^99^nodeB.parent = nodeA;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^this.parent = this;nodeB.parent = nodeA;^89^^^^^81^99^nodeB.parent = nodeA;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeA.parent = nodeB;nodeB.parent = nodeA;^89^^^^^81^99^nodeB.parent = nodeA;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^nodeA.size += size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^nodeA.size += nodeB.size.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^nodeA.size +=  nodeB.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeB.size += nodeA.size;nodeA.size += nodeB.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeA.parent = nodeB;nodeA.size += nodeB.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeA.element.element;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeA;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return e;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P12_Insert_Condition]^if  ( node.parent != node )  { nodeB.parent = nodeA; }^89^^^^^81^99^nodeB.parent = nodeA;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^nodeA.size += nodeB;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return element;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return elem;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^nodeA.parent =  nodeB;^93^^^^^81^99^nodeA.parent = nodeB;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeB.parent = nodeA;nodeA.parent = nodeB;^93^^^^^81^99^nodeA.parent = nodeB;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^this.parent = this;nodeA.parent = nodeB;^93^^^^^81^99^nodeA.parent = nodeB;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeA.size += nodeB.size;nodeA.parent = nodeB;^93^^^^^81^99^nodeA.parent = nodeB;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P12_Insert_Condition]^if  ( node.parent != node )  { nodeA.parent = nodeB; }^93^^^^^81^99^nodeA.parent = nodeB;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P2_Replace_Operator]^if  ( nodeA.rank != nodeB.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeA.rank == null.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( size == nodeB.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeB.rank == nodeA.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^if  ( nodeA.rank == nodeB.rank.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( nodeA.rank > nodeB.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P9_Replace_Statement]^if  ( node.parent != node )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P15_Unwrap_Block]^(nodeB.rank)++;^94^95^96^^^81^99^if  ( nodeA.rank == nodeB.rank )  { nodeB.rank++; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P16_Remove_Block]^^94^95^96^^^81^99^if  ( nodeA.rank == nodeB.rank )  { nodeB.rank++; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^nodeB.size += size;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^nodeB.size += nodeA;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^nodeB.size +=  nodeA.size;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeB.parent = nodeA;nodeB.size += nodeA.size;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^nodeA.size += nodeB.size;nodeB.size += nodeA.size;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return element;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeB.element.element;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return nodeB;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P3_Replace_Literal]^checkArgument ( elmap.containsKey ( e ) , "", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^checkArgument ( elementlmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^checkArgument ( 3.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s" ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^checkArgument ( elmaplmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^checkArgument ( e.containsKey ( elmap ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^checkArgument ( elmap.get ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^102^103^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ; return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^checkArgument ( elmap .keySet (  )  , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return findRoot ( elemlmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return findRoot ( e.get ( elmap )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^return StandardUnionFind ( elmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^return findRoot ( elmap.containsKey ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return findRoot ( elemlmap .keySet (  )   ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return findRoot ( elmaplmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^return findRoot ( elementlmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^E elementRep = find ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^E aRep = findAll ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^E elementRep = findAll ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^E bRep = find ( b ) ;E aRep = find ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^E eRep = find ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^107^108^^^^106^110^E aRep = find ( a ) ; E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^E elementRep = find ( b ) ;^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^E bRep = findAll ( b ) ;^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P11_Insert_Donor_Statement]^E aRep = find ( a ) ;E bRep = find ( b ) ;^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P2_Replace_Operator]^return aRep > bRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return element == bRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return aRep == element;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P5_Replace_Variable]^return bRep == aRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P8_Replace_Mix]^returnelement  ||  bRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^return Collections.unmodifiableSet ( elmap.values (  )  ) ;^113^^^^^112^114^return Collections.unmodifiableSet ( elmap.keySet (  )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] elements [RETURN_TYPE] Set   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P14_Delete_Statement]^^113^114^^^^112^114^return Collections.unmodifiableSet ( elmap.keySet (  )  ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] elements [RETURN_TYPE] Set   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[P7_Replace_Invocation]^Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps .newLinkedHashMap (  )  ;^117^^^^^116^132^Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^117^^^^^116^132^Map<Node<E>, ImmutableSet.Builder<E>> groupsTmp = Maps.newHashMap (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P2_Replace_Operator]^if  ( builder != null )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^if  ( builder == true )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( nodeForB == null )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( node != null )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P15_Unwrap_Block]^builder = com.google.common.collect.ImmutableSet.builder(); groupsTmp.put(root, builder);^121^122^123^124^^116^132^if  ( builder == null )  { builder = ImmutableSet.builder (  ) ; groupsTmp.put ( root, builder ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P16_Remove_Block]^^121^122^123^124^^116^132^if  ( builder == null )  { builder = ImmutableSet.builder (  ) ; groupsTmp.put ( root, builder ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^builder  = null ;^122^^^^^116^132^builder = ImmutableSet.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^122^123^^^^116^132^builder = ImmutableSet.builder (  ) ; groupsTmp.put ( root, builder ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;builder = ImmutableSet.builder (  ) ;^122^^^^^116^132^builder = ImmutableSet.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^groupsTmp.put (  builder ) ;^123^^^^^116^132^groupsTmp.put ( root, builder ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^groupsTmp.put ( root ) ;^123^^^^^116^132^groupsTmp.put ( root, builder ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^123^^^^^116^132^groupsTmp.put ( root, builder ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^builder  =  builder ;^122^^^^^116^132^builder = ImmutableSet.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^Node<E> root = StandardUnionFind ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> nodeB = findRootOrCreateNode ( b ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> nodeA = findRootOrCreateNode ( a ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^for  ( Node<E> elem : elmap.keySet (  )  )  {^118^^^^^116^132^for  ( Node<E> elem : elmap.values (  )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^119^120^^^^116^132^Node<E> root = findRoot ( elem ) ; ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^nodeForValue = findRoot ( nodeForValue ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^node.parent = findRoot ( node.parent ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^return findRoot ( node ) ;Node<E> root = findRoot ( elem ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^120^^^^^116^132^ImmutableSet.Builder<E> builder = groupsTmp.get ( root ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^122^^^^^116^132^builder = ImmutableSet.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^builder .add ( b )  ;^125^^^^^116^132^builder.add ( elem.element ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^builder .add ( bRep )  ;^125^^^^^116^132^builder.add ( elem.element ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^125^^^^^116^132^builder.add ( elem.element ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^127^^^^^116^132^ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^builder = ImmutableSet.builder (  ) ;ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^127^^^^^116^132^ImmutableList.Builder<Set<E>> result = ImmutableList.builder (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^for  ( ImmutableSet.Builder<E> group : groupsTmp.get (  )  )  {^128^^^^^116^132^for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^128^129^130^^^116^132^for  ( ImmutableSet.Builder<E> group : groupsTmp.values (  )  )  { result.add ( group.build (  )  ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^129^^^^^116^132^result.add ( group.build (  )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^131^^^^^116^132^return result.build (  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^Node<E> node = elmaplmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^Node<E> node = e.get ( elmap ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P7_Replace_Invocation]^Node<E> node = elmap.containsKey ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P7_Replace_Invocation]^Node<E> node = elmap .keySet (  )  ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> nodeB = findRootOrCreateNode ( b ) ;Node<E> node = elmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;Node<E> node = elmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> nodeForB = elmap.get ( b ) ;Node<E> node = elmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> nodeA = findRootOrCreateNode ( a ) ;Node<E> node = elmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^Node<E> node = elementlmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P14_Delete_Statement]^^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> nodeForValue = elmap.get ( value ) ;Node<E> node = elmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P2_Replace_Operator]^if  ( node == null )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^if  ( node != false )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( builder == null )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( node.parent != node )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( nodeForB == null )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P15_Unwrap_Block]^return findRoot(node);^142^143^144^^^140^148^if  ( node != null )  { return findRoot ( node ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P16_Remove_Block]^^142^143^144^^^140^148^if  ( node != null )  { return findRoot ( node ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P13_Insert_Block]^if  ( nodeForB == null )  {     return false; }^142^^^^^140^148^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P13_Insert_Block]^if  ( nodeA == nodeB )  {     return nodeA.element; }^142^^^^^140^148^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P13_Insert_Block]^if  (  ( node.parent )  != node )  {     node.parent = findRoot ( node.parent ) ; }^142^^^^^140^148^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return StandardUnionFind ( node ) ;^143^^^^^140^148^return findRoot ( node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P14_Delete_Statement]^^143^^^^^140^148^return findRoot ( node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node = new Node<E> ( element ) ;^145^^^^^140^148^node = new Node<E> ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^node =  nelementw Nodelement<E> ( element ) ;^145^^^^^140^148^node = new Node<E> ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node = new Node<E> ( elem ) ;^145^^^^^140^148^node = new Node<E> ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^elmap.put ( e, 2 ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^elmap.put (  node ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^elmap.put ( e ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^elmap.put ( node, e ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^elmap.put ( bRep, node ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P14_Delete_Statement]^^146^147^^^^140^148^elmap.put ( e, node ) ; return node;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^return null;^147^^^^^140^148^return node;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P2_Replace_Operator]^if  ( node.parent <= node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^if  ( node.parent.parent != node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^if  ( node != node.parent )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^if  ( node.parent = node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( nodeForB == null )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( nodeA.rank == nodeB.rank )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P9_Replace_Statement]^if  ( node != null )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P15_Unwrap_Block]^node.parent = findRoot(node.parent);^158^159^160^^^157^162^if  ( node.parent != node )  { node.parent = findRoot ( node.parent ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P16_Remove_Block]^^158^159^160^^^157^162^if  ( node.parent != node )  { node.parent = findRoot ( node.parent ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P13_Insert_Block]^if  ( node != null )  {     return findRoot ( node ) ; }^158^^^^^157^162^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P13_Insert_Block]^if  ( nodeA == nodeB )  {     return nodeA.element; }^158^^^^^157^162^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node.parent = findRoot ( node.parent.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node.parent = findRoot ( node ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P7_Replace_Invocation]^node.parent = StandardUnionFind ( node.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P8_Replace_Mix]^node.parent =  findRoot ( null.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^nodeForValue = findRoot ( nodeForValue ) ;node.parent = findRoot ( node.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node.parent = findRoot ( 2 ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P14_Delete_Statement]^^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;node.parent = findRoot ( node.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P11_Insert_Donor_Statement]^return findRoot ( node ) ;node.parent = findRoot ( node.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^node.parent = findRoot ( 1 ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^return node.parent.parent;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P5_Replace_Variable]^return node;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[P2_Replace_Operator]^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: "  >  value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P3_Replace_Literal]^checkArgument ( elmap.containsKey ( value ) , " not ex" + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^checkArgument ( elmap.containsKey ( element ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^checkArgument ( value.containsKey ( elmap ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^checkArgument ( elmap.get ( value ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^checkArgument ( elmap .keySet (  )  , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal ( elem, b )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal ( value, o )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal (  b )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal ( value )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal ( b, value )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^if  ( Objects.equal ( element, b )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P15_Unwrap_Block]^return true;^173^174^175^^^158^188^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P16_Remove_Block]^^173^174^175^^^158^188^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P3_Replace_Literal]^return false;^174^^^^^159^189^return true;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P2_Replace_Operator]^if  ( nodeForB != null )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^if  ( nodeForB == true )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P9_Replace_Statement]^if  ( builder == null )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P9_Replace_Statement]^if  ( node.parent != node )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P9_Replace_Statement]^if  ( node != null )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P15_Unwrap_Block]^return false;^177^178^179^^^162^192^if  ( nodeForB == null )  { return false; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P16_Remove_Block]^^177^178^179^^^162^192^if  ( nodeForB == null )  { return false; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P13_Insert_Block]^if  ( node != null )  {     return findRoot ( node ) ; }^177^^^^^162^192^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P13_Insert_Block]^if  ( nodeA == nodeB )  {     return nodeA.element; }^177^^^^^162^192^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P3_Replace_Literal]^return true;^178^^^^^163^193^return false;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^nodeForValue  =  nodeForValue ;^180^^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^node.parent = findRoot ( node.parent ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P2_Replace_Operator]^return findRoot ( nodeForB )  != nodeForValue;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return findRoot ( nodeForB )  == null;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return StandardUnionFind ( nodeForB )  == nodeForValue;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^Node<E> nodeForB = elmap.get ( o ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^Node<E> nodeForB = elmap.containsKey ( b ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^Node<E> nodeForB = elmap.containsKey ( o ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> nodeB = findRootOrCreateNode ( b ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^Node<E> nodeForValue = elmap.get ( elem ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^Node<E> nodeForValue = elmap.containsKey ( value ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^Node<E> nodeForValue = elmap .keySet (  )  ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> nodeForValue = elmap.get ( value ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> nodeForB = elmap.get ( b ) ;Node<E> nodeForValue = elmap.get ( value ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P13_Insert_Block]^if  ( equal ( value, b )  )  {     return true; }^173^^^^^158^188^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> nodeForValue = elmap.get ( value ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^180^181^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ; return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P11_Insert_Donor_Statement]^return findRoot ( node ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return findRoot ( 0 )  == nodeForValue;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return isSameRoot.apply ( b ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return o.apply ( isSameRoot ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( null.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return unmodifiableIterator ( unmodifiableIterator ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return unmodifiableIterator ( filter ( elmap.values (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return unmodifiableIterator ( filter ( elmap .get ( b )  .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^return unmodifiableIterator ( filter ( elmap.keySet (  )  .iterator (  )  , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return findRoot ( elmap.get ( e )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return StandardUnionFind ( elmap.get ( value )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return findRoot ( elmap.containsKey ( value )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P7_Replace_Invocation]^return findRoot ( elmap .keySet (  )   ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return 3.apply ( o ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , null )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^192^193^194^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , 0 )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^return unmodifiableIterator ( filter ( 2.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( this.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^return findRoot ( elmap.get ( elem )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P14_Delete_Statement]^^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P8_Replace_Mix]^return findRoot ( elmap.get ( element )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[P5_Replace_Variable]^if  ( Objects.equal ( elem, b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^if  ( Objects.equal (  b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^if  ( Objects.equal ( value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^if  ( Objects.equal ( element, b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P15_Unwrap_Block]^return true;^173^174^175^^^172^182^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P16_Remove_Block]^^173^174^175^^^172^182^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P3_Replace_Literal]^return false;^174^^^^^172^182^return true;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P13_Insert_Block]^if  ( equal ( value, b )  )  {     return true; }^173^^^^^172^182^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^Node<E> nodeForB = elmap.containsKey ( b ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> nodeB = findRootOrCreateNode ( b ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> node = elmap.get ( e ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^Node<E> nodeForB = elmap .keySet (  )  ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> nodeForValue = elmap.get ( value ) ;Node<E> nodeForB = elmap.get ( b ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P2_Replace_Operator]^if  ( nodeForB != null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^if  ( nodeForB == false )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( builder == null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( nodeA == nodeB )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( node.parent != node )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P9_Replace_Statement]^if  ( node != null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P15_Unwrap_Block]^return false;^177^178^179^^^172^182^if  ( nodeForB == null )  { return false; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P16_Remove_Block]^^177^178^179^^^172^182^if  ( nodeForB == null )  { return false; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P13_Insert_Block]^if  ( node != null )  {     return findRoot ( node ) ; }^177^^^^^172^182^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P13_Insert_Block]^if  ( nodeA == nodeB )  {     return nodeA.element; }^177^^^^^172^182^[Delete]^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P3_Replace_Literal]^return true;^178^^^^^172^182^return false;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P8_Replace_Mix]^nodeForValue  = null ;^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^node.parent = findRoot ( node.parent ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^Node<E> root = findRoot ( elem ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P11_Insert_Donor_Statement]^return findRoot ( node ) ;nodeForValue = findRoot ( nodeForValue ) ;^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P2_Replace_Operator]^return findRoot ( nodeForB )  != nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^return findRoot ( 3 )  == nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^return StandardUnionFind ( nodeForB )  == nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P7_Replace_Invocation]^return isSameRoot .apply ( o )  ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P14_Delete_Statement]^^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return unmodifiableIterator ( unmodifiableIterator ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return unmodifiableIterator ( filter ( elmap.keySet (  )  .iterator (  )  , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return unmodifiableIterator ( filter ( elmap.values (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P14_Delete_Statement]^^192^193^194^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ; }^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , null )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P8_Replace_Mix]^return unmodifiableIterator ( unmodifiableIterator ( elmap.keySet (  ) .iterator (  ) , 0 )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^return findRoot ( elmap.get ( element )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return StandardUnionFind ( elmap.get ( value )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return findRoot ( elmap.containsKey ( value )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P7_Replace_Invocation]^return findRoot ( elmap .keySet (  )   ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P14_Delete_Statement]^^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P8_Replace_Mix]^return findRoot ( elmap.get ( e )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^Node<E> nodeForValue = elmap.get ( element ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P8_Replace_Mix]^Node<E> nodeForValue  = null ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[P5_Replace_Variable]^if  ( Objects.equal (  b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P5_Replace_Variable]^if  ( Objects.equal ( value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P5_Replace_Variable]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P8_Replace_Mix]^if  ( Objects.equal ( null, b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P15_Unwrap_Block]^return true;^173^174^175^^^172^182^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P16_Remove_Block]^^173^174^175^^^172^182^if  ( Objects.equal ( value, b )  )  { return true; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P3_Replace_Literal]^return false;^174^^^^^172^182^return true;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P13_Insert_Block]^if  ( equal ( value, b )  )  {     return true; }^173^^^^^172^182^[Delete]^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P5_Replace_Variable]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P14_Delete_Statement]^^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P2_Replace_Operator]^if  ( nodeForB != null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P8_Replace_Mix]^if  ( nodeForB == false )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P15_Unwrap_Block]^return false;^177^178^179^^^172^182^if  ( nodeForB == null )  { return false; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P16_Remove_Block]^^177^178^179^^^172^182^if  ( nodeForB == null )  { return false; }^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P3_Replace_Literal]^return true;^178^^^^^172^182^return false;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P8_Replace_Mix]^nodeForValue  =  nodeForValue ;^180^^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P14_Delete_Statement]^^180^181^^^^172^182^nodeForValue = findRoot ( nodeForValue ) ; return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P2_Replace_Operator]^return findRoot ( nodeForB )  <= nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P5_Replace_Variable]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P7_Replace_Invocation]^return findAll ( nodeForB )  == nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P14_Delete_Statement]^^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[P5_Replace_Variable]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[P8_Replace_Mix]^return null.apply ( o ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[P14_Delete_Statement]^^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P5_Replace_Variable]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P7_Replace_Invocation]^return unmodifiableIterator ( unmodifiableIterator ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P7_Replace_Invocation]^return unmodifiableIterator ( filter ( elmap.keySet (  )  .iterator (  )  , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P14_Delete_Statement]^^192^193^194^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ; }^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P8_Replace_Mix]^return unmodifiableIterator ( filter ( 0.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[P7_Replace_Invocation]^return findAll ( elmap.get ( value )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P7_Replace_Invocation]^return findRoot ( elmap .keySet (  )   ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P8_Replace_Mix]^return findAll ( elmap.get ( this )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P5_Replace_Variable]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P14_Delete_Statement]^^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P8_Replace_Mix]^E element;^208^^^^^203^213^final E element;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P1_Replace_Type]^long  rank = 0;^211^^^^^206^216^int rank = 0;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P3_Replace_Literal]^int rank = -3;^211^^^^^206^216^int rank = 0;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P8_Replace_Mix]^int rank ;^211^^^^^206^216^int rank = 0;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P1_Replace_Type]^short  size = 1;^217^^^^^212^222^int size = 1;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P3_Replace_Literal]^int size = -3;^217^^^^^212^222^int size = 1;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P8_Replace_Mix]^long  size = 0 ;^217^^^^^212^222^int size = 1;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[P8_Replace_Mix]^this.parent  =  this.parent ;^220^^^^^219^222^this.parent = this;^[CLASS] Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  element  int  rank  size  Node  parent  
[P11_Insert_Donor_Statement]^this.element = element;this.parent = this;^220^^^^^219^222^this.parent = this;^[CLASS] Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  element  int  rank  size  Node  parent  
[P8_Replace_Mix]^this.element =  null;^221^^^^^219^222^this.element = element;^[CLASS] Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  element  int  rank  size  Node  parent  
[P11_Insert_Donor_Statement]^this.parent = this;this.element = element;^221^^^^^219^222^this.element = element;^[CLASS] Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  element  int  rank  size  Node  parent  
