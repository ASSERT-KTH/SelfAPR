[P8_Replace_Mix]^private  DiGraph<N, E> graph;^37^^^^^32^42^private final DiGraph<N, E> graph;^[CLASS] GraphReachability 1   [VARIABLES] 
[P8_Replace_Mix]^this.graph =  null;^40^^^^^39^41^this.graph = graph;^[CLASS] GraphReachability 1  [METHOD] <init> [RETURN_TYPE] DiGraph)   DiGraph<N, E> graph [VARIABLES] Annotation  REACHABLE  DiGraph  graph  boolean  
[P7_Replace_Invocation]^graph .getNode ( entry )  ;^44^^^^^43^48^graph.clearNodeAnnotations (  ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P14_Delete_Statement]^^44^45^^^^43^48^graph.clearNodeAnnotations (  ) ; graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P5_Replace_Variable]^graph.getNode ( REACHABLE ) .setAnnotation ( entry ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P7_Replace_Invocation]^graph.getNode ( entry )  .getAnnotation (  )  ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P14_Delete_Statement]^^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P11_Insert_Donor_Statement]^newReachable.setAnnotation ( REACHABLE ) ;graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P11_Insert_Donor_Statement]^destNode.setAnnotation ( REACHABLE ) ;graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P12_Insert_Condition]^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  { graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ; }^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P7_Replace_Invocation]^graph .clearNodeAnnotations (  )  .setAnnotation ( REACHABLE ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint (  entry ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( entry, graph ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P7_Replace_Invocation]^FixedPointGraphTraversal.newTraversal ( this ) .setAnnotation ( graph, entry ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P14_Delete_Statement]^^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P11_Insert_Donor_Statement]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[P5_Replace_Variable]^GraphNode<N, E> newReachable = reachableNode.getNode ( graph ) ;^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P7_Replace_Invocation]^GraphNode<N, E> newReachable = graph .clearNodeAnnotations (  )  ;^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^GraphNode<N, E> destNode = graph.getNode ( destination ) ;GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P14_Delete_Statement]^^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P2_Replace_Operator]^Preconditions.checkState ( newReachable.getAnnotation (  )  == REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P5_Replace_Variable]^Preconditions.checkState ( 3.getAnnotation (  )  != REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P5_Replace_Variable]^Preconditions.checkState ( REACHABLE.getAnnotation (  )  != newReachable ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P7_Replace_Invocation]^Preconditions.checkState ( newReachable.setAnnotation (  )  != REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P7_Replace_Invocation]^Preconditions.checkState ( newReachable .setAnnotation ( REACHABLE )   != REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P14_Delete_Statement]^^52^53^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ; newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^newReachable.setAnnotation ( REACHABLE ) ;Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P12_Insert_Condition]^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  { Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ; }^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P12_Insert_Condition]^if  ( destNode.getAnnotation (  )  != REACHABLE )  { Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ; }^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P14_Delete_Statement]^^53^^^^^50^56^newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^destNode.setAnnotation ( REACHABLE ) ;newReachable.setAnnotation ( REACHABLE ) ;^53^^^^^50^56^newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;newReachable.setAnnotation ( REACHABLE ) ;^53^^^^^50^56^newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;newReachable.setAnnotation ( REACHABLE ) ;^53^^^^^50^56^newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P12_Insert_Condition]^if  ( destNode.getAnnotation (  )  != REACHABLE )  { newReachable.setAnnotation ( REACHABLE ) ; }^53^^^^^50^56^newReachable.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint (  reachableNode ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P5_Replace_Variable]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( reachableNode, graph ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P7_Replace_Invocation]^FixedPointGraphTraversal.newTraversal ( this ) .setAnnotation ( graph, reachableNode ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P7_Replace_Invocation]^FixedPointGraphTraversal.newTraversal ( this )  .setAnnotation ( REACHABLE )  ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P14_Delete_Statement]^^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P11_Insert_Donor_Statement]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[P2_Replace_Operator]^if  ( graph.getNode ( source ) .getAnnotation (  )  != REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P5_Replace_Variable]^if  ( graph.getNode ( destination ) .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P6_Replace_Expression]^if  ( destNode.getAnnotation() != REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P7_Replace_Invocation]^if  ( graph.getNode ( source ) .setAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P7_Replace_Invocation]^if  ( graph .clearNodeAnnotations (  )  .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P15_Unwrap_Block]^com.google.javascript.jscomp.graph.GraphNode<N, E> destNode = graph.getNode(destination); if ((destNode.getAnnotation()) != (com.google.javascript.jscomp.graph.GraphReachability.REACHABLE)) {    destNode.setAnnotation(com.google.javascript.jscomp.graph.GraphReachability.REACHABLE);    return true;};^60^61^62^63^64^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  { GraphNode<N, E> destNode = graph.getNode ( destination ) ; if  ( destNode.getAnnotation (  )  != REACHABLE )  { destNode.setAnnotation ( REACHABLE ) ; return true; }^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P16_Remove_Block]^^60^61^62^63^64^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  { GraphNode<N, E> destNode = graph.getNode ( destination ) ; if  ( destNode.getAnnotation (  )  != REACHABLE )  { destNode.setAnnotation ( REACHABLE ) ; return true; }^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P2_Replace_Operator]^if  ( destNode.getAnnotation (  )  < REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P5_Replace_Variable]^if  ( REACHABLE.getAnnotation (  )  != destNode )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P7_Replace_Invocation]^if  ( destNode.setAnnotation (  )  != REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P8_Replace_Mix]^if  ( destNode .setAnnotation ( REACHABLE )   != REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P9_Replace_Statement]^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P15_Unwrap_Block]^destNode.setAnnotation(com.google.javascript.jscomp.graph.GraphReachability.REACHABLE); return true;^62^63^64^65^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  { destNode.setAnnotation ( REACHABLE ) ; return true; }^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P16_Remove_Block]^^62^63^64^65^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  { destNode.setAnnotation ( REACHABLE ) ; return true; }^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P3_Replace_Literal]^return false;^64^^^^^59^68^return true;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P14_Delete_Statement]^^63^64^^^^59^68^destNode.setAnnotation ( REACHABLE ) ; return true;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P11_Insert_Donor_Statement]^newReachable.setAnnotation ( REACHABLE ) ;destNode.setAnnotation ( REACHABLE ) ;^63^^^^^59^68^destNode.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P11_Insert_Donor_Statement]^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;destNode.setAnnotation ( REACHABLE ) ;^63^^^^^59^68^destNode.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P12_Insert_Condition]^if  ( destNode.getAnnotation (  )  != REACHABLE )  { destNode.setAnnotation ( REACHABLE ) ; }^63^^^^^59^68^destNode.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P5_Replace_Variable]^GraphNode<N, E> destNode = graph.getNode ( source ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P5_Replace_Variable]^GraphNode<N, E> destNode = destination.getNode ( graph ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P11_Insert_Donor_Statement]^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;GraphNode<N, E> destNode = graph.getNode ( destination ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P14_Delete_Statement]^^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P8_Replace_Mix]^destNode .getAnnotation (  )  ;^63^^^^^59^68^destNode.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P2_Replace_Operator]^if  ( destNode.getAnnotation (  )  <= REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P14_Delete_Statement]^^63^^^^^59^68^destNode.setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P7_Replace_Invocation]^GraphNode<N, E> destNode = graph .clearNodeAnnotations (  )  ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P5_Replace_Variable]^if  ( source.getNode ( graph ) .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P8_Replace_Mix]^if  ( graph.getNode ( destination ) .setAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[P3_Replace_Literal]^return true;^67^^^^^59^68^return false;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
