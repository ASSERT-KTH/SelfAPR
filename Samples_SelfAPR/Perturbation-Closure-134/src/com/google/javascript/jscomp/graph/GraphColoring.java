[P8_Replace_Mix]^private N[] colorToNodeMap;^52^^^^^47^57^protected N[] colorToNodeMap;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P8_Replace_Mix]^private final AdjacencyGraph<N, E> graph;^53^^^^^48^58^protected final AdjacencyGraph<N, E> graph;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P1_Replace_Type]^short  value = 0;^90^^^^^85^95^int value = 0;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P3_Replace_Literal]^int value = -8;^90^^^^^85^95^int value = 0;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P8_Replace_Mix]^short  value = 2;^90^^^^^85^95^int value = 0;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P8_Replace_Mix]^private  Comparator<N> tieBreaker;^116^^^^^111^121^private final Comparator<N> tieBreaker;^[CLASS] GraphColoring Color GreedyGraphColoring 1   [VARIABLES] 
[P8_Replace_Mix]^this.graph =  null;^56^^^^^55^57^this.graph = graph;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] AdjacencyGraph)   AdjacencyGraph<N, E> graph [VARIABLES] N[]  colorToNodeMap  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P8_Replace_Mix]^this.value =  null;^93^^^^^92^94^this.value = value;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] GraphColoring$Color(int)   int value [VARIABLES] N[]  colorToNodeMap  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^118^^^^^117^119^this ( graph, null ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] AdjacencyGraph)   AdjacencyGraph<N, E> graph [VARIABLES] N[]  colorToNodeMap  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^127^^^^^125^129^super ( graph ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] Comparator)   AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [VARIABLES] N[]  colorToNodeMap  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P8_Replace_Mix]^this.tieBreaker =  null;^128^^^^^125^129^this.tieBreaker = tieBreaker;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] Comparator)   AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [VARIABLES] N[]  colorToNodeMap  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^73^74^^^^72^83^Preconditions.checkNotNull ( colorToNodeMap, "No coloring founded. color (  )  should be called first." ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^Color color = graph.getNode ( headNode ) .getAnnotation (  ) ;^75^^^^^72^83^Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^Color color = 1.getNode ( node ) .getAnnotation (  ) ;^75^^^^^72^83^Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^Color color = node.getNode ( graph ) .getAnnotation (  ) ;^75^^^^^72^83^Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P7_Replace_Invocation]^Color color = graph .getNodes (  )  .getAnnotation (  ) ;^75^^^^^72^83^Color color = graph.getNode ( node ) .getAnnotation (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P14_Delete_Statement]^^75^76^^^^72^83^Color color = graph.getNode ( node ) .getAnnotation (  ) ; N headNode = colorToNodeMap[color.value];^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^N headNode = color[color.value];^76^^^^^72^83^N headNode = colorToNodeMap[color.value];^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P2_Replace_Operator]^if  ( headNode != null )  {^77^^^^^72^83^if  ( headNode == null )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^if  ( node == null )  {^77^^^^^72^83^if  ( headNode == null )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P8_Replace_Mix]^if  ( headNode == true )  {^77^^^^^72^83^if  ( headNode == null )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P15_Unwrap_Block]^colorToNodeMap[color.value] = node; return node;^77^78^79^80^81^72^83^if  ( headNode == null )  { colorToNodeMap[color.value] = node; return node; } else { return headNode; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P16_Remove_Block]^^77^78^79^80^81^72^83^if  ( headNode == null )  { colorToNodeMap[color.value] = node; return node; } else { return headNode; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^return node;^81^^^^^72^83^return headNode;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P5_Replace_Variable]^colorToNodeMap[color.value] = headNode;^78^^^^^72^83^colorToNodeMap[color.value] = node;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P8_Replace_Mix]^colorToNodeMap[color.value] ;^78^^^^^72^83^colorToNodeMap[color.value] = node;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^colorToNodeMap = map;colorToNodeMap[color.value] = node;^78^^^^^72^83^colorToNodeMap[color.value] = node;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P8_Replace_Mix]^return headNode;^79^^^^^72^83^return node;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] getPartitionSuperNode [RETURN_TYPE] N   N node [VARIABLES] N[]  colorToNodeMap  boolean  Color  color  AdjacencyGraph  graph  int  value  N  headNode  node  Comparator  tieBreaker  
[P2_Replace_Operator]^if  ( ! ( other  !=  Color )  )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P6_Replace_Expression]^if  ( value == Color (other)).value )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P8_Replace_Mix]^if  (  ( other instanceof Color )  )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P15_Unwrap_Block]^return false;^98^99^100^101^102^97^103^if  ( ! ( other instanceof Color )  )  { return false; } else { return value ==  (  ( Color )  other ) .value; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P16_Remove_Block]^^98^99^100^101^102^97^103^if  ( ! ( other instanceof Color )  )  { return false; } else { return value ==  (  ( Color )  other ) .value; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return value !=  (  ( Color )  other ) .value;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P8_Replace_Mix]^return value  ||   (  ( Color )  other ) .value;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P3_Replace_Literal]^return true;^99^^^^^97^103^return false;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P8_Replace_Mix]^return true ;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] N[]  colorToNodeMap  Object  other  AdjacencyGraph  graph  boolean  int  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^graph.getNodes (  ) ;^133^^^^^118^148^graph.clearNodeAnnotations (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^133^134^^^^118^148^graph.clearNodeAnnotations (  ) ; List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^List<GraphNode<N, E>> worklist = graph.getWeight (  ) ;^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = i.next (  ) ;List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 || tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result != 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 && tieBreaker == null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P3_Replace_Literal]^return result == 9 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return value == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return tieBreaker == 0 && result != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && o1 != null ? tieBreaker.compare ( tieBreaker.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P6_Replace_Expression]^return result ( result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1 .setAnnotation ( color )  , o2^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P1_Replace_Type]^short  result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^int result = graph.getWeight ( o2.getValue (  )  )  ^  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( o1.getValue (  )  ) - graph.getWeight ( o2.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o1.getWeight ( o2.getValue (  )  ) - graph.getWeight ( graph.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getNode ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getWeight ( o2.setAnnotation (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^int result = graph.getWeight ( null.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P4_Replace_Constructor]^Collections.sort (  new Comparator<GraphNode<N, E>> (  )  {^137^^^^^122^152^Collections.sort ( worklist, new Comparator<GraphNode<N, E>> (  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o2.getWeight ( graph.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( 3.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^- o1.getWeight ( graph.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getNode ( o1.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getWeight ( o1.setAnnotation (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^- graph.getWeight ( 0.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^subgraph.addNode ( node.getValue (  )  ) ;- graph.getWeight ( o1.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { - graph.getWeight ( o1.getValue (  )  ) ; }^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^- graph.getWeight ( 2.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^tieBreaker.compare ( 2.getValue (  ) , o2.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^tieBreaker.compare ( o1 .setAnnotation ( color )  , o2^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) , 1.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^worklist = Lists.newLinkedList ( 2 ) ;^146^^^^^131^161^worklist = Lists.newLinkedList ( worklist ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^worklist =  Lists.newLinkedList ( null ) ;^146^^^^^131^161^worklist = Lists.newLinkedList ( worklist ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^146^^^^^131^161^worklist = Lists.newLinkedList ( worklist ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P1_Replace_Type]^short  count = 0;^150^^^^^135^165^int count = 0;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P3_Replace_Literal]^int count = 9;^150^^^^^135^165^int count = 0;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^if  ( node.isIndependentOf ( subgraph.getValue (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^if  ( subgraph.isIndependentOf ( node.setAnnotation (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^if  ( subgraph.isIndependentOf ( node .setAnnotation ( color )   )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P15_Unwrap_Block]^subgraph.addNode(node.getValue()); node.setAnnotation(color); i.remove();^156^157^158^159^160^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ; i.remove (  ) ; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P16_Remove_Block]^^156^157^158^159^160^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ; i.remove (  ) ; }^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^subgraph .isIndependentOf (  )  ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^subgraph.addNode ( node.setAnnotation (  )  ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^subgraph.addNode ( node .setAnnotation ( color )   ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^157^158^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^- graph.getWeight ( o1.getValue (  )  ) ;subgraph.addNode ( node.getValue (  )  ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^subgraph.addNode ( null.getValue (  )  ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^node .getValue (  )  ;^158^^^^^143^173^node.setAnnotation ( color ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^158^159^^^^143^173^node.setAnnotation ( color ) ; i.remove (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^i .next (  )  ;^159^^^^^144^174^i.remove (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^159^^^^^144^174^i.remove (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^for  ( Iterator<GraphNode<N, E>> i = worklist .isEmpty (  )  ; i.hasNext (  ) ; )  {^154^^^^^139^169^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^GraphNode<N, E> node = i .hasNext (  )  ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;GraphNode<N, E> node = i.next (  ) ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; }^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^158^^^^^143^173^node.setAnnotation ( color ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^Color color = new Color ( value ) ;^152^^^^^137^167^Color color = new Color ( count ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^SubGraph<N, E> subgraph = 2.newSubGraph (  ) ;^153^^^^^138^168^SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^SubGraph<N, E> subgraph = graph.getWeight (  ) ;^153^^^^^138^168^SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^} while  ( !worklist .iterator (  )   ) ;^163^^^^^148^178^} while  ( !worklist.isEmpty (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^163^^^^^148^178^} while  ( !worklist.isEmpty (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^153^^^^^138^168^SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i .next (  )  ; )  {^154^^^^^139^169^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^if  ( subgraph.isIndependentOf ( null.getValue (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^colorToNodeMap = colorToNodeMap;^166^^^^^151^181^colorToNodeMap = map;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^colorToNodeMap =  null;^166^^^^^151^181^colorToNodeMap = map;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^colorToNodeMap[color.value] = node;colorToNodeMap = map;^166^^^^^151^181^colorToNodeMap = map;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return value;^167^^^^^152^182^return count;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  colorToNodeMap  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  AdjacencyGraph  graph  SubGraph  subgraph  int  count  result  value  Comparator  tieBreaker  
[P1_Replace_Type]^short  result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^int result = graph.getWeight ( o2.getValue (  )  )  >>  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( null.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o2.getWeight ( graph.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( o1.getValue (  )  ) - graph.getWeight ( o2.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o1.getWeight ( o2.getValue (  )  ) - graph.getWeight ( graph.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getNode ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getWeight ( o2.setAnnotation (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph .getNode ( this )  - graph^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^int result = graph.getWeight ( 1.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^- o1.getWeight ( graph.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getNode ( o1.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getWeight ( o1.setAnnotation (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^subgraph.addNode ( node.getValue (  )  ) ;- graph.getWeight ( o1.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { - graph.getWeight ( o1.getValue (  )  ) ; }^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 || tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result != 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 && tieBreaker == null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P3_Replace_Literal]^return result == 7 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return value == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return tieBreaker == 0 && result != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P6_Replace_Expression]^return result ( result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( 0.getValue (  ) , o2.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P7_Replace_Invocation]^tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^tieBreaker.compare ( null.getValue (  ) , o2.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P14_Delete_Statement]^^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^tieBreaker.compare ( o1.getValue (  ) , 0.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GraphColoring Color GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P1_Replace_Type]^short  value = 0;^90^^^^^85^95^int value = 0;^[CLASS] Color  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P3_Replace_Literal]^int value = -9;^90^^^^^85^95^int value = 0;^[CLASS] Color  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^int value = 4;^90^^^^^85^95^int value = 0;^[CLASS] Color  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] N[]  colorToNodeMap  map  GraphNode  o1  o2  AdjacencyGraph  graph  boolean  int  count  result  value  Comparator  tieBreaker  
[P8_Replace_Mix]^this.value =  null;^93^^^^^92^94^this.value = value;^[CLASS] Color  [METHOD] <init> [RETURN_TYPE] GraphColoring$Color(int)   int value [VARIABLES] int  value  boolean  
[P2_Replace_Operator]^if  ( ! ( other  ||  Color )  )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P6_Replace_Expression]^if  ( value == Color (other)).value )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P8_Replace_Mix]^if  (  ( other instanceof Color )  )  {^98^^^^^97^103^if  ( ! ( other instanceof Color )  )  {^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P15_Unwrap_Block]^return false;^98^99^100^101^102^97^103^if  ( ! ( other instanceof Color )  )  { return false; } else { return value ==  (  ( Color )  other ) .value; }^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P16_Remove_Block]^^98^99^100^101^102^97^103^if  ( ! ( other instanceof Color )  )  { return false; } else { return value ==  (  ( Color )  other ) .value; }^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P2_Replace_Operator]^return value <  (  ( Color )  other ) .value;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P8_Replace_Mix]^return false ;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P3_Replace_Literal]^return true;^99^^^^^97^103^return false;^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P2_Replace_Operator]^return value <=  (  ( Color )  other ) .value;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P8_Replace_Mix]^return value  &&   (  ( Color )  other ) .value;^101^^^^^97^103^return value ==  (  ( Color )  other ) .value;^[CLASS] Color  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] int  value  Object  other  boolean  
[P14_Delete_Statement]^^118^^^^^117^119^this ( graph, null ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] AdjacencyGraph)   AdjacencyGraph<N, E> graph [VARIABLES] Comparator  tieBreaker  AdjacencyGraph  graph  boolean  
[P14_Delete_Statement]^^127^^^^^125^129^super ( graph ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] Comparator)   AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [VARIABLES] Comparator  tieBreaker  AdjacencyGraph  graph  boolean  
[P8_Replace_Mix]^this.tieBreaker =  null;^128^^^^^125^129^this.tieBreaker = tieBreaker;^[CLASS] GreedyGraphColoring 1  [METHOD] <init> [RETURN_TYPE] Comparator)   AdjacencyGraph<N, E> graph Comparator<N> tieBreaker [VARIABLES] Comparator  tieBreaker  AdjacencyGraph  graph  boolean  
[P7_Replace_Invocation]^graph.getNodes (  ) ;^133^^^^^118^148^graph.clearNodeAnnotations (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^133^134^^^^118^148^graph.clearNodeAnnotations (  ) ; List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^List<GraphNode<N, E>> worklist = graph.getWeight (  ) ;^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = i.next (  ) ;List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^134^^^^^119^149^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 || tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result != 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 && tieBreaker == null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return count == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return o2 == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , result.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && o2 != null ? tieBreaker.compare ( o1.getValue (  ) , tieBreaker.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P6_Replace_Expression]^return result ( result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^142^143^^^^127^157^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P1_Replace_Type]^long  result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P2_Replace_Operator]^int result = graph.getWeight ( o2.getValue (  )  )  <=  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( o1.getValue (  )  ) - graph.getWeight ( o2.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o1.getWeight ( o2.getValue (  )  ) - graph.getWeight ( graph.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o2.getWeight ( graph.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getWeight ( o2.setAnnotation (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( 2.getValue (  )  ) ;^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P4_Replace_Constructor]^Collections.sort (  new Comparator<GraphNode<N, E>> (  )  {^137^^^^^122^152^Collections.sort ( worklist, new Comparator<GraphNode<N, E>> (  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^Collections.sort ( 0, new Comparator<GraphNode<N, E>> (  )  {^137^^^^^122^152^Collections.sort ( worklist, new Comparator<GraphNode<N, E>> (  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^140^141^^^^125^155^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^- o1.getWeight ( graph.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getWeight ( o1.setAnnotation (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getWeight ( o1 .setAnnotation ( color )   ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^- graph .getNodes (  )  ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^subgraph.addNode ( node.getValue (  )  ) ;- graph.getWeight ( o1.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { - graph.getWeight ( o1.getValue (  )  ) ; }^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^- graph.getWeight ( null.getValue (  )  ) ;^141^^^^^126^156^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^tieBreaker.compare ( o1.getValue (  ) , 3.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^tieBreaker.compare ( 3.getValue (  ) , o2.getValue (  )  )  : result;^143^^^^^128^158^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^worklist = Lists.newLinkedList ( null ) ;^146^^^^^131^161^worklist = Lists.newLinkedList ( worklist ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^146^^^^^131^161^worklist = Lists.newLinkedList ( worklist ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P1_Replace_Type]^short  count = 0;^150^^^^^135^165^int count = 0;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P3_Replace_Literal]^int count = result;^150^^^^^135^165^int count = 0;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^if  ( node.isIndependentOf ( subgraph.getValue (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^if  ( subgraph .addNode (  )   )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^if  ( subgraph.isIndependentOf ( node.setAnnotation (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^if  ( subgraph.isIndependentOf ( node .setAnnotation ( color )   )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P15_Unwrap_Block]^subgraph.addNode(node.getValue()); node.setAnnotation(color); i.remove();^156^157^158^159^160^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ; i.remove (  ) ; }^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P16_Remove_Block]^^156^157^158^159^160^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ; i.remove (  ) ; }^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^subgraph.addNode ( node.setAnnotation (  )  ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^subgraph.addNode ( node .setAnnotation ( color )   ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^- graph.getWeight ( o1.getValue (  )  ) ;subgraph.addNode ( node.getValue (  )  ) ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^node .getValue (  )  ;^158^^^^^143^173^node.setAnnotation ( color ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^158^^^^^143^173^node.setAnnotation ( color ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^i .next (  )  ;^159^^^^^144^174^i.remove (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^159^^^^^144^174^i.remove (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^for  ( Iterator<GraphNode<N, E>> worklist = i.iterator (  ) ; i.hasNext (  ) ; )  {^154^^^^^139^169^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^for  ( Iterator<GraphNode<N, E>> i = worklist .isEmpty (  )  ; i.hasNext (  ) ; )  {^154^^^^^139^169^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^if  ( subgraph.isIndependentOf ( null.getValue (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^subgraph .isIndependentOf (  )  ;^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^157^158^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ; node.setAnnotation ( color ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { subgraph.addNode ( node.getValue (  )  ) ; }^157^^^^^142^172^subgraph.addNode ( node.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^GraphNode<N, E> node = null.next (  ) ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^List<GraphNode<N, E>> worklist = graph.getNodes (  ) ;GraphNode<N, E> node = i.next (  ) ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^GraphNode<N, E> node = i .hasNext (  )  ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^Color color = new Color ( result ) ;^152^^^^^137^167^Color color = new Color ( count ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^SubGraph<N, E> subgraph = graph.getWeight (  ) ;^153^^^^^138^168^SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^163^^^^^148^178^} while  ( !worklist.isEmpty (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^153^^^^^138^168^SubGraph<N, E> subgraph = graph.newSubGraph (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i .next (  )  ; )  {^154^^^^^139^169^for  ( Iterator<GraphNode<N, E>> i = worklist.iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^GraphNode<N, E> node = 1.next (  ) ;^155^^^^^140^170^GraphNode<N, E> node = i.next (  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^if  ( subgraph.isIndependentOf ( 0.getValue (  )  )  )  {^156^^^^^141^171^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  {^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P8_Replace_Mix]^colorToNodeMap =  null;^166^^^^^151^181^colorToNodeMap = map;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result;^167^^^^^152^182^return count;^[CLASS] GreedyGraphColoring 1  [METHOD] color [RETURN_TYPE] int   [VARIABLES] N[]  map  boolean  Color  color  Iterator  i  List  worklist  GraphNode  node  o1  o2  SubGraph  subgraph  int  count  result  Comparator  tieBreaker  
[P1_Replace_Type]^short  result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P2_Replace_Operator]^int result = graph.getWeight ( o2.getValue (  )  )  <<  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( o1.getValue (  )  ) - graph.getWeight ( o2.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = o2.getWeight ( graph.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph.getWeight ( o2.setAnnotation (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^int result = graph .getNodes (  )  - graph^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P8_Replace_Mix]^int result = 1.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^int result = graph.getWeight ( 3.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^- this.getWeight ( o1.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^- o1.getWeight ( graph.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph .getNodes (  )  ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^- graph.getWeight ( o1.setAnnotation (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P8_Replace_Mix]^- graph.getWeight ( 4.setAnnotation (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P11_Insert_Donor_Statement]^subgraph.addNode ( node.getValue (  )  ) ;- graph.getWeight ( o1.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P12_Insert_Condition]^if  ( subgraph.isIndependentOf ( node.getValue (  )  )  )  { - graph.getWeight ( o1.getValue (  )  ) ; }^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 || tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result != 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P2_Replace_Operator]^return result == 0 && tieBreaker == null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P3_Replace_Literal]^return result == result && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , this.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return tieBreaker == 0 && result != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^return result == 0 && o1 != null ? tieBreaker.compare ( tieBreaker.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P6_Replace_Expression]^return result ( result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P5_Replace_Variable]^tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P7_Replace_Invocation]^tieBreaker.compare ( o1.setAnnotation (  ) , o2.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P14_Delete_Statement]^^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] GreedyGraphColoring 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] GraphNode  o1  o2  boolean  int  result  Comparator  tieBreaker  
[P1_Replace_Type]^short  result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P2_Replace_Operator]^int result = graph.getWeight ( o2.getValue (  )  )  !=  graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^int result = graph.getWeight ( o1.getValue (  )  ) - graph.getWeight ( o2.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^int result = o2.getWeight ( graph.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P8_Replace_Mix]^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( 4.getValue (  )  ) ;^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P14_Delete_Statement]^^140^141^^^^139^144^int result = graph.getWeight ( o2.getValue (  )  ) - graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^- o1.getWeight ( graph.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P8_Replace_Mix]^- null.getWeight ( o1.getValue (  )  ) ;^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P14_Delete_Statement]^^141^^^^^139^144^- graph.getWeight ( o1.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P2_Replace_Operator]^return result == 0 || tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P2_Replace_Operator]^return result != 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P2_Replace_Operator]^return result == 0 && tieBreaker == null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P3_Replace_Literal]^return result == -7 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^return tieBreaker == 0 && result != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^return result == 0 && o1 != null ? tieBreaker.compare ( tieBreaker.getValue (  ) , o2.getValue (  )  )  : result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P6_Replace_Expression]^return result ( result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P8_Replace_Mix]^return result;^142^143^^^^139^144^return result == 0 && tieBreaker != null ? tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^tieBreaker.compare ( o1.getValue (  ) .getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P5_Replace_Variable]^tieBreaker.compare ( o2.getValue (  ) , o1.getValue (  )  )  : result;^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
[P14_Delete_Statement]^^143^^^^^139^144^tieBreaker.compare ( o1.getValue (  ) , o2.getValue (  )  )  : result;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   GraphNode<N, E> o1 GraphNode<N, E> o2 [VARIABLES] boolean  GraphNode  o1  o2  int  result  
