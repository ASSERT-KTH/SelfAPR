[P1_Replace_Type]^private static final char TYPEDEF_NAME = "goog.typedef";^39^^^^^34^44^private static final String TYPEDEF_NAME = "goog.typedef";^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private static final String TYPEDEF_NAME = "goog.typedefp";^39^^^^^34^44^private static final String TYPEDEF_NAME = "goog.typedef";^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P8_Replace_Mix]^private static  char TYPEDEF_NAME = "goog.typedef";^39^^^^^34^44^private static final String TYPEDEF_NAME = "goog.typedef";^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTEDC_REFLE", "Object literal expected as second argument" ) ;^41^42^43^^^41^43^static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argumentect literal expected as second argumen" ) ;^41^42^43^^^41^43^static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType OBJECTLIT_EXPECTED  = null ;^41^42^43^^^41^43^static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_OBJECTLIT_EXPECTED", "Object literal expected as second argument" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "g.oog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNullgoog", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "isDefAndNooog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "S", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumbergoog.", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "oog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "soog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isoog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "oog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^282^283^284^285^^282^285^private final Set<String> propertyTestFunctions = ImmutableSet.of ( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject" ) ;^[CLASS] ClosureCodingConvention   [VARIABLES] 
[P2_Replace_Operator]^if  ( type >= SubclassType.INHERITS )  {^52^^^^^50^58^if  ( type == SubclassType.INHERITS )  {^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P5_Replace_Variable]^if  ( SubclassType.INHERITS == type )  {^52^^^^^50^58^if  ( type == SubclassType.INHERITS )  {^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P15_Unwrap_Block]^childCtor.defineDeclaredProperty("superClass_", parentCtor.getPrototype(), false); childCtor.getPrototype().defineDeclaredProperty("constructor", childCtor, false);^52^53^54^55^56^50^58^if  ( type == SubclassType.INHERITS )  { childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ; childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ; }^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P16_Remove_Block]^^52^53^54^55^56^50^58^if  ( type == SubclassType.INHERITS )  { childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ; childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ; }^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.defineDeclaredProperty ( "uperClass_", parentCtor.getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , true ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P5_Replace_Variable]^childCtor.defineDeclaredProperty ( "superClass_".getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P8_Replace_Mix]^childCtor .defineDeclaredProperty ( TYPEDEF_NAME , this )  ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P14_Delete_Statement]^^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P14_Delete_Statement]^^54^^^^^50^58^parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "stronstructor", childCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, true ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P5_Replace_Variable]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", parentCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P7_Replace_Invocation]^childCtor.getPrototype (  )  .defineDeclaredProperty ( TYPEDEF_NAME , 0 )  ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P14_Delete_Statement]^^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.defineDeclaredProperty ( "per", parentCtor.getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P3_Replace_Literal]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "onstructor", childCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[P5_Replace_Variable]^Node callName = superclass.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^68^69^^^^53^83^Node callName = callNode.getFirstChild (  ) ; SubclassType type = typeofClassDefiningName ( callName ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^SubclassType type = typeofClassDefiningName ( superclass ) ;^69^^^^^54^84^SubclassType type = typeofClassDefiningName ( callName ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^SubclassType type = getClassesDefinedByCall ( callName ) ;^69^^^^^54^84^SubclassType type = typeofClassDefiningName ( callName ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^69^^^^^54^84^SubclassType type = typeofClassDefiningName ( callName ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( type == null )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callNode.getChildCount() == 2 && callName.getType() == GETPROP )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callNode.getChildCount (  )  == 2 )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callName.getType (  )  == GETPROP )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callNode.getChildCount() == 3 )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( (subclass != null) && subclass.isUnscopedQualifiedName() && superclass.isUnscopedQualifiedName() )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( (subclass != null && subclass.isUnscopedQualifiedName()) )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( subclass != null )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^if  ( type != this )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P9_Replace_Statement]^if  ( methodName != null )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( callNode.getChildCount (  )  == 2 || callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( callNode.getChildCount (  )  != 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( callNode.getChildCount (  )  <= 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P3_Replace_Literal]^if  ( callNode.getChildCount (  )  == -5 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( superclass.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( callNode.getChildCount (  )  == 2 && superclass.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( callName.getChildCount (  )  == 2 && callNode.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callNode.getChildCount (  )  == 2 ) {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  (  callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callName.getType (  )  == GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( callNode.getChildCount() == 3 )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^if  ( superclass .hasChildren (  )   == 2 * 1 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P9_Replace_Statement]^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^} else if  ( callNode.getChildCount (  )  != 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P3_Replace_Literal]^} else if  ( callNode.getChildCount (  )  == 2 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^} else if  ( superclass.getChildCount (  )  == 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^} else {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^}  if  ( callNode.getChildCount (  )  == 2 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P15_Unwrap_Block]^subclass = callName.getNext();^85^86^87^88^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {  subclass = callName.getNext (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P16_Remove_Block]^^85^86^87^88^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {  subclass = callName.getNext (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^subclass = superclass.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^subclass = callName .getType (  )  ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;subclass = callName.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^subclass = superclass .getType (  )  ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^subclass = superclass.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^subclass = callName .getLastChild (  )  ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^} else if  ( callNode.getChildCount (  )  <= 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P3_Replace_Literal]^} else if  ( callNode.getChildCount (  )  == 0 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^subclass =  null.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( subclass != null || subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( subclass == null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( superclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && callNode.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( superclass != null && subclass.isUnscopedQualifiedName (  )  && subclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( subclass != null ) {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  (  subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P6_Replace_Expression]^if  ( (subclass != null && subclass.isUnscopedQualifiedName()) )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^if  ( subclass != this ) {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P4_Replace_Constructor]^return new SubclassRelationship (  stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( callNode ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( callNode )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^return new SubclassRelationship ( type, isPropertyTestFunction ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^94^103^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^isPropertyTestFunction ( subclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^94^103^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^101^102^^^^94^103^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^stripPrototype ( superclass )  ) ;stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^94^103^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^stripPrototype ( subclass )  ) ;^102^^^^^94^103^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^isPropertyTestFunction ( superclass )  ) ;^102^^^^^94^103^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^102^^^^^94^103^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;stripPrototype ( superclass )  ) ;^102^^^^^94^103^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^subclass = superclass.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P4_Replace_Constructor]^return new SubclassRelationship (  stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^return new SubclassRelationship ( type, isPropertyTestFunction ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( callNode ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^return new SubclassRelationship ( type, isPropertyTestFunction ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^Node superclass = subclass.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node typeArray = callName.getNext (  ) .getNext (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^Node superclass = superclass.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^Node superclass = callNode .getFirstChild (  )  ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node superclass = callNode.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^if  ( callNode .hasChildren (  )   == 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^82^83^84^^^67^97^callName.getType (  )  == Token.GETPROP )  {  subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^subclass = callName .getLastChild (  )  ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;subclass = callName.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^subclass .isQualifiedName (  )   && superclass^95^96^^^^80^110^subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^86^116^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^isPropertyTestFunction ( subclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^86^116^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^101^102^^^^86^116^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^stripPrototype ( superclass )  ) ;stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^86^116^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^stripPrototype ( subclass )  ) ;^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^isPropertyTestFunction ( superclass )  ) ;^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P14_Delete_Statement]^^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P11_Insert_Donor_Statement]^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;stripPrototype ( superclass )  ) ;^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^if  ( callNode.getChildCount (  )  > 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P3_Replace_Literal]^if  ( callNode.getChildCount (  )  == -7 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^if  ( callNode.getChildCount (  )  == 2 / 3 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P3_Replace_Literal]^} else if  ( callNode.getChildCount (  )  == -4 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P2_Replace_Operator]^} else if  ( callNode.getChildCount (  )  < 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^} else if  ( callNode .hasChildren (  )   == 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^}  if  ( callNode.getChildCount (  )  == 3L )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^if  ( callNode != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^if  ( subclass != null && subclass .isQualifiedName (  )   && superclass^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^return new SubclassRelationship ( type, isPropertyTestFunction ( subclass ) , stripPrototype ( callNode )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P5_Replace_Variable]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( callNode )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^if  ( superclass .hasChildren (  )   == 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P7_Replace_Invocation]^callName .getString (  )   == Token.GETPROP )  {^82^^^^^67^97^callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^} else if  ( superclass .hasChildren (  )   == 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^isPropertyTestFunction ( subclass )  ) ;^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P8_Replace_Mix]^return true;^106^^^^^91^121^return null;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[P1_Replace_Type]^char methodName = null;^116^^^^^114^135^String methodName = null;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^String className = null;String methodName = null;^116^^^^^114^135^String methodName = null;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P12_Insert_Condition]^if  ( methodName != null )  { String methodName = null; }^116^^^^^114^135^String methodName = null;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( callName.getType (  )  != Token.GETPROP )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( callName.getType (  )  <= Token.GETPROP )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^if  ( callName.getType() == NAME )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^if  ( dollarIndex != -1 )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^if  ( dollarIndex + 1 )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( callName .getString (  )   == Token.GETPROP )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P9_Replace_Statement]^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P9_Replace_Statement]^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P9_Replace_Statement]^if  ( name.getType (  )  == Token.STRING )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P13_Insert_Block]^if  (  ( callName.getType (  )  )  ==  ( NAME )  )  {     String name = callName.getString (  ) ;     int dollarIndex = name.lastIndexOf ( '$' ) ;     if  ( dollarIndex !=  ( -1 )  )  {         methodName = name.substring (  ( dollarIndex + 1 )  ) ;     } }^117^^^^^114^135^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^} else if  ( callName.getType (  )  != Token.NAME )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^} else if  ( dollarIndex != -1 )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^} else if  ( dollarIndex + 1 )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^} else {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^} else if  ( callName .getString (  )   == Token.NAME )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^}  if  ( callName.getType (  )  == Token.NAME )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P15_Unwrap_Block]^java.lang.String name = callName.getString(); int dollarIndex = name.lastIndexOf('$'); if (dollarIndex != (-1)) {    methodName = name.substring((dollarIndex + 1));};^119^120^121^122^123^114^135^} else if  ( callName.getType (  )  == Token.NAME )  { String name = callName.getString (  ) ; int dollarIndex = name.lastIndexOf ( '$' ) ; if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P16_Remove_Block]^^119^120^121^122^123^114^135^} else if  ( callName.getType (  )  == Token.NAME )  { String name = callName.getString (  ) ; int dollarIndex = name.lastIndexOf ( '$' ) ; if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P13_Insert_Block]^if  (  ( callName.getType (  )  )  ==  ( GETPROP )  )  {     methodName = callName.getLastChild (  ) .getString (  ) ; }else     if  (  ( callName.getType (  )  )  ==  ( NAME )  )  {         String name = callName.getString (  ) ;         int dollarIndex = name.lastIndexOf ( '$' ) ;         if  ( dollarIndex !=  ( -1 )  )  {             methodName = name.substring (  ( dollarIndex + 1 )  ) ;         }     }^119^^^^^114^135^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( dollarIndex == -1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( dollarIndex != -dollarIndex )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^if  ( dollarIndex + 1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( dollarIndex != -1 >> 2 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P15_Unwrap_Block]^methodName = name.substring((dollarIndex + 1));^122^123^124^^^114^135^if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P16_Remove_Block]^^122^123^124^^^114^135^if  ( dollarIndex != -1 )  { methodName = name.substring ( dollarIndex + 1 ) ; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  ||  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^methodName = name.substring ( dollarIndex + dollarIndex ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^methodName = dollarIndex.substring ( name + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 1 + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;methodName = name.substring ( dollarIndex + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P13_Insert_Block]^if  ( dollarIndex !=  ( -1 )  )  {     methodName = name.substring (  ( dollarIndex + 1 )  ) ; }^123^^^^^114^135^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^methodName = name.substring ( dollarIndex  ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^methodName = methodName.substring ( dollarIndex + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P14_Delete_Statement]^^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  &&  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 1 >>> 0 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P1_Replace_Type]^char name = callName.getchar (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^String name = callName .getNext (  )  ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^String qualifiedName = callee.getQualifiedName (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P1_Replace_Type]^short  dollarIndex = name.lastIndexOf ( '$' ) ;^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^int dollarIndex = methodName.lastIndexOf ( '$' ) ;^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^int dollarIndex = name .substring ( dollarIndex )  ;^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P14_Delete_Statement]^^120^121^^^^114^135^String name = callName.getString (  ) ; int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^return firstChild.getString (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^typeNames.add ( name.getString (  )  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^className = callee.getNext (  ) .getString (  ) ;String name = callName.getString (  ) ;^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P14_Delete_Statement]^^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  &  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^methodName = name .lastIndexOf ( dollarIndex )  ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( dollarIndex <= -1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( dollarIndex != -3 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( dollarIndex != -4 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  <<  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 2 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  |  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 0 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P1_Replace_Type]^methodName = callName.getLastChild (  ) .getchar (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^methodName = callName.getLastChild (  ) .equals (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^methodName = callName .getFirstChild (  )  .getString (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName =  null.getLastChild (  ) .getString (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;methodName = callName.getLastChild (  ) .getString (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^className = callee.getNext (  ) .getString (  ) ;methodName = callName.getLastChild (  ) .getString (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P11_Insert_Donor_Statement]^methodName = name.substring ( dollarIndex + 1 ) ;methodName = callName.getLastChild (  ) .getString (  ) ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P7_Replace_Invocation]^methodName = callName.getLastChild (  )  .getNext (  )  ;^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P14_Delete_Statement]^^118^^^^^114^135^methodName = callName.getLastChild (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( dollarIndex >= -1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( dollarIndex != -0 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 1 * 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  >>  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( dollarIndex != --2 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( dollarIndex != -1 * 1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  <=  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = name.substring ( dollarIndex + 4 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^methodName = methodName .lastIndexOf ( dollarIndex )  ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^methodName = name.substring ( dollarIndex  ^  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P1_Replace_Type]^long  dollarIndex = name.lastIndexOf ( '$' ) ;^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P14_Delete_Statement]^^120^^^^^114^135^String name = callName.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P2_Replace_Operator]^if  ( methodName == null )  {^127^^^^^114^135^if  ( methodName != null )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^if  ( name != null )  {^127^^^^^114^135^if  ( methodName != null )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^if  ( methodName != true )  {^127^^^^^114^135^if  ( methodName != null )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P9_Replace_Statement]^if  ( type != null )  {^127^^^^^114^135^if  ( methodName != null )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P15_Unwrap_Block]^if (methodName.equals("inherits")) {    return SubclassType.INHERITS;}else    if (methodName.equals("mixin")) {        return SubclassType.MIXIN;    };^127^128^129^130^131^114^135^if  ( methodName != null )  { if  ( methodName.equals ( "inherits" )  )  { return SubclassType.INHERITS; } else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P16_Remove_Block]^^127^128^129^130^131^114^135^if  ( methodName != null )  { if  ( methodName.equals ( "inherits" )  )  { return SubclassType.INHERITS; } else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( methodName.equals ( "nherit" )  )  {^128^^^^^114^135^if  ( methodName.equals ( "inherits" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^if  ( name.equals ( "inherits" )  )  {^128^^^^^114^135^if  ( methodName.equals ( "inherits" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P15_Unwrap_Block]^return SubclassType.INHERITS;^128^129^130^131^132^114^135^if  ( methodName.equals ( "inherits" )  )  { return SubclassType.INHERITS; } else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P16_Remove_Block]^^128^129^130^131^132^114^135^if  ( methodName.equals ( "inherits" )  )  { return SubclassType.INHERITS; } else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P13_Insert_Block]^if  ( methodName != null )  {     if  ( methodName.equals ( "inherits" )  )  {         return SubclassType.INHERITS;     }else         if  ( methodName.equals ( "mixin" )  )  {             return SubclassType.MIXIN;         }      }^128^^^^^114^135^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "mixini" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P5_Replace_Variable]^} else if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P6_Replace_Expression]^} else {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P15_Unwrap_Block]^return SubclassType.MIXIN;^130^131^132^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P16_Remove_Block]^^130^131^132^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  { return SubclassType.MIXIN; }^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^return null;^131^^^^^114^135^return SubclassType.MIXIN;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "mi" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P12_Insert_Condition]^if  ( type == SubclassType.INHERITS )  { return SubclassType.INHERITS; }^129^^^^^114^135^return SubclassType.INHERITS;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "ixin" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^}  if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "mixinm" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( methodName.equals ( "nherits" )  )  {^128^^^^^114^135^if  ( methodName.equals ( "inherits" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "miixin" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "mixinmix" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "mixinmi" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^if  ( methodName.equals ( "inhe" )  )  {^128^^^^^114^135^if  ( methodName.equals ( "inherits" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^} else if  ( methodName.equals ( "xi" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P8_Replace_Mix]^return false;^134^^^^^114^135^return null;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[P3_Replace_Literal]^return "ClauperClass_".equals ( propertyName ) ;^139^^^^^138^140^return "superClass_".equals ( propertyName ) ;^[CLASS] ClosureCodingConvention  [METHOD] isSuperClassReference [RETURN_TYPE] boolean   String propertyName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P5_Replace_Variable]^return "superClass_".equals ( name ) ;^139^^^^^138^140^return "superClass_".equals ( propertyName ) ;^[CLASS] ClosureCodingConvention  [METHOD] isSuperClassReference [RETURN_TYPE] boolean   String propertyName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P3_Replace_Literal]^return "superCluperClass_".equals ( propertyName ) ;^139^^^^^138^140^return "superClass_".equals ( propertyName ) ;^[CLASS] ClosureCodingConvention  [METHOD] isSuperClassReference [RETURN_TYPE] boolean   String propertyName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P14_Delete_Statement]^^139^^^^^138^140^return "superClass_".equals ( propertyName ) ;^[CLASS] ClosureCodingConvention  [METHOD] isSuperClassReference [RETURN_TYPE] boolean   String propertyName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P2_Replace_Operator]^if  ( qualifiedName.getType (  )  == Token.GETPROP || qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P2_Replace_Operator]^if  ( qualifiedName.getType (  )  != Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P3_Replace_Literal]^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "p" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P5_Replace_Variable]^if  ( qualifiedName.getType (  )  == Token.null && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P6_Replace_Expression]^if  ( qualifiedName.getType (  )  == Token.GETPROP ) {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P6_Replace_Expression]^if  (  qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P6_Replace_Expression]^if  ( qualifiedName.getType (  )  == GETPROP )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P7_Replace_Invocation]^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P7_Replace_Invocation]^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  )  .getNext (  )  .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P15_Unwrap_Block]^return qualifiedName.getFirstChild();^150^151^152^153^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return qualifiedName.getFirstChild (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P16_Remove_Block]^^150^151^152^153^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return qualifiedName.getFirstChild (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P8_Replace_Mix]^return qualifiedName .getLastChild (  )  ;^152^^^^^149^156^return qualifiedName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P14_Delete_Statement]^^152^153^^^^149^156^return qualifiedName.getFirstChild (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P3_Replace_Literal]^qualifiedName.getLastChild (  ) .getString (  ) .equals ( "otyp" )  )  {^151^^^^^149^156^qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P7_Replace_Invocation]^qualifiedName.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^151^^^^^149^156^qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P14_Delete_Statement]^^151^152^153^^^149^156^qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { return qualifiedName.getFirstChild (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P7_Replace_Invocation]^qualifiedName .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  {^151^^^^^149^156^qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[P5_Replace_Variable]^return extractClassNameIfGoog (  parent, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P5_Replace_Variable]^return extractClassNameIfGoog ( node,  "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P5_Replace_Variable]^return extractClassNameIfGoog ( parent, node, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P7_Replace_Invocation]^return applySubclassRelationship ( node, parent, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P3_Replace_Literal]^return extractClassNameIfGoog ( node, parent, "v" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P14_Delete_Statement]^^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P5_Replace_Variable]^return extractClassNameIfGoog (  parent, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P5_Replace_Variable]^return extractClassNameIfGoog ( node,  "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P5_Replace_Variable]^return extractClassNameIfGoog ( parent, node, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P7_Replace_Invocation]^return applySubclassRelationship ( node, parent, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P3_Replace_Literal]^return extractClassNameIfGoog ( node, parent, "goog.requiregoog.re" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P14_Delete_Statement]^^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[P1_Replace_Type]^char className = null;^180^^^^^178^191^String className = null;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^String methodName = null;String className = null;^180^^^^^178^191^String className = null;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isExprCall ( node )  )  {^181^^^^^178^191^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P6_Replace_Expression]^if  ( callee != null )  {^181^^^^^178^191^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P6_Replace_Expression]^if  ( callee.getType (  )  == GETPROP )  {^181^^^^^178^191^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P13_Insert_Block]^if  (  ( callee != null )  &&  (  ( callee.getType (  )  )  ==  ( GETPROP )  )  )  {     String qualifiedName = callee.getQualifiedName (  ) ;     if  ( functionName.equals ( qualifiedName )  )  {         className = callee.getNext (  ) .getString (  ) ;     } }^181^^^^^178^191^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P2_Replace_Operator]^if  ( callee != null || callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P2_Replace_Operator]^if  ( callee == null && callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P2_Replace_Operator]^if  ( callee != null && callee.getType (  )  != Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  ( parent != null && callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P6_Replace_Expression]^if  ( callee != null ) {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P6_Replace_Expression]^if  (  callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P6_Replace_Expression]^if  ( callee.getType (  )  == GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P7_Replace_Invocation]^if  ( callee != null && callee .getString (  )   == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^if  ( callee != true && callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P9_Replace_Statement]^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P9_Replace_Statement]^if  ( callName.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P15_Unwrap_Block]^java.lang.String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) {    className = callee.getNext().getString();};^183^184^185^186^187^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  { String qualifiedName = callee.getQualifiedName (  ) ; if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P16_Remove_Block]^^183^184^185^186^187^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  { String qualifiedName = callee.getQualifiedName (  ) ; if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P13_Insert_Block]^if  ( isExprCall ( parent )  )  {     Node callee = node.getFirstChild (  ) ;     if  (  ( callee != null )  &&  (  ( callee.getType (  )  )  ==  ( GETPROP )  )  )  {         String qualifiedName = callee.getQualifiedName (  ) ;         if  ( functionName.equals ( qualifiedName )  )  {             className = callee.getNext (  ) .getString (  ) ;         }     } }^183^^^^^178^191^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P13_Insert_Block]^if  (  (  ( callNode.getChildCount (  )  )  == 2 )  &&  (  ( callName.getType (  )  )  ==  ( GETPROP )  )  )  {     subclass = callName.getFirstChild (  ) ; }else     if  (  ( callNode.getChildCount (  )  )  == 3 )  {         subclass = callName.getNext (  ) ;     }^183^^^^^178^191^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  (  ( propertyName ) .equals ( qualifiedName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  (  ( functionName ) .equals ( name )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  (  ( qualifiedName ) .equals ( functionName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^if  (  ( qualifiedName ) .equals ( qualifiedName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P15_Unwrap_Block]^className = callee.getNext().getString();^185^186^187^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P16_Remove_Block]^^185^186^187^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P1_Replace_Type]^className = callee.getNext (  ) .getchar (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^className = parent.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P7_Replace_Invocation]^className = callee.getNext (  ) .equals (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P7_Replace_Invocation]^className = callee .getType (  )  .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;className = callee.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^className = callee.getNext (  )  .getNext (  )  ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P14_Delete_Statement]^^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^Node typeArray = callName.getNext (  ) .getNext (  ) ;className = callee.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;className = callee.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^return callName.getNext (  ) .getQualifiedName (  ) ;className = callee.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P1_Replace_Type]^char qualifiedName = callee.getQualifiedName (  ) ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^String qualifiedName = parent.getQualifiedName (  ) ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P7_Replace_Invocation]^String qualifiedName = callee .isQualifiedName (  )  ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;String qualifiedName = callee.getQualifiedName (  ) ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P14_Delete_Statement]^^184^185^186^187^^178^191^String qualifiedName = callee.getQualifiedName (  ) ; if  (  ( functionName ) .equals ( qualifiedName )  )  { className = callee.getNext (  ) .getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^if  (  ( functionName ) .equals ( propertyName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^className = parent .getType (  )  .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^if  (  ( name ) .equals ( qualifiedName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^className = parent.getNext (  )  .getNext (  )  ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^Node callee = parent.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P7_Replace_Invocation]^Node callee = node .getLastChild (  )  ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^Node callee = parent .getLastChild (  )  ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P14_Delete_Statement]^^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node callee = node.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^String qualifiedName = parent .isQualifiedName (  )  ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P5_Replace_Variable]^return qualifiedName;^190^^^^^178^191^return className;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P8_Replace_Mix]^return name;^190^^^^^178^191^return className;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[P3_Replace_Literal]^return "xportPro";^199^^^^^198^200^return "goog.exportProperty";^[CLASS] ClosureCodingConvention  [METHOD] getExportPropertyFunction [RETURN_TYPE] String   [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P3_Replace_Literal]^return "g.exportS";^208^^^^^207^209^return "goog.exportSymbol";^[CLASS] ClosureCodingConvention  [METHOD] getExportSymbolFunction [RETURN_TYPE] String   [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P5_Replace_Variable]^Node callName = typeArray.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node callName = n.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  || n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  < 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P3_Replace_Literal]^if  ( "goog.addDependencyoog".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P3_Replace_Literal]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= -3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( "goog.addDependency".equals ( name.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && name.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  ) {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  (  n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( typeArray.getType() == ARRAYLIT )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( name != null )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( name.getType() == STRING )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n .hasChildren (  )   >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P13_Insert_Block]^if  (  ( typeArray.getType (  )  )  ==  ( ARRAYLIT )  )  {     String> typeNames = newArrayList (  ) ;     for  ( Node name = typeArray.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  {         if  (  ( name.getType (  )  )  ==  ( STRING )  )  {             typeNames.add ( name.getString (  )  ) ;         }     }     return typeNames; }^214^^^^^212^229^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( typeArray.getType (  )  <= Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( typeArray.getType (  )  != Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( name != null )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P6_Replace_Expression]^if  ( name.getType() == STRING )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^if  ( typeArray .getString (  )   == Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( callName.getType (  )  == Token.GETPROP )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( name.getType (  )  == Token.STRING )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( name.getType (  )  != Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( typeArray.getType (  )  == Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( callName.getType (  )  == Token.GETPROP )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P9_Replace_Statement]^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P15_Unwrap_Block]^typeNames.add(name.getString());^221^222^223^^^212^229^if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P16_Remove_Block]^^221^222^223^^^212^229^if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^typeNames.add ( typeArray.getString (  )  ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^typeNode.getNext (  )  ) ;typeNames.add ( name.getString (  )  ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;typeNames.add ( name.getString (  )  ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^typeNames.add ( name .getNext (  )   ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^for  ( Node name = typeArray.getFirstChild (  ) ; name == null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^for  ( Node name = n.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^for  ( Node typeArray = typeArray.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^for  ( Node typeArray = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^for  ( Node name = typeArray .getLastChild (  )  ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^typeNames.add ( typeArray .getNext (  )   ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^if  ( name .getString (  )   == Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^name = typeArray.getNext (  )  )  {^220^^^^^212^229^name = name.getNext (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^218^^^^^212^229^List<String> typeNames = Lists.newArrayList (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^for  ( Node name = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^219^220^221^222^223^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null; name = name.getNext (  )  )  { if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^name = typeArray .getType (  )   )  {^220^^^^^212^229^name = name.getNext (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^220^221^222^^^212^229^name = name.getNext (  )  )  { if  ( name.getType (  )  == Token.STRING )  { typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^if  ( typeArray .getString (  )   == Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( name.getType (  )  >= Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.4 )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^Node typeArray = name.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^Node typeArray = callName.equals (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^Node typeArray = typeArray.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^methodName = callName.getLastChild (  ) .getString (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^n.getChildCount (  )  >= 3 )  { Node typeArray = callName.getNext (  ) .getNext (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^return callName.getNext (  ) .getQualifiedName (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P11_Insert_Donor_Statement]^className = callee.getNext (  ) .getString (  ) ;Node typeArray = callName.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^Node typeArray = callName .getType (  )^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^218^219^^^^212^229^List<String> typeNames = Lists.newArrayList (  ) ; for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P7_Replace_Invocation]^name = name .getType (  )   )  {^220^^^^^212^229^name = name.getNext (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( typeArray.getType (  )  >= Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P2_Replace_Operator]^if  ( name.getType (  )  <= Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^for  ( Node name = n .getLastChild (  )  ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^if  ( name .getString (  )   == Token.null )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P3_Replace_Literal]^if  ( "oo".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P5_Replace_Variable]^if  ( "goog.addDependency".equals ( typeArray.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^n .hasChildren (  )   >= 3 )  {^215^^^^^212^229^n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P14_Delete_Statement]^^215^216^^^^212^229^n.getChildCount (  )  >= 3 )  { Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^Node typeArray = typeArray .getType (  )^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^return this;^228^^^^^212^229^return null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[P8_Replace_Mix]^Node firstChild = n .getLastChild (  )  ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^Node firstChild = firstChild.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^Node firstChild = firstChild .getLastChild (  )  ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P14_Delete_Statement]^^233^234^^^^232^247^Node firstChild = n.getFirstChild (  ) ; int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^return firstChild.getString (  ) ;Node firstChild = n.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P1_Replace_Type]^short  type = n.getType (  ) ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^int type = firstChild.getType (  ) ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^int type = n .getString (  )  ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;int type = n.getType (  ) ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;int type = n.getType (  ) ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P14_Delete_Statement]^^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P2_Replace_Operator]^if  ( type != Token.ASSIGN )  {^235^^^^^232^247^if  ( type == Token.ASSIGN )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P2_Replace_Operator]^if  ( type >= Token.ASSIGN )  {^235^^^^^232^247^if  ( type == Token.ASSIGN )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^if  ( type == VAR && firstChild.hasChildren() )  {^235^^^^^232^247^if  ( type == Token.ASSIGN )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^if  ( type == VAR )  {^235^^^^^232^247^if  ( type == Token.ASSIGN )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.ClosureCodingConvention.TYPEDEF_NAME.equals(n.getLastChild().getQualifiedName())) {    return firstChild.getQualifiedName();};^235^236^237^238^^232^247^if  ( type == Token.ASSIGN )  { if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P16_Remove_Block]^^235^236^237^238^^232^247^if  ( type == Token.ASSIGN )  { if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  (  ( type ==  ( VAR )  )  &&  ( firstChild.hasChildren (  )  )  )  {     if  ( equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {         return firstChild.getString (  ) ;     } }^235^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P2_Replace_Operator]^} else if  ( type == Token.VAR || firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P2_Replace_Operator]^} else if  ( type != Token.VAR && firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^} else if  ( type == Token.VAR && n.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^} else if  ( firstChild == Token.VAR && type.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^} else if  ( type == Token.VAR ) {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^} else if  (  firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^} else if  ( type == VAR )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P6_Replace_Expression]^} else {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^}  if  ( type == Token.VAR && n.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.ClosureCodingConvention.TYPEDEF_NAME.equals(firstChild.getFirstChild().getQualifiedName())) {    return firstChild.getString();};^239^240^241^242^243^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  { if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P16_Remove_Block]^^239^240^241^242^243^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  { if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( TYPEDEF_NAME.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( propertyName.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( firstChild.equals ( TYPEDEF_NAME.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.substring ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .equals (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( firstChild .getLastChild (  )  .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( qualifiedName.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P9_Replace_Statement]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P15_Unwrap_Block]^return firstChild.getString();^240^241^242^243^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P16_Remove_Block]^^240^241^242^243^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  (  ( type ==  ( VAR )  )  &&  ( firstChild.hasChildren (  )  )  )  {     if  ( equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {         return firstChild.getString (  ) ;     } }^240^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  ( equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {     return firstChild.getQualifiedName (  ) ; }^240^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^return n.getString (  ) ;^242^^^^^232^247^return firstChild.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^return firstChild .getNext (  )  ;^242^^^^^232^247^return firstChild.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P14_Delete_Statement]^^242^^^^^232^247^return firstChild.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  )  .isQualifiedName (  )   )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( TYPEDEF_NAME.substring ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  ( equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {     return firstChild.getString (  ) ; }^240^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^firstChild.getFirstChild (  ) .equals (  )  )  )  {^241^^^^^232^247^firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^firstChild.getFirstChild (  )  .isQualifiedName (  )   )  )  {^241^^^^^232^247^firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^firstChild .getLastChild (  )  .getQualifiedName (  )  )  )  {^241^^^^^232^247^firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P14_Delete_Statement]^^241^242^243^^^232^247^firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getString (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( name.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^} else if  ( type == Token.VAR && firstChild .getChildCount (  )   )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^return n .getNext (  )  ;^242^^^^^232^247^return firstChild.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( qualifiedName.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( n.equals ( TYPEDEF_NAME.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.substring ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .equals (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( n .getFirstChild (  )  .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( name.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P9_Replace_Statement]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P15_Unwrap_Block]^return firstChild.getQualifiedName();^236^237^238^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P16_Remove_Block]^^236^237^238^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  { return firstChild.getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  (  ( type ==  ( VAR )  )  &&  ( firstChild.hasChildren (  )  )  )  {     if  ( equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {         return firstChild.getString (  ) ;     } }^236^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  ( equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {     return firstChild.getString (  ) ; }^236^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^return n.getQualifiedName (  ) ;^237^^^^^232^247^return firstChild.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^return firstChild .isQualifiedName (  )  ;^237^^^^^232^247^return firstChild.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P14_Delete_Statement]^^237^238^^^^232^247^return firstChild.getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^return n .isQualifiedName (  )  ;^237^^^^^232^247^return firstChild.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( TYPEDEF_NAME.equals ( firstChild.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P13_Insert_Block]^if  ( equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {     return firstChild.getQualifiedName (  ) ; }^236^^^^^232^247^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( name.substring ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( propertyName.substring ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^if  ( name.equals ( firstChild.getFirstChild (  ) .equals (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P5_Replace_Variable]^if  ( propertyName.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P7_Replace_Invocation]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  )  .isQualifiedName (  )   )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P8_Replace_Mix]^return true;^246^^^^^232^247^return null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[P3_Replace_Literal]^return "goog.abstractMetho";^251^^^^^250^252^return "goog.abstractMethod";^[CLASS] ClosureCodingConvention  [METHOD] getAbstractMethodName [RETURN_TYPE] String   [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P5_Replace_Variable]^Node callName = classNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P14_Delete_Statement]^^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P2_Replace_Operator]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  && callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P2_Replace_Operator]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  == 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P3_Replace_Literal]^if  ( !"etonG".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P3_Replace_Literal]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 7 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P5_Replace_Variable]^if  ( !"goog.addSingletonGetter".equals ( classNode.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P6_Replace_Expression]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  ) {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P6_Replace_Expression]^if  (  callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P7_Replace_Invocation]^if  ( !"goog.addSingletonGetter".equals ( callName .isQualifiedName (  )   )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^if  ( !"goog.addSingletonGetter" .equals ( null )   ) {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P9_Replace_Statement]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P9_Replace_Statement]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P15_Unwrap_Block]^return null;^257^258^259^260^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P16_Remove_Block]^^257^258^259^260^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P13_Insert_Block]^if  (  ( ! ( equals ( callName.getQualifiedName (  )  )  )  )  ||  (  ( callName.getChildCount (  )  )  != 2 )  )  {     return null; }^257^^^^^255^268^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^return this;^259^^^^^255^268^return null;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^return true;^259^^^^^255^268^return null;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P3_Replace_Literal]^if  ( !"t".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^callName .hasChildren (  )   != 2 )  {^258^^^^^255^268^callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P14_Delete_Statement]^^258^259^^^^255^268^callName.getChildCount (  )  != 2 )  { return null;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P5_Replace_Variable]^Node classNode = callNode.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node typeArray = callName.getNext (  ) .getNext (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^Node classNode = classNode.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P14_Delete_Statement]^^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node classNode = callName.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P7_Replace_Invocation]^if  ( !classNode .getQualifiedName (  )   )  {^263^^^^^255^268^if  ( !classNode.isQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P9_Replace_Statement]^if  ( !typeNode.isQualifiedName (  )  )  {^263^^^^^255^268^if  ( !classNode.isQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P15_Unwrap_Block]^return null;^263^264^265^^^255^268^if  ( !classNode.isQualifiedName (  )  )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P16_Remove_Block]^^263^264^265^^^255^268^if  ( !classNode.isQualifiedName (  )  )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P13_Insert_Block]^if  ( ! ( typeNode.isQualifiedName (  )  )  )  {     return null; }^263^^^^^255^268^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^return false;^264^^^^^255^268^return null;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P8_Replace_Mix]^return true;^264^^^^^255^268^return null;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P13_Insert_Block]^if  ( ! ( classNode.isQualifiedName (  )  )  )  {     return null; }^263^^^^^255^268^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P5_Replace_Variable]^return classNode.getNext (  ) .getQualifiedName (  ) ;^267^^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P7_Replace_Invocation]^return callName.getNext (  ) .equals (  ) ;^267^^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P7_Replace_Invocation]^return callName.getNext (  )  .isQualifiedName (  )  ;^267^^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P7_Replace_Invocation]^return callName .getType (  )  .getQualifiedName (  ) ;^267^^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P14_Delete_Statement]^^267^268^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[P3_Replace_Literal]^functionType.defineDeclaredProperty ( "getInstancesta", getterType, false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P3_Replace_Literal]^functionType.defineDeclaredProperty ( "getInstance", getterType, true ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P5_Replace_Variable]^functionType.defineDeclaredProperty ( "getInstance",  false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P14_Delete_Statement]^^273^274^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ; functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P3_Replace_Literal]^functionType.defineDeclaredProperty ( "instance_sta", objectType, false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P3_Replace_Literal]^functionType.defineDeclaredProperty ( "instance_", objectType, true ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P5_Replace_Variable]^functionType.defineDeclaredProperty ( "instance_",  false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P14_Delete_Statement]^^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P11_Insert_Donor_Statement]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[P3_Replace_Literal]^return "oog.g";^279^^^^^278^280^return "goog.global";^[CLASS] ClosureCodingConvention  [METHOD] getGlobalObject [RETURN_TYPE] String   [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[P2_Replace_Operator]^Preconditions.checkArgument ( call.getType (  )  <= Token.CALL ) ;^289^^^^^288^292^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P7_Replace_Invocation]^Preconditions.checkArgument ( call .getString (  )   == Token.CALL ) ;^289^^^^^288^292^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P14_Delete_Statement]^^289^^^^^288^292^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^289^^^^^288^292^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P5_Replace_Variable]^return call.contains ( propertyTestFunctions.getFirstChild (  ) .getQualifiedName (  )  ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P7_Replace_Invocation]^return propertyTestFunctions.contains ( call.getFirstChild (  ) .equals (  )  ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P7_Replace_Invocation]^return propertyTestFunctions.contains ( call.getFirstChild (  )  .isQualifiedName (  )   ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P7_Replace_Invocation]^return propertyTestFunctions.contains ( call .getLastChild (  )  .getQualifiedName (  )  ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P14_Delete_Statement]^^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P7_Replace_Invocation]^call.getFirstChild (  ) .equals (  )  ) ;^291^^^^^288^292^call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P8_Replace_Mix]^call .getLastChild (  )  .getQualifiedName (  )  ) ;^291^^^^^288^292^call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P14_Delete_Statement]^^291^292^^^^288^292^call.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P12_Insert_Condition]^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  { call.getFirstChild (  ) .getQualifiedName (  )  ) ; }^291^^^^^288^292^call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P12_Insert_Condition]^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  { call.getFirstChild (  ) .getQualifiedName (  )  ) ; }^291^^^^^288^292^call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[P2_Replace_Operator]^Preconditions.checkArgument ( callNode.getType (  )  >= Token.CALL ) ;^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^Preconditions.checkArgument ( typeNode.getType (  )  == Token.CALL ) ;^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^297^298^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ; Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^Node callName = typeNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^Node callName = callNode .getLastChild (  )  ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node callee = node.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node firstChild = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node callName = n.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^subclass = callName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^return qualifiedName.getFirstChild (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node callName = callNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P2_Replace_Operator]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  && callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P2_Replace_Operator]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  <= 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P3_Replace_Literal]^if  ( !"og.reflect.objeoog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P3_Replace_Literal]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 4 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^if  ( !"goog.reflect.object".equals ( typeNode.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P6_Replace_Expression]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  ) {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P6_Replace_Expression]^if  (  callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName .hasChildren (  )   != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P15_Unwrap_Block]^return null;^299^300^301^302^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P16_Remove_Block]^^299^300^301^302^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P13_Insert_Block]^if  (  ( ! ( equals ( callName.getQualifiedName (  )  )  )  )  ||  (  ( callName.getChildCount (  )  )  != 2 )  )  {     return null; }^299^^^^^295^318^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return this;^301^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return false;^301^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P3_Replace_Literal]^if  ( !"goog.reflect.objectog".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^callName .hasChildren (  )   != 2 )  {^300^^^^^295^318^callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^300^301^^^^295^318^callName.getChildCount (  )  != 2 )  { return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^Node typeNode = objectNode.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^Node typeNode = callName .getType (  )  ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node typeArray = callName.getNext (  ) .getNext (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^String name = callName.getString (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node objectNode = typeNode.getNext (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^Node typeNode = typeNode.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^typeNode.getNext (  )  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node typeNode = callName.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^if  ( !typeNode .getQualifiedName (  )   )  {^305^^^^^295^318^if  ( !typeNode.isQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( !classNode.isQualifiedName (  )  )  {^305^^^^^295^318^if  ( !typeNode.isQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P15_Unwrap_Block]^return null;^305^306^307^^^295^318^if  ( !typeNode.isQualifiedName (  )  )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P16_Remove_Block]^^305^306^307^^^295^318^if  ( !typeNode.isQualifiedName (  )  )  { return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P13_Insert_Block]^if  ( ! ( classNode.isQualifiedName (  )  )  )  {     return null; }^305^^^^^295^318^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return false;^306^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return true;^306^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P13_Insert_Block]^if  ( ! ( typeNode.isQualifiedName (  )  )  )  {     return null; }^305^^^^^295^318^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^Node objectNode = callNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node classNode = callName.getNext (  ) ;Node objectNode = typeNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;Node objectNode = typeNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node superclass = callNode.getLastChild (  ) ;Node objectNode = typeNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node callName = callNode.getFirstChild (  ) ;Node objectNode = typeNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^Node objectNode = typeNode .getType (  )  ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^Node objectNode = objectNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^subclass = callName.getNext (  ) ;Node objectNode = typeNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P2_Replace_Operator]^if  ( objectNode.getType (  )  >= Token.OBJECTLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^if  ( typeNode.getType (  )  != Token.OBJECTLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( callName.getType (  )  == Token.GETPROP )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P9_Replace_Statement]^if  ( name.getType (  )  == Token.STRING )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P15_Unwrap_Block]^t.getCompiler().report(com.google.javascript.jscomp.JSError.make(t.getSourceName(), callNode, com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED)); return null;^310^311^312^313^314^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  { t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ; return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P16_Remove_Block]^^310^311^312^313^314^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  { t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ; return null; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return true;^313^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , typeNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) ,  OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( OBJECTLIT_EXPECTED.getSourceName (  ) , callNode, t )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( callNode.getSourceName (  ) , t, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , OBJECTLIT_EXPECTED, callNode )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^t.getCompiler (  ) .defineDeclaredProperty ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^t .getSourceName (  )  .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P13_Insert_Block]^if  (  ( objectNode.getType (  )  )  !=  ( OBJECTLIT )  )  {     t.getCompiler (  ) .report ( make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;     return null; }^311^^^^^295^318^[Delete]^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return this;^313^^^^^295^318^return null;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^if  ( objectNode .getString (  )   != Token.OBJECTLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^t.getCompiler (  )  .getNext (  )   ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^t.getCompiler (  ) .report ( JSError.make ( t .getCompiler (  )  , callNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^t.getCompiler (  ) .report ( JSError.make ( t .getCompiler (  )  , typeNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P5_Replace_Variable]^return new ObjectLiteralCast ( objectNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^316^317^^^^295^318^return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^return new ObjectLiteralCast ( typeNode .isQualifiedName (  )  , typeNode.getNext (  )  ) ;^316^317^^^^295^318^return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P8_Replace_Mix]^return new ObjectLiteralCast ( objectNode .isQualifiedName (  )  , typeNode.getNext (  )  ) ;^316^317^^^^295^318^return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^316^317^318^^^295^318^return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ; }^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P7_Replace_Invocation]^typeNode .getType (  )   ) ;^317^^^^^295^318^typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P14_Delete_Statement]^^317^^^^^295^318^typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^Node typeNode = callName.getNext (  ) ;typeNode.getNext (  )  ) ;^317^^^^^295^318^typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P11_Insert_Donor_Statement]^typeNames.add ( name.getString (  )  ) ;typeNode.getNext (  )  ) ;^317^^^^^295^318^typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[P3_Replace_Literal]^return true;^325^^^^^324^326^return false;^[CLASS] ClosureCodingConvention  [METHOD] isOptionalParameter [RETURN_TYPE] boolean   Node parameter [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  parameter  
[P3_Replace_Literal]^return true;^333^^^^^332^334^return false;^[CLASS] ClosureCodingConvention  [METHOD] isVarArgsParameter [RETURN_TYPE] boolean   Node parameter [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  parameter  
[P3_Replace_Literal]^return true;^341^^^^^340^342^return false;^[CLASS] ClosureCodingConvention  [METHOD] isPrivate [RETURN_TYPE] boolean   String name [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
