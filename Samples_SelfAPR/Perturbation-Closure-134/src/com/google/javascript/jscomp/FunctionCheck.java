[P8_Replace_Mix]^private  Map<Node, FunctionInfo> functionInfos;^47^^^^^42^52^private final Map<Node, FunctionInfo> functionInfos;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "C_WRONG_ARGUMENT_CO", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^51^52^53^54^^51^55^static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^51^52^53^54^^51^55^static final DiagnosticType WRONG_ARGUMENT_COUNT_ERROR = DiagnosticType.error ( "JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument ( s ) . " + "All definitions of this function require at least {2} argument ( s ) " +^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "OPTIO", "Required argument must precede optional argument ( s ) " ) ;^57^58^59^^^57^59^static final DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType OPTIONAL_ARGS_ERROR ;^57^58^59^^^57^59^static final DiagnosticType OPTIONAL_ARGS_ERROR = DiagnosticType.error ( "JSC_OPTIONAL_ARGS_ERROR", "Required argument must precede optional argument ( s ) " ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERRORJ", "Argument must precede var_args argument" ) ;^61^62^63^^^61^63^static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argument" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argumentArgument must precede" ) ;^61^62^63^^^61^63^static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argument" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType VAR_ARGS_ERROR ;^61^62^63^^^61^63^static final DiagnosticType VAR_ARGS_ERROR = DiagnosticType.error ( "JSC_VAR_ARGS_ERROR", "Argument must precede var_args argument" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P1_Replace_Type]^final  short  args;^81^^^^^76^86^final int args;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^short  args;^81^^^^^76^86^final int args;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P1_Replace_Type]^final  long  optionalArgs;^82^^^^^77^87^final int optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^boolean hasVarArgs;^83^^^^^78^88^final boolean hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^67^^^^^66^70^this.compiler = compiler;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^this.level =  null;^68^^^^^66^70^this.level = level;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^this.functionInfos  =  this.functionInfos ;^69^^^^^66^70^this.functionInfos = new HashMap<Node, FunctionInfo> (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^this.args =  optionalArgs;^86^^^^^85^89^this.args = args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^hasVarArgs = true;this.args = args;^86^^^^^85^89^this.args = args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.optionalArgs = optionalArgs;this.args = args;^86^^^^^85^89^this.args = args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.hasVarArgs = hasVarArgs;this.args = args;^86^^^^^85^89^this.args = args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^this.optionalArgs = args;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.args = args;this.optionalArgs = optionalArgs;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.hasVarArgs = hasVarArgs;this.optionalArgs = optionalArgs;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^this.hasVarArgs =  null;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^hasVarArgs = true;this.hasVarArgs = hasVarArgs;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.args = args;this.hasVarArgs = hasVarArgs;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^this.optionalArgs = optionalArgs;this.hasVarArgs = hasVarArgs;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[P4_Replace_Constructor]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P4_Replace_Constructor]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( root, Lists.newArrayList ( externs, compiler ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^NodeTraversal .getScope (  )   ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P14_Delete_Statement]^^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^Lists.newArrayList (  root ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^Lists.newArrayList ( externs ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P14_Delete_Statement]^^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[P2_Replace_Operator]^if  ( ! ( other  >>  FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^if  (  ( other instanceof FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P15_Unwrap_Block]^return false;^92^93^94^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  { return false; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P16_Remove_Block]^^92^93^94^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  { return false; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P3_Replace_Literal]^return true;^93^^^^^91^101^return false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;FunctionInfo o =  ( FunctionInfo )  other;^96^^^^^91^101^FunctionInfo o =  ( FunctionInfo )  other;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P11_Insert_Donor_Statement]^FunctionInfo fi = functionInfos.get ( fn ) ;FunctionInfo o =  ( FunctionInfo )  other;^96^^^^^91^101^FunctionInfo o =  ( FunctionInfo )  other;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args == args || o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args != args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args == args && o.optionalArgs != optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args <= args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return optionalArgs == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == optionalArgs && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return args.args == o && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return optionalArgs == args && o.optionalArgs == o.args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == o.optionalArgs && args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && optionalArgs == o.optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == optionalArgs && o.optionalArgs == args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == o.hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && o.optionalArgs == hasVarArgs && o.hasVarArgs == optionalArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P8_Replace_Mix]^return o.args ;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[P1_Replace_Type]^short  result = 17;^104^^^^^103^109^int result = 17;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^int result = 8;^104^^^^^103^109^int result = 17;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^result = 37 + result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^result = 29 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * optionalArgs + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * result + optionalArgs;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^result = 25 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result + optionalArgs;result = 37 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;result = 37 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^result = 37 - result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^result = args * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^result = 37 / 0 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result + args;result = 37 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;result = 37 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^result = 37 * result +  ==  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^result = 37 / result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^result = optionalArgs * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^result = 37 * result +  ( hasVarArgs ? -6 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^result = 37 * result +  ( hasVarArgs ? 1 : result ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * optionalArgs +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^result  =  0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^result  =  1 ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^result = 24 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result + optionalArgs;result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^result = 37 * result + args;result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^return optionalArgs;^108^^^^^103^109^return result;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^return args + " total argument ( s )  ^  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^return args + " total argument ( s )  ||  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^return args + " total argument ( s )  &&  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^return args + " total argument ( s )  >=  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^return args  &&  " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^return args + " total argument ( s )  " + "of which  whic" + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^return args + " total argument ( s )  " + "of which " + optionalArgs + "ptionis/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P3_Replace_Literal]^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported, var_args suppor" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^return result + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^return args + " total argument ( s )  " + "of which " + result + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^return args + " total argument ( s )  " + "of which " + hasVarArgs + " is/are optional" + ( optionalArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^return args  ||  " total argument ( s )  "  ||  "of which "  ||  optionalArgs  ||  " is/are optional"  ||  ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( fn.getType (  )  != Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( fn.getType (  )  >= Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^if  ( fnn.getType (  )  == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( v == null )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( fnDef == null || fnDef.getType() != FUNCTION )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( fnDef == null )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( fnDef.getType (  )  != FUNCTION )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^if  ( fn .getString (  )   == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^if  ( fn.getType (  )  == Token.0 )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( v != null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^if  ( v == true )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P9_Replace_Statement]^if  ( fi == null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P15_Unwrap_Block]^return ;^137^138^139^^^122^152^if  ( v == null )  { return; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P16_Remove_Block]^^137^138^139^^^122^152^if  ( v == null )  { return; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( fnDef == null && fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( fnDef != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P2_Replace_Operator]^if  ( fnDef == null || fnDef.getType (  )  == Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^if  ( parent == null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( fnDef == null ) {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  (  fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P6_Replace_Expression]^if  ( fnDef.getType (  )  != FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^if  ( fnDef == null || fnDef .getString (  )   != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^if  ( fnDef == true || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P15_Unwrap_Block]^return ;^142^143^^145^146^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P16_Remove_Block]^^142^143^^145^146^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P1_Replace_Type]^char fnName = fn.getchar (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^String parentName = fn.getString (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^String fnName = fn .getFirstChild (  )  ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^String argName = a.getString (  ) ;String fnName = fn.getString (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^Scope.Var v = t.getScope (  )  .getNext (  )  ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^Scope.Var v = t .getCompiler (  )  .getVar ( fnName ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^Node fnDef = v .getInputName (  )  ;^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^Node fn = n.getFirstChild (  ) ;Node fnDef = v.getInitialValue (  ) ;^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( parent, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo (  v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^FunctionInfo f = process ( fnDef, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^FunctionInfo fi = functionInfos.get ( fn ) ;FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^FunctionInfo o =  ( FunctionInfo )  other;FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^fnDef .getString (  )   != Token.FUNCTION )  {^143^^^^^128^158^fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^143^144^145^^^128^158^fnDef.getType (  )  != Token.FUNCTION )  {  return;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^FunctionInfo f = getFunctionInfo ( fnDef, v .getInitialValue (  )   ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( parent, fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall (  fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n,  Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) ,  level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) , t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( fnName, n, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, t, Collections.singletonList ( f ) , fnName, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( f, nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, levelnName, Collections.singletonList ( f ) , t, f ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^if  ( v == false )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^if  ( fnDef == this || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^Node fn = parent.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P7_Replace_Invocation]^Node fn = n .getString (  )  ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^Node fnDef = v.getInitialValue (  ) ;Node fn = n.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P11_Insert_Donor_Statement]^Node args = fn.getFirstChild (  ) .getNext (  ) ;Node fn = n.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^String parentName = fn .getFirstChild (  )  ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P8_Replace_Mix]^switch  ( parent .getString (  )   )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P14_Delete_Statement]^^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, f, Collections.singletonList ( fnName ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P5_Replace_Variable]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[P1_Replace_Type]^short  count = n.getChildCount (  )  - 1;^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^int count = n.getChildCount (  )   <<  1;^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^int count = n.getChildCount (  )  - args;^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^boolean matched = true;^163^^^^^161^189^boolean matched = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^boolean hasVarArgs = false;boolean matched = false;^163^^^^^161^189^boolean matched = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^short  minArgs = Integer.MAX_VALUE;^165^^^^^161^189^int minArgs = Integer.MAX_VALUE;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^int maxArgs = Integer.MIN_VALUE;int minArgs = Integer.MAX_VALUE;^165^^^^^161^189^int minArgs = Integer.MAX_VALUE;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^short  maxArgs = Integer.MIN_VALUE;^166^^^^^161^189^int maxArgs = Integer.MIN_VALUE;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^int minArgs = Integer.MAX_VALUE;int maxArgs = Integer.MIN_VALUE;^166^^^^^161^189^int maxArgs = Integer.MIN_VALUE;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^if  ( count >= requiredCount ||  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^if  ( count > requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^if  ( count >= requiredCount &&  ( count <= f.args && f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^if  ( count >= requiredCount &&  ( count < f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( optionalArgs >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( count >= requiredCount &&  ( count <= result || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( count >= requiredCount &&  ( count <= f.args || matched )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( requiredCount >= count &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( count >= requiredCount &&  ( count <= f.hasVarArgs.args || f )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( count >= f.args &&  ( count <= requiredCount || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( count >= requiredCount &&  ( count <= f.args ) {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  (  f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( count >= requiredCount )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( (count <= f.args || f.hasVarArgs) )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( count <= f.args )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P15_Unwrap_Block]^matched = true; break;^170^171^172^173^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  { matched = true; break; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P16_Remove_Block]^^170^171^172^173^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  { matched = true; break; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^matched = false;^171^^^^^161^189^matched = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min ( result, requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min ( minArgs, optionalArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min (  requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min ( minArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min ( requiredCount, minArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^minArgs = Math.max ( minArgs, requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^minArgs =  Math.min ( null, requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( result, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs, matched ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max (  f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( f, maxArgs.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs, f.args ? Integer.MAX_VALUE : f.hasVarArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( f.args, f.hasVarArgs ? Integer.MAX_VALUE : maxArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^maxArgs  =  f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^maxArgs  =  Integer.MAX_VALUE ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^short  requiredCount = f.args - f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^int requiredCount = f.args  ^  f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^int requiredCount = optionalArgs - f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^int requiredCount = f.args - minArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^int requiredCount = f.optionalArgs.args - f;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^int requiredCount = f.optionalArgs - f.args;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^minArgs = Math.min ( minArgs, result ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( optionalArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.optionalArgs : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : optionalArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( !hasVarArgs )  {^179^^^^^161^189^if  ( !matched )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( " and no more than " + maxArgs + " argument(s)" )  {^179^^^^^161^189^if  ( !matched )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^if  ( " and no more than " + maxArgs )  {^179^^^^^161^189^if  ( !matched )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, VAR_ARGS_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make (  n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t,  level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n,  WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level,  fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, WRONG_ARGUMENT_COUNT_ERROR, level, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^t .getScope (  )  .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( result ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, VAR_ARGS_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make (  n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t,  level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n,  WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR,  String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level,  fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( WRONG_ARGUMENT_COUNT_ERROR, n, level, t, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, level, n, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( minArgs ) , String.valueOf ( count ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, count, fnName, String.valueOf ( WRONG_ARGUMENT_COUNT_ERROR ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^JSError .make ( t , n , level , VAR_ARGS_ERROR , fnName , fnName , fnName )  ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( requiredCount ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs ! =  "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs ! =  " and no more than " + maxArgs + " argument ( s ) " ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^String.valueOf ( result ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^String.valueOf ( count ) , String.valueOf ( result ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( fnName, n, level, WRONG_ARGUMENT_COUNT_ERROR, t,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, fnName, WRONG_ARGUMENT_COUNT_ERROR,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^t.getCompiler (  )  .getNext (  )  ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^t.getCompiler (  ) .report ( JSError .make ( t , n , level , WRONG_ARGUMENT_COUNT_ERROR , fnName , fnName , fnName )  ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( level, n, t, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, count, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( n ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, count, String.valueOf ( fnName ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^JSError.make ( t, n, level, minArgs, fnName, String.valueOf ( count ) , String.valueOf ( WRONG_ARGUMENT_COUNT_ERROR ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^String.valueOf ( optionalArgs ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^String.valueOf ( count ) , String.valueOf ( requiredCount ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^FunctionInfo fi = fn.get ( functionInfos ) ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;FunctionInfo fi = functionInfos.get ( fn ) ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^FunctionInfo o =  ( FunctionInfo )  other;FunctionInfo fi = functionInfos.get ( fn ) ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^FunctionInfo fi = functionInfos .put ( fn , fi )  ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^if  ( fi != null )  {^202^^^^^200^207^if  ( fi == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^if  ( fi == true )  {^202^^^^^200^207^if  ( fi == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P9_Replace_Statement]^if  ( v == null )  {^202^^^^^200^207^if  ( fi == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P15_Unwrap_Block]^fi = com.google.javascript.jscomp.FunctionCheck.createFunctionInfo(compiler, fn, fnSourceName); functionInfos.put(fn, fi);^202^203^204^205^^200^207^if  ( fi == null )  { fi = createFunctionInfo ( compiler, fn, fnSourceName ) ; functionInfos.put ( fn, fi ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P16_Remove_Block]^^202^203^204^205^^200^207^if  ( fi == null )  { fi = createFunctionInfo ( compiler, fn, fnSourceName ) ; functionInfos.put ( fn, fi ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo ( compiler,  fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo ( compiler, fn ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo (  fn, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo ( fn, compiler, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo ( fnSourceName, fn, compiler ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^fi = FunctionCheck ( compiler, fn, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^fi =  createFunctionInfo ( compiler, null, nullSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( fi == null )  {     fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;     functionInfos.put ( fn, fi ) ; }^203^^^^^200^207^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^fi = createFunctionInfo ( compiler, fnSourceName, fn ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^functionInfos.put (  fi ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^functionInfos.put ( fn ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^functionInfos.put ( fi, fn ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^functionInfos .get ( fn )  ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^Preconditions.checkState ( fn.getType (  )  <= Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^Preconditions.checkState ( varArg.getType (  )  == Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^Preconditions.checkState ( fn .getString (  )   == Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^Preconditions.checkState ( varArg .getString (  )   == Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P12_Insert_Condition]^if  ( fn.getType (  )  == Token.NAME )  { Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ; }^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P12_Insert_Condition]^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ; }^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^short  numArgs = 0, optArgs = 0;^224^^^^^209^239^int numArgs = 0, optArgs = 0;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^int numArgs = requiredCount, optArgs = requiredCount;^224^^^^^209^239^int numArgs = 0, optArgs = 0;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^int numArgs = optionalArgs, optArgs = optionalArgs;^224^^^^^209^239^int numArgs = 0, optArgs = 0;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^boolean hasVarArgs = true;^225^^^^^210^240^boolean hasVarArgs = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^Node varArg = null;boolean hasVarArgs = false;^225^^^^^210^240^boolean hasVarArgs = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^boolean matched = false;boolean hasVarArgs = false;^225^^^^^210^240^boolean hasVarArgs = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^Node args = varArg.getFirstChild (  ) .getNext (  ) ;^226^^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^Node args = fn.getFirstChild (  ) .getVar (  ) ;^226^^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^Node args = fn.getFirstChild (  )  .getVar ( argName )  ;^226^^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^Node fn = n.getFirstChild (  ) ;Node args = fn.getFirstChild (  ) .getNext (  ) ;^226^^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^226^227^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ; Node varArg = null;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^boolean hasVarArgs = false;Node varArg = null;^227^^^^^212^242^Node varArg = null;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( matched )  {^232^^^^^217^247^if  ( hasVarArgs )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(fnSourceName, a, com.google.javascript.jscomp.FunctionCheck.VAR_ARGS_ERROR));^232^233^234^235^^217^247^if  ( hasVarArgs )  {  compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P16_Remove_Block]^^232^233^234^235^^217^247^if  ( hasVarArgs )  {  compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {     optArgs++; }else     if  ( optArgs > 0 )  {         compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;     }^232^^^^^217^247^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( optArgs > 0 )  {     compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^232^^^^^217^247^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( argName, a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, varArg, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, a, WRONG_ARGUMENT_COUNT_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make (  a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName,  VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, a )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, VAR_ARGS_ERROR, a )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VAR_ARGS_ERROR, a, fnSourceName )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^if  ( varArg.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^237^^^^^222^252^if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^if  ( a .getType (  )   )  {^237^^^^^222^252^if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {     optArgs++; }else     if  ( optArgs > 0 )  {         compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;     }^237^^^^^222^252^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^} else if  ( varArg.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^242^^^^^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^} else {^242^^^^^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^} else if  ( a .getType (  )   )  {^242^^^^^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P15_Unwrap_Block]^optArgs++;^242^243^244^^246^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  { optArgs++; } else if  ( optArgs > 0 )  { compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P16_Remove_Block]^^242^243^244^^246^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  { optArgs++; } else if  ( optArgs > 0 )  { compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {     varArg = a;     hasVarArgs = true;     numArgs--; }else     if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {         optArgs++;     }else         if  ( optArgs > 0 )  {             compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;         }^242^^^^^227^257^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( optArgs > 0 )  {     compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^242^^^^^227^257^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( hasVarArgs )  {     compiler.report ( make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^242^^^^^227^257^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^} else if  ( optArgs < 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > args )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^} else if  ( requiredCount > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P6_Replace_Expression]^} else {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^}  if  ( requiredCount > 2 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(fnSourceName, a, com.google.javascript.jscomp.FunctionCheck.OPTIONAL_ARGS_ERROR));^244^245^246^247^^229^259^} else if  ( optArgs > 0 )  {  compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P16_Remove_Block]^^244^245^246^247^^229^259^} else if  ( optArgs > 0 )  {  compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ; }^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {     optArgs++; }else     if  ( optArgs > 0 )  {         compiler.report ( make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;     }^244^^^^^229^259^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P13_Insert_Block]^if  ( hasVarArgs )  {     compiler.report ( make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ; }^244^^^^^229^259^[Delete]^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( argName, a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, varArg, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, a, WRONG_ARGUMENT_COUNT_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make (  a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName,  OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, a )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( fnSourceName, OPTIONAL_ARGS_ERROR, a )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^compiler .getNext (  )  ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( OPTIONAL_ARGS_ERROR, a, fnSourceName )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( a, fnSourceName, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > maxArgs )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^} else if  ( result > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^compiler.report ( JSError .make ( null , args , level , VAR_ARGS_ERROR , fnSourceName , fnSourceName , argName )   ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^varArg = varArg;^238^^^^^223^253^varArg = a;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^varArg =  fn;^238^^^^^223^253^varArg = a;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^hasVarArgs = true;varArg = a;^238^^^^^223^253^varArg = a;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^hasVarArgs = false;^239^^^^^224^254^hasVarArgs = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^varArg = a;hasVarArgs = true;^239^^^^^224^254^hasVarArgs = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^this.args = args;hasVarArgs = true;^239^^^^^224^254^hasVarArgs = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^this.hasVarArgs = hasVarArgs;hasVarArgs = true;^239^^^^^224^254^hasVarArgs = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > count )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^} else if  ( optionalArgs > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^} else if  ( optArgs >= 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > result )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^for  ( Node a = args.getFirstChild (  ) ; a == null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^for  ( Node a = varArg.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^for  ( Node varArg = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^for  ( Node args = a.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^compiler.report ( JSError.make ( a, fnSourceName, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > -6 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^}  if  ( optArgs > 3 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( null , args , level , OPTIONAL_ARGS_ERROR , argName , argName , argName )   ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^}  if  ( optArgs > 0 - 2 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( null , varArg , level , WRONG_ARGUMENT_COUNT_ERROR , argName , argName , fnSourceName )   ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^} else if  ( optArgs == 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P3_Replace_Literal]^} else if  ( optArgs > optionalArgs )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^} else if  ( numArgs > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^char argName = a.getchar (  ) ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^String varArgrgName = a.getString (  ) ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^String argName = a .getFirstChild (  )  ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^String varArgrgName = a .getFirstChild (  )  ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P11_Insert_Donor_Statement]^String fnName = fn.getString (  ) ;String argName = a.getString (  ) ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  > Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^Preconditions.checkState ( varArg.getType (  )  == Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^Preconditions.checkState ( varArg .getString (  )   == Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P12_Insert_Condition]^if  ( fn.getType (  )  == Token.NAME )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; }^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^Preconditions.checkState ( a .getString (  )   == Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P14_Delete_Statement]^^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^for  ( Node a =  varArgrgs.getFirstChild (  ) ; varArg !^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^for  ( Node a = varArg .getString (  )  ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P7_Replace_Invocation]^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a .getVar ( fnSourceName )   )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  <= Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P4_Replace_Constructor]^return new FunctionInfo (  optArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P4_Replace_Constructor]^return new FunctionInfo ( numArgs,  hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P4_Replace_Constructor]^return new FunctionInfo ( numArgs, optArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( numArgs, result, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( numArgs, optArgs, matched ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( optArgs, numArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( numArgs, hasVarArgs, optArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( result, optArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( numArgs, optionalArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^return new FunctionInfo ( hasVarArgs, optArgs, numArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^final  short  args;^81^^^^^76^86^final int args;^[CLASS] FunctionInfo  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P1_Replace_Type]^final  short  optionalArgs;^82^^^^^77^87^final int optionalArgs;^[CLASS] FunctionInfo  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P8_Replace_Mix]^boolean hasVarArgs;^83^^^^^78^88^final boolean hasVarArgs;^[CLASS] FunctionInfo  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[P5_Replace_Variable]^this.args = optionalArgs;^86^^^^^85^89^this.args = args;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P8_Replace_Mix]^this.args =  null;^86^^^^^85^89^this.args = args;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.optionalArgs = optionalArgs;this.args = args;^86^^^^^85^89^this.args = args;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.hasVarArgs = hasVarArgs;this.args = args;^86^^^^^85^89^this.args = args;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P5_Replace_Variable]^this.optionalArgs = args;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.args = args;this.optionalArgs = optionalArgs;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.hasVarArgs = hasVarArgs;this.optionalArgs = optionalArgs;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P8_Replace_Mix]^this.hasVarArgs =  null;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.args = args;this.hasVarArgs = hasVarArgs;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^this.optionalArgs = optionalArgs;this.hasVarArgs = hasVarArgs;^88^^^^^85^89^this.hasVarArgs = hasVarArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[P2_Replace_Operator]^if  ( ! ( other  <<  FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P8_Replace_Mix]^if  (  ( other instanceof FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P15_Unwrap_Block]^return false;^92^93^94^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  { return false; }^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P16_Remove_Block]^^92^93^94^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  { return false; }^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P3_Replace_Literal]^return true;^93^^^^^91^101^return false;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args == args || o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args < args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args == args && o.optionalArgs != optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P2_Replace_Operator]^return o.args != args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return optionalArgs == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return hasVarArgs.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == o;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return optionalArgs == args && o.optionalArgs == o.args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return args == o.args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return o.optionalArgs == args && o.args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && optionalArgs == o.optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return o.hasVarArgs == args && o.optionalArgs == optionalArgs && o.args == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P5_Replace_Variable]^return o.args == args && o.optionalArgs == hasVarArgs && o.hasVarArgs == optionalArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P8_Replace_Mix]^return o.args ;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[P1_Replace_Type]^short  result = 17;^104^^^^^103^109^int result = 17;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^int result = result;^104^^^^^103^109^int result = 17;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^result = 37 / result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^result = optionalArgs * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * optionalArgs + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * result + optionalArgs;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P8_Replace_Mix]^result = 38 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result + optionalArgs;result = 37 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;result = 37 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^result = 37 + result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^result = 35 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * args + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * result + args;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P8_Replace_Mix]^result = 1 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result + args;result = 37 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;result = 37 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^result = 37 * result +   instanceof   ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^result = 37 / result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^result = result * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^result = 37 * result +  ( hasVarArgs ? -4 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^result = 37 * result +  ( hasVarArgs ? 1 : args ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * optionalArgs +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P6_Replace_Expression]^result  =  0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P6_Replace_Expression]^result  =  1 ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P8_Replace_Mix]^result = 37L * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result + optionalArgs;result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P11_Insert_Donor_Statement]^result = 37 * result + args;result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return optionalArgs;^108^^^^^103^109^return result;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^return args + " total argument ( s )  &&  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^return args + " total argument ( s )  >  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^return args + " total argument ( s )  ==  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^return args + " total argument ( s )  >>  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^return args  ||  " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^return args + " total argument ( s )  " + " which" + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^return args + " total argument ( s )  " + "of which " + optionalArgs + "e optionais/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P3_Replace_Literal]^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? "g var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return result + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return args + " total argument ( s )  " + "of which " + result + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return hasVarArgs + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( args ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P5_Replace_Variable]^return args + " total argument ( s )  " + "of which " + hasVarArgs + " is/are optional" + ( optionalArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P8_Replace_Mix]^return args  ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[P2_Replace_Operator]^if  ( fn.getType (  )  < Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( fn.getType (  )  != Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( fn.getType (  )  <= Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( v == null )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( fnDef == null || fnDef.getType() != FUNCTION )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( fnDef == null )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( fnDef.getType (  )  != FUNCTION )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^if  ( fn .getString (  )   == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^if  ( fn.getType (  )  == Token.2 )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( v != null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^if  ( v == true )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P15_Unwrap_Block]^return ;^137^138^139^^^122^152^if  ( v == null )  { return; }^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P16_Remove_Block]^^137^138^139^^^122^152^if  ( v == null )  { return; }^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( fnDef == null && fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( fnDef != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P2_Replace_Operator]^if  ( fnDef == null || fnDef.getType (  )  == Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^if  ( parent == null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( fnDef == null ) {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  (  fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P6_Replace_Expression]^if  ( fnDef.getType (  )  != FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^if  ( fnDef == this || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P15_Unwrap_Block]^return ;^142^143^^145^146^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P16_Remove_Block]^^142^143^^145^146^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  { return; }^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P1_Replace_Type]^char fnName = fn.getchar (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^String parentName = fn.getString (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^Node fnDef = v .getInputName (  )  ;^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^Node fnDef = null.getInitialValue (  ) ;^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P11_Insert_Donor_Statement]^Node fn = n.getFirstChild (  ) ;Node fnDef = v.getInitialValue (  ) ;^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( parent, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo (  v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^141^^^^^126^156^Node fnDef = v.getInitialValue (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^143^144^145^^^128^158^fnDef.getType (  )  != Token.FUNCTION )  {  return;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^FunctionInfo f = getFunctionInfo ( fnDef, v .getInitialValue (  )   ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( parent, fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall (  fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n,  Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) ,  level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) , t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( fnName, n, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, level, Collections.singletonList ( f ) , t, fnName ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( f, nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( level, fnName, Collections.singletonList ( f ) , t, n ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^if  ( 4 == null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^if  ( v == false )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^if  ( fnDef == null || fnDef .getString (  )   != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^if  ( fnDef == true || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^Node fn = parent.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P11_Insert_Donor_Statement]^Node fnDef = v.getInitialValue (  ) ;Node fn = n.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^String fnName = fn .getFirstChild (  )  ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P8_Replace_Mix]^switch  ( parent .getString (  )   )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^Node fn = n .getString (  )  ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P14_Delete_Statement]^^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P7_Replace_Invocation]^fnDef .getString (  )   != Token.FUNCTION )  {^143^^^^^128^158^fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^FunctionInfo f = getFunctionInfo ( fnDef, 3.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( t, fnName, Collections.singletonList ( f ) , n, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[P5_Replace_Variable]^checkCall ( n, levelnName, Collections.singletonList ( f ) , t, f ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
