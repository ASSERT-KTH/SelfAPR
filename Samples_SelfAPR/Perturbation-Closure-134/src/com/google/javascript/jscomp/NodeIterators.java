[P8_Replace_Mix]^private  Stack<Node> ancestors = new Stack<Node> (  ) ;^44^^^^^39^49^private final Stack<Node> ancestors = new Stack<Node> (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [VARIABLES] 
[P8_Replace_Mix]^private  FunctionlessLocalScope iterator;^155^^^^^150^160^private final FunctionlessLocalScope iterator;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [VARIABLES] 
[P1_Replace_Type]^private final char varName;^156^^^^^151^161^private final String varName;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion   [VARIABLES] 
[P2_Replace_Operator]^Preconditions.checkArgument ( ancestors.length >= 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P14_Delete_Statement]^^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( ancestors.length > 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( ancestors.length > 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( ancestors.length > 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( ancestors.length > 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( ancestors.length > 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P5_Replace_Variable]^if  ( lookAhead.getType (  )  == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.iterator )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P8_Replace_Mix]^if  ( lookAhead .getString (  )   == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P15_Unwrap_Block]^break;^55^56^57^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  { break; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P16_Remove_Block]^^55^56^57^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  { break; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( FUNCTION )  )  {     return next (  ) ; }^55^^^^^51^61^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P3_Replace_Literal]^this.ancestors.add ( 1, n ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P5_Replace_Variable]^this.ancestors.add ( 0, lookAhead ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P5_Replace_Variable]^this.ancestors.add ( 0 ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P8_Replace_Mix]^this.ancestors .Stack (  )  ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P14_Delete_Statement]^^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;this.ancestors.add ( 0, n ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[P2_Replace_Operator]^Preconditions.checkArgument ( nameNode.getType (  )  != Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ancestors.length > 0 ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^Node valueNode = NodeUtil.isStatement ( nameNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^Node valueNode = NodeUtil.getAssignedValue ( n ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^Node valueNode = NodeUtil .nodeTypeMayHaveSideEffects ( valueNode )  ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^Node valueNode = NodeUtil.isStatement ( valueNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^195^196^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ; this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P1_Replace_Type]^this.varName = nameNode.getchar (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^this.varName = valueNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^this.varName = nameNode .getFirstChild (  )  ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^int type = nextNode.getType (  ) ;this.varName = nameNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^this.valueHasSideEffects = valueNode != null || NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^this.valueHasSideEffects = valueNode == null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^this.valueHasSideEffects = nameNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^this.valueHasSideEffects = valueNode != null && NodeUtil.nodeTypeMayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^this.valueHasSideEffects = valueNode != true && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^NodeUtil.mayHaveSideEffects ( nameNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^NodeUtil.nodeTypeMayHaveSideEffects ( valueNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^198^199^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ; this.iterator = iterator;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^this.iterator =  null;^199^^^^^193^201^this.iterator = iterator;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^advanceLookAhead ( false ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^advanceLookAhead ( false ) ;advanceLookAhead ( true ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  == 1 || ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  != 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  != null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ! ( ancestors.size (  )  == -1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ! ( ancestors.size() + 1  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ! ( ancestors.Stack (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ! ( ancestors.size (  )  == 1 && ancestors.pop (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ! ( ancestors.size() - 1  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ! ( ancestors.size() + 7  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ! ( ancestors.size() - 4  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^Node current = ancestors.peek (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node curNode = iterator.current (  ) ;Node current = ancestors.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^Node current = this.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;Node current = ancestors.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;Node current = ancestors.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^70^100^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  <= Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.iterator )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P15_Unwrap_Block]^return next();^93^94^95^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P16_Remove_Block]^^93^94^95^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  (  ( curNode.getType (  )  )  ==  ( NAME )  )  &&  ( varName.equals ( curNode.getString (  )  )  )  )  {     lookAhead = null;     return ; }^93^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^93^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return hasNext (  ) ;^94^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^94^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = valueNode.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^current = current .getString (  )  ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = current.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = nameNode.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^89^90^^^^70^100^current = current.getFirstChild (  ) ; ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^&& nextNode == nextParent.getFirstChild (  )  ) ;current = current.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^ancestors.push ( nameNode ) ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^ancestors.push ( valueNode ) ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^if  ( current .getString (  )   == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getNext (  )  != null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( nameNode.getNext (  )  == null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P6_Replace_Expression]^if  ( current.getType() == FUNCTION )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^if  ( valueNode.getNext (  )  == true )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.FUNCTION )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^while  ( nameNode.hasChildren (  )  )  {^88^^^^^72^97^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^72^97^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P15_Unwrap_Block]^return next();^93^94^95^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P16_Remove_Block]^^93^94^95^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  (  ( curNode.getType (  )  )  ==  ( NAME )  )  &&  ( varName.equals ( curNode.getString (  )  )  )  )  {     lookAhead = null;     return ; }^93^^^^^72^97^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^93^^^^^72^97^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return hasNext (  ) ;^94^^^^^72^97^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^94^^^^^72^97^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = valueNode.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = current.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = nameNode.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^89^90^^^^72^97^current = current.getFirstChild (  ) ; ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^&& nextNode == nextParent.getFirstChild (  )  ) ;current = current.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^ancestors.push ( valueNode ) ;^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^ancestors .peek (  )  ;^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^if  ( current .getString (  )   == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.iterator )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P15_Unwrap_Block]^return next();^84^85^86^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P16_Remove_Block]^^84^85^86^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  (  ( curNode.getType (  )  )  ==  ( NAME )  )  &&  ( varName.equals ( curNode.getString (  )  )  )  )  {     lookAhead = null;     return ; }^84^^^^^72^97^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^84^^^^^72^97^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return hasNext (  ) ;^85^^^^^72^97^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^85^^^^^72^97^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  >= Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.iterator )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = valueNode.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^current =  nameNode.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^return next (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^ancestors.push ( valueNode ) ;^81^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^81^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^88^89^^^^72^97^while  ( current.hasChildren (  )  )  { current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.iterator )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^if  ( current .getString (  )   == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P15_Unwrap_Block]^return next();^76^77^78^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P16_Remove_Block]^^76^77^78^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  (  ( curNode.getType (  )  )  ==  ( NAME )  )  &&  ( varName.equals ( curNode.getString (  )  )  )  )  {     lookAhead = null;     return ; }^76^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^76^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return hasNext (  ) ;^77^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^77^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^current = ancestors.pop (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^current ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node current = ancestors.pop (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  <= Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.iterator )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P15_Unwrap_Block]^return next();^84^85^86^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P16_Remove_Block]^^84^85^86^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  (  ( curNode.getType (  )  )  ==  ( NAME )  )  &&  ( varName.equals ( curNode.getString (  )  )  )  )  {     lookAhead = null;     return ; }^84^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^84^^^^^70^100^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return hasNext (  ) ;^85^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^85^^^^^70^100^return next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^if  ( current.getType (  )  > Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^current  =  current ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = valueNode.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^current = nameNode.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^return next (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^ancestors.push ( valueNode ) ;^81^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^ancestors.push ( nameNode ) ;^81^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^81^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^while  ( nameNode.hasChildren (  )  )  {^88^^^^^70^100^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^88^89^^^^70^100^while  ( current.hasChildren (  )  )  { current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^ancestors .peek (  )  ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^return valueNode;^99^^^^^70^100^return current;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^return ;^104^^^^^103^105^throw new UnsupportedOperationException  (" ")  ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ancestors.pop (  ) ;^111^^^^^110^112^return ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] current [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^111^^^^^110^112^return ancestors.peek (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] current [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^return ancestors.size (  )  > 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   ==  2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ancestors.size (  )  >=  ? ancestors.get ( ancestors.size (  )  -  )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ancestors.size() - 7  >= 2 ? ancestors.get ( ancestors.size() - 7  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P6_Replace_Expression]^return ancestors.size (  )  > =  null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P6_Replace_Expression]^return ancestors.size (  )  > =  ancestors.get ( ancestors.size (  )  - 2 )  ;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ancestors.Stack (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ancestors .Stack (  )   >= 2 ? ancestors.get ( ancestors^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ancestors.size (  )  >= 2 ? ancestors.push ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^return ancestors.size (  )  >= 2 ? ancestors .peek (  )   : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^return ancestors.size() - 3  >= 2 ? ancestors.get ( ancestors.size() - 3  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^ancestors.get ( ancestors.size (  )   ==  2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^ancestors.get ( ancestors.size (  )   )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^ancestors.get ( ancestors.size() - 8  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^ancestors.push ( ancestors.size (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P7_Replace_Invocation]^ancestors.get ( ancestors.Stack (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P8_Replace_Mix]^ancestors.get ( null.size (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P11_Insert_Donor_Statement]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;ancestors.get ( ancestors.size (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P3_Replace_Literal]^ancestors.get ( ancestors.size() + 8  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P5_Replace_Variable]^List<Node> list = Lists.newArrayList ( this ) ;^127^^^^^126^130^List<Node> list = Lists.newArrayList ( ancestors ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^127^^^^^126^130^List<Node> list = Lists.newArrayList ( ancestors ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P14_Delete_Statement]^^128^^^^^126^130^Collections.reverse ( list ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[P2_Replace_Operator]^Preconditions.checkArgument ( var.getType (  )  <= Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( name.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Preconditions.checkArgument ( var .getString (  )   == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^165^166^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ; Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ancestors.length > 0 ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isStatement ( valueNode )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.getAssignedValue ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ancestors.length > 0 ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isStatement ( name )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return return  new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion (  new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name,  block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, nameNode )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, name, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( name, var, name )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, block, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, name,  new FunctionlessLocalScope ( assign, expr, block )   ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^new FunctionlessLocalScope ( name, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( name,  block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( name, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( var, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( name, var, valueNode )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( var, name, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( name, block, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^name, new FunctionlessLocalScope ( valueNode, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^Preconditions.checkArgument ( assign.getType (  )  <= Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( name.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( assign.getType (  )  == Token.0 ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Preconditions.checkArgument ( assign .getString (  )   == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^181^182^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ; Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ancestors.length > 0 ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^Preconditions.checkArgument ( expr.getType (  )  != Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( var.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ancestors.length > 0 ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^Preconditions.checkArgument ( name.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion (  new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope (  expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign,  block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( nameNode, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, nameNode, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, var )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( assign, expr, name )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( expr, new FunctionlessLocalScope ( assign, name, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( expr, assign, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, block, expr )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( var, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, name,  new FunctionlessLocalScope ( name, var, block )   ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope (  expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( assign,  block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( assign, expr )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( var, expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( assign, var, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( assign, expr, nameNode )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( expr, assign, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^name, new FunctionlessLocalScope ( valueNode, expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^return lookAhead == null;^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return name != null;^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^return lookAhead ;^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P12_Insert_Condition]^if  ( lookAhead == null )  { return lookAhead != null; }^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^Node next = var;^210^^^^^209^213^Node next = lookAhead;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P3_Replace_Literal]^advanceLookAhead ( true ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^211^212^^^^209^213^advanceLookAhead ( false ) ; return next;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^advanceLookAhead ( true ) ;advanceLookAhead ( false ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^return n;^212^^^^^209^213^return next;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^return ;^217^^^^^216^218^throw new UnsupportedOperationException  (" ")  ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( !valueHasSideEffects )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( curNode.getType() == NAME && getString()) )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == NAME )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( !isVarDeclaration )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^if ((lookAhead) == null) {    return ;}; com.google.javascript.rhino.Node curNode = iterator.current(); if (((curNode.getType()) == (com.google.javascript.rhino.Token.NAME)) && (varName.equals(curNode.getString()))) {    lookAhead = null;    return ;};^221^222^223^224^^206^236^if  ( !atStart )  { if  ( lookAhead == null )  { return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^221^222^223^224^^206^236^if  ( !atStart )  { if  ( lookAhead == null )  { return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( lookAhead != null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( nameNode == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( lookAhead == this )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P9_Replace_Statement]^if  ( nextParent == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^return ;^222^223^224^^^207^237^if  ( lookAhead == null )  { return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( lookAhead == null )  { return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  ( blocked )  {     lookAhead = null;     return ; }^222^^^^^207^237^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( curNode.getType (  )  >= Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( nextNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( varName.getType (  )  == Token.NAME && curNode.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == Token.NAME ) {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  (  varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == NAME )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( nextNode .getString (  )   == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P9_Replace_Statement]^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^lookAhead = null; return ;^229^230^231^232^233^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^229^230^231^232^233^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( FUNCTION )  )  {     return next (  ) ; }^229^^^^^214^244^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = false;^231^^^^^229^233^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^231^^^^^229^233^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^231^^^^^229^233^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = this;^231^^^^^216^246^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^231^^^^^216^246^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Node curNode = iterator.next (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node nextParent = iterator.currentParent (  ) ;Node curNode = iterator.current (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node current = ancestors.pop (  ) ;Node curNode = iterator.current (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node nextNode = iterator.next (  ) ;Node curNode = iterator.current (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Node curNode = iterator .currentParent (  )  ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( next.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^varName.equals ( next.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^varName.equals ( var.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^230^231^^^^215^245^varName.equals ( curNode.getString (  )  )  )  { lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^varName.equals ( nextNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^varName.equals ( nameNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( curNode.getType (  )  > Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = this;^231^^^^^229^233^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = false;^231^^^^^216^246^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^231^^^^^216^246^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^varName.equals ( curNode .getFirstChild (  )   )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^if  ( !iterator.next (  )  )  {^236^^^^^221^251^if  ( !iterator.hasNext (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^lookAhead = null; return ;^236^237^238^239^^221^251^if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^236^237^238^239^^221^251^if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  ( blocked )  {     lookAhead = null;     return ; }^236^^^^^221^251^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = false;^237^^^^^222^252^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^237^^^^^222^252^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = this;^237^^^^^222^252^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^237^^^^^222^252^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Node nextNode = iterator.hasNext (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node nextParent = iterator.currentParent (  ) ;Node nextNode = iterator.next (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node curNode = iterator.current (  ) ;Node nextNode = iterator.next (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^241^242^^^^226^256^Node nextNode = iterator.next (  ) ; Node nextParent = iterator.currentParent (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^Node nextParent = iterator.current (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node curNode = iterator.current (  ) ;Node nextParent = iterator.currentParent (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Node nextNode = iterator.next (  ) ;Node nextParent = iterator.currentParent (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^242^243^^^^227^257^Node nextParent = iterator.currentParent (  ) ; int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P1_Replace_Type]^long  type = nextNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^int type = name.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^int type = nextNode .getString (  )  ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^int type = valueNode .getString (  )  ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^this.varName = nameNode.getString (  ) ;int type = nextNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( type == NAME )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent == null )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( type == Token.NAME || !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( type >= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( type <= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( type != Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( name.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( nextNode == Token.NAME && !varName.equals ( type.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( type == Token.NAME ) {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  (  !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( type == NAME )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent == null )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P9_Replace_Statement]^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( nextParent != null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( var == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( nextParent == this )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P9_Replace_Statement]^if  ( lookAhead == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( !assignsName ) {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  (  !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^blocked = true;^258^259^260^^^251^261^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^258^259^260^^^251^261^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P3_Replace_Literal]^blocked = false;^259^^^^^251^261^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent .getString (  )   == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent .getString (  )   ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( FUNCTION )  )  {     return next (  ) ; }^254^^^^^251^261^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  >= Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean isVarDeclaration =  ( nextParent .getString (  )   == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^&& nextNode == name.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^255^256^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ; boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;&& nextNode == nextParent.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( valueNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P3_Replace_Literal]^blocked = false;^252^^^^^237^267^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( !assignsName ) {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  (  !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^blocked = true;^258^259^260^^^243^273^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^258^259^260^^^243^273^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P3_Replace_Literal]^blocked = false;^259^^^^^244^274^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( isVarDeclaration )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^lookAhead = null; return ;^263^264^265^266^^248^278^if  ( blocked )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^263^264^265^266^^248^278^if  ( blocked )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  ( ! ( iterator.hasNext (  )  )  )  {     lookAhead = null;     return ; }^263^^^^^248^278^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  (  ( lookAhead )  == null )  {     return ; }^263^^^^^248^278^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = this;^264^^^^^249^279^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^264^^^^^249^279^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = false;^264^^^^^249^279^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P3_Replace_Literal]^boolean blocked = true;^250^^^^^235^265^boolean blocked = false;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent .getString (  )   == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean assignsName =  ( name.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( FUNCTION )  )  {     return next (  ) ; }^254^^^^^239^269^[Delete]^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  <= Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.this ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean isVarDeclaration =  ( nextParent .getString (  )   == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^&& nextNode == nextParent .getString (  )   ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^&& nextNode == name.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^255^256^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ; boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;&& nextNode == nextParent.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( name.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( next == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( nextParent == true )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( name.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^&& nextNode == nameNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^&& nextNode == nextParent .getString (  )   ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^&& nextNode == nextNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( var .getString (  )   == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( valueHasSideEffects )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = true;^264^^^^^249^279^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^264^^^^^249^279^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && name == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  < Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( valueNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( type == Token.NAME && !varName.equals ( var.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( nextParent.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^if  ( type == Token.NAME && !varName.equals ( nextNode .getFirstChild (  )   )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^&& nextNode == next.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( type > Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( nameNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( nextParent == false )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && name == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^&& nextNode == var.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( next.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent .getString (  )   ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( name == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  > Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( name.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^&& nextNode == next.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  (  !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode > nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  >= Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( next.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( type == Token.NAME && !varName.equals ( next.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^&& nextNode == valueNode.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( nextNode .getString (  )   == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  || type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type >= Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type >= Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type != Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( name )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( type )  && nextNode != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME ) {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  (  type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nodeTypeMayHaveSideEffects(nextNode && type != NAME) )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( type != NAME )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( (type == NAME && nextParent.getType() == CATCH) )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( type == NAME )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P15_Unwrap_Block]^lookAhead = null; return ;^276^277^278^279^280^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P16_Remove_Block]^^276^277^278^279^280^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = this;^278^^^^^276^280^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^278^^^^^276^280^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead = true;^278^^^^^263^293^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^278^^^^^263^293^lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^if  ( NodeUtil .mayHaveSideEffects ( curNode )   && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^|| type == Token.NAME && name.getType (  )  == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P7_Replace_Invocation]^|| type == Token.NAME && nextParent .getString (  )   == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^|| type == Token.NAME && next .getString (  )   == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P14_Delete_Statement]^^277^278^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P5_Replace_Variable]^lookAhead = nextParent;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^lookAhead =  nameNode;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P11_Insert_Donor_Statement]^lookAhead = null;lookAhead = nextNode;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P8_Replace_Mix]^private  Stack<Node> ancestors = new Stack<Node> (  ) ;^44^^^^^39^49^private final Stack<Node> ancestors = new Stack<Node> (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[P2_Replace_Operator]^Preconditions.checkArgument ( ancestors.length < 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P3_Replace_Literal]^Preconditions.checkArgument ( ancestors.length > 5 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P14_Delete_Statement]^^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P15_Unwrap_Block]^break;^55^56^57^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  { break; }^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P16_Remove_Block]^^55^56^57^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  { break; }^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( FUNCTION )  )  {     return next (  ) ; }^55^^^^^51^61^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P7_Replace_Invocation]^if  ( n .getNext (  )   == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P3_Replace_Literal]^this.ancestors.add ( -1, n ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P5_Replace_Variable]^this.ancestors.add ( 0 ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P8_Replace_Mix]^this.ancestors .Stack (  )  ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P14_Delete_Statement]^^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;this.ancestors.add ( 0, n ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  == 1 || ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  != 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P2_Replace_Operator]^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  != null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ! ( ancestors.size (  )  == 7 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ! ( ancestors.size() - 7  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ! ( ancestors.peek (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ! ( ancestors .Stack (  )   == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ! ( ancestors.size (  )  == 1 && ancestors.pop (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P8_Replace_Mix]^return  ( ancestors.peek (  )  ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ! ( ancestors.size() + 0  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P14_Delete_Statement]^^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ! ( ancestors.size() - 1  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ! ( ancestors.size() + 4  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P5_Replace_Variable]^return ! ( 0.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^Node current = ancestors.peek (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;Node current = ancestors.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;Node current = ancestors.pop (  ) ;^71^^^^^70^100^Node current = ancestors.pop (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P15_Unwrap_Block]^return next();^93^94^95^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P16_Remove_Block]^^93^94^95^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^93^^^^^70^100^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^94^^^^^70^100^return next (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^current = current .getType (  )  ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^current =  null.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = current.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^ancestors .peek (  )  ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getNext (  )  != null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P6_Replace_Expression]^if  ( current.getType() == FUNCTION )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^if  ( current.getNext (  )  == true )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.FUNCTION )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^while  ( current .getFirstChild (  )   )  {^88^^^^^72^97^while  ( current.hasChildren (  )  )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  >= Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^if  ( current .getNext (  )   == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P15_Unwrap_Block]^return next();^93^94^95^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P16_Remove_Block]^^93^94^95^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^93^^^^^72^97^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^94^^^^^72^97^return next (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^current =  null.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = current.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^current = current .getType (  )  ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^89^90^^^^72^97^current = current.getFirstChild (  ) ; ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  > Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P15_Unwrap_Block]^return next();^84^85^86^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P16_Remove_Block]^^84^85^86^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^84^^^^^72^97^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^85^^^^^72^97^return next (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^current =  null.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^return next (  ) ;current = current.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^ancestors .peek (  )  ;^81^^^^^72^97^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^81^^^^^72^97^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^if  ( current .getNext (  )   == Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^88^89^^^^72^97^while  ( current.hasChildren (  )  )  { current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^ancestors .peek (  )  ;^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P15_Unwrap_Block]^return next();^76^77^78^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P16_Remove_Block]^^76^77^78^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^76^^^^^70^100^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^77^^^^^70^100^return next (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^current = ancestors.pop (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^current  =  current ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^Node current = ancestors.pop (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^return ancestors.peek (  ) ;current = ancestors.peek (  ) ;^73^^^^^70^100^current = ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^if  ( current .getNext (  )   == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  <= Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P9_Replace_Statement]^if  ( current.getNext (  )  == null )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P15_Unwrap_Block]^return next();^84^85^86^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P16_Remove_Block]^^84^85^86^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  { return next (  ) ; }^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     break; }^84^^^^^70^100^[Delete]^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^85^^^^^70^100^return next (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P2_Replace_Operator]^if  ( current.getType (  )  < Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^if  ( current .getNext (  )   == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^current =  null.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = ancestors.peek (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^current = current.getFirstChild (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P11_Insert_Donor_Statement]^return next (  ) ;current = current.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^81^^^^^70^100^ancestors.push ( current ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^if  ( current .getNext (  )   == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P7_Replace_Invocation]^while  ( current .getFirstChild (  )   )  {^88^^^^^70^100^while  ( current.hasChildren (  )  )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P14_Delete_Statement]^^88^89^^^^70^100^while  ( current.hasChildren (  )  )  { current = current.getFirstChild (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[P8_Replace_Mix]^return ;^104^^^^^103^105^throw new UnsupportedOperationException  (" ")  ;^[CLASS] FunctionlessLocalScope  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ancestors.pop (  ) ;^111^^^^^110^112^return ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] current [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P14_Delete_Statement]^^111^^^^^110^112^return ancestors.peek (  ) ;^[CLASS] FunctionlessLocalScope  [METHOD] current [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P2_Replace_Operator]^return ancestors.size (  )  > 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P2_Replace_Operator]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   !=  2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ancestors.size() - 4  >= 2 ? ancestors.get ( ancestors.size() - 4  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P6_Replace_Expression]^return ancestors.size (  )  > =  null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P6_Replace_Expression]^return ancestors.size (  )  > =  ancestors.get ( ancestors.size (  )  - 2 )  ;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ancestors.peek (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ancestors .Stack (  )   >= 2 ? ancestors.get ( ancestors^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^return ancestors.size (  )  >= 2 ? ancestors.push ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^return ancestors.size() + 1  >= 2 ? ancestors.get ( ancestors.size() + 1  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P5_Replace_Variable]^return 3.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P14_Delete_Statement]^^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P2_Replace_Operator]^ancestors.get ( ancestors.size (  )   >>  2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^ancestors.get ( ancestors.size (  )   )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^ancestors.get ( ancestors.size() - 9  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^ancestors.push ( ancestors.size (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^ancestors.get ( ancestors.peek (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P14_Delete_Statement]^^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P11_Insert_Donor_Statement]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;ancestors.get ( ancestors.size (  )  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P3_Replace_Literal]^ancestors.get ( ancestors.size() - 7  - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P7_Replace_Invocation]^ancestors.get ( ancestors .Stack (  )   - 2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[P14_Delete_Statement]^^127^128^^^^126^130^List<Node> list = Lists.newArrayList ( ancestors ) ; Collections.reverse ( list ) ;^[CLASS] FunctionlessLocalScope  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  Stack  ancestors  boolean  
[P14_Delete_Statement]^^128^129^^^^126^130^Collections.reverse ( list ) ; return list;^[CLASS] FunctionlessLocalScope  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  Stack  ancestors  boolean  
[P8_Replace_Mix]^private  FunctionlessLocalScope iterator;^155^^^^^150^160^private final FunctionlessLocalScope iterator;^[CLASS] LocalVarMotion  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  Stack  ancestors  boolean  
[P1_Replace_Type]^private final char varName;^156^^^^^151^161^private final String varName;^[CLASS] LocalVarMotion  [METHOD] currentAncestors [RETURN_TYPE] List   [VARIABLES] List  list  Stack  ancestors  boolean  
[P2_Replace_Operator]^Preconditions.checkArgument ( nameNode.getType (  )  >= Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P14_Delete_Statement]^^194^195^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ; Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P7_Replace_Invocation]^Preconditions.checkArgument ( nameNode .getString (  )   == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^Node valueNode = NodeUtil.getAssignedValue ( lookAhead ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P7_Replace_Invocation]^Node valueNode = NodeUtil.mayHaveSideEffects ( nameNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^Node valueNode = NodeUtil.getAssignedValue ( valueNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P14_Delete_Statement]^^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P1_Replace_Type]^this.varName = nameNode.getchar (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^this.varName = valueNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P7_Replace_Invocation]^this.varName = nameNode .getFirstChild (  )  ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P14_Delete_Statement]^^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^int type = nextNode.getType (  ) ;this.varName = nameNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P2_Replace_Operator]^this.valueHasSideEffects = valueNode != null || NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P2_Replace_Operator]^this.valueHasSideEffects = valueNode == null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^this.valueHasSideEffects = nameNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P7_Replace_Invocation]^this.valueHasSideEffects = valueNode != null && NodeUtil.nodeTypeMayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P8_Replace_Mix]^this.valueHasSideEffects = valueNode != true && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P5_Replace_Variable]^NodeUtil.mayHaveSideEffects ( nameNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P7_Replace_Invocation]^NodeUtil.nodeTypeMayHaveSideEffects ( valueNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P8_Replace_Mix]^NodeUtil.nodeTypeMayHaveSideEffects ( nameNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P14_Delete_Statement]^^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P8_Replace_Mix]^this.iterator =  null;^199^^^^^193^201^this.iterator = iterator;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P3_Replace_Literal]^advanceLookAhead ( false ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P14_Delete_Statement]^^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P11_Insert_Donor_Statement]^advanceLookAhead ( false ) ;advanceLookAhead ( true ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[P2_Replace_Operator]^Preconditions.checkArgument ( var.getType (  )  != Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P14_Delete_Statement]^^165^166^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ; Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P7_Replace_Invocation]^Preconditions.checkArgument ( var .getString (  )   == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isStatement ( valueNode )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.getAssignedValue ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P14_Delete_Statement]^^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.getAssignedValue ( valueNode )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return return  new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion (  new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name,  block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, name, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, block, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( name, var, name )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^return  new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( assign, expr, block )  )   ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^return new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, name,  new FunctionlessLocalScope ( assign, expr, block )   ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^new FunctionlessLocalScope ( name, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( name,  block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( name, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( var, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( name, var, valueNode )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( var, name, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( block, var, name )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[P2_Replace_Operator]^Preconditions.checkArgument ( assign.getType (  )  <= Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P14_Delete_Statement]^^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( var.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P7_Replace_Invocation]^Preconditions.checkArgument ( assign .getString (  )   == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P14_Delete_Statement]^^181^182^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ; Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P2_Replace_Operator]^Preconditions.checkArgument ( expr.getType (  )  != Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( expr.getType (  )  == Token.2 ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P7_Replace_Invocation]^Preconditions.checkArgument ( expr .getString (  )   == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^Preconditions.checkArgument ( expr.getType (  )  == Token.null ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P14_Delete_Statement]^^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^Preconditions.checkArgument ( var.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion (  new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope (  expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign,  block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, var, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, valueNode )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( assign, expr, name )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, block, expr )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^return  new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  )   ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( var, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, var )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, name,  new FunctionlessLocalScope ( name, var, block )   ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope (  expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( assign,  block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P4_Replace_Constructor]^name, new FunctionlessLocalScope ( assign, expr )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( valueNode, expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( assign, var, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( assign, expr, var )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^name, new FunctionlessLocalScope ( assign, block, expr )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^name, new FunctionlessLocalScope ( assign, valueNode, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P2_Replace_Operator]^return lookAhead == null;^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P5_Replace_Variable]^return var != null;^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^return false ;^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P12_Insert_Condition]^if  ( lookAhead == null )  { return lookAhead != null; }^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[P8_Replace_Mix]^Node next = var;^210^^^^^209^213^Node next = lookAhead;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P3_Replace_Literal]^advanceLookAhead ( true ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P14_Delete_Statement]^^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P11_Insert_Donor_Statement]^advanceLookAhead ( true ) ;advanceLookAhead ( false ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P5_Replace_Variable]^return var;^212^^^^^209^213^return next;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P8_Replace_Mix]^return ;^217^^^^^216^218^throw new UnsupportedOperationException  (" ")  ;^[CLASS] LocalVarMotion  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[P6_Replace_Expression]^if  ( curNode.getType() == NAME && getString()) )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == NAME )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( !valueHasSideEffects )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^if ((lookAhead) == null) {    return ;}; com.google.javascript.rhino.Node curNode = iterator.current(); if (((curNode.getType()) == (com.google.javascript.rhino.Token.NAME)) && (varName.equals(curNode.getString()))) {    lookAhead = null;    return ;};^221^222^223^224^^206^236^if  ( !atStart )  { if  ( lookAhead == null )  { return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^221^222^223^224^^206^236^if  ( !atStart )  { if  ( lookAhead == null )  { return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( lookAhead != null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( nextParent == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( var == this )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^return ;^222^223^224^^^207^237^if  ( lookAhead == null )  { return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^222^223^224^^^207^237^if  ( lookAhead == null )  { return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P13_Insert_Block]^if  ( blocked )  {     lookAhead = null;     return ; }^222^^^^^207^237^[Delete]^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( curNode.getType (  )  >= Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( nextNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( varName.getType (  )  == Token.NAME && curNode.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == Token.NAME ) {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  (  varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( curNode.getType (  )  == NAME )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( curNode .getString (  )   == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode .getFirstChild (  )   )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( curNode.getType (  )  == Token.this && varName.equals ( curNode .getFirstChild (  )   )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P9_Replace_Statement]^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^lookAhead = null; return ;^229^230^231^232^233^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^229^230^231^232^233^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = true;^231^^^^^229^233^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^231^^^^^229^233^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^231^^^^^229^233^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = false;^231^^^^^216^246^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^231^^^^^216^246^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^Node curNode = iterator.hasNext (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^Node curNode = iterator .currentParent (  )  ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node nextParent = iterator.currentParent (  ) ;Node curNode = iterator.current (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node nextNode = iterator.next (  ) ;Node curNode = iterator.current (  ) ;^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^228^^^^^213^243^Node curNode = iterator.current (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( valueNode .getString (  )   == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^varName.equals ( nextParent.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^varName.equals ( var.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^230^231^^^^215^245^varName.equals ( curNode.getString (  )  )  )  { lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^varName.equals ( valueNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^varName.equals ( curNode .getFirstChild (  )   )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^varName.equals ( next.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( next == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( lookAhead == this )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( curNode.getType (  )  != Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( nextParent.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  (  varName.equals ( curNode .getFirstChild (  )   )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = false;^231^^^^^229^233^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = this;^231^^^^^216^246^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^231^^^^^216^246^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( next.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^varName.equals ( nextNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( !iterator.next (  )  )  {^236^^^^^221^251^if  ( !iterator.hasNext (  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^lookAhead = null; return ;^236^237^238^239^^221^251^if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^236^237^238^239^^221^251^if  ( !iterator.hasNext (  )  )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P13_Insert_Block]^if  ( blocked )  {     lookAhead = null;     return ; }^236^^^^^221^251^[Delete]^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = this;^237^^^^^222^252^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^237^^^^^222^252^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = false;^237^^^^^222^252^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^237^^^^^222^252^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^Node nextNode = iterator.hasNext (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node nextParent = iterator.currentParent (  ) ;Node nextNode = iterator.next (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node curNode = iterator.current (  ) ;Node nextNode = iterator.next (  ) ;^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^241^^^^^226^256^Node nextNode = iterator.next (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^Node nextParent = iterator.current (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node curNode = iterator.current (  ) ;Node nextParent = iterator.currentParent (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Node nextNode = iterator.next (  ) ;Node nextParent = iterator.currentParent (  ) ;^242^^^^^227^257^Node nextParent = iterator.currentParent (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^242^243^^^^227^257^Node nextParent = iterator.currentParent (  ) ; int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P1_Replace_Type]^long  type = nextNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^int type = valueNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^int type = nextParent.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^int type = var.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^int type = next.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^this.varName = nameNode.getString (  ) ;int type = nextNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( type == NAME )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent == null )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( type == Token.NAME || !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( type != Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( type <= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( next.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( nextNode == Token.NAME && !varName.equals ( type.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( type == Token.NAME ) {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  (  !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( type == NAME )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent == null )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( type == Token.NAME && !varName.equals ( var .getFirstChild (  )   )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P9_Replace_Statement]^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( nextParent != null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( nameNode == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == ASSIGN && nextNode == nextParent.getFirstChild() )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == ASSIGN )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextNode == nextParent.getFirstChild (  ) )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType() == VAR )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( !assignsName && !isVarDeclaration )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( nextParent == true )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P9_Replace_Statement]^if  ( lookAhead == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( !assignsName ) {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  (  !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^blocked = true;^258^259^260^^^251^261^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^258^259^260^^^251^261^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P3_Replace_Literal]^blocked = false;^259^^^^^251^261^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  > Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent .getString (  )   == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nextParent .getString (  )   == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^&& nextNode == var.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^&& nextNode == nextParent .getString (  )   ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( next.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean isVarDeclaration =  ( nextParent .getString (  )   == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( valueNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P3_Replace_Literal]^blocked = false;^252^^^^^237^267^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( !assignsName ) {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  (  !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  (  !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^blocked = true;^258^259^260^^^243^273^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^258^259^260^^^243^273^if  ( !assignsName && !isVarDeclaration )  { blocked = true; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P3_Replace_Literal]^blocked = false;^259^^^^^244^274^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( isVarDeclaration )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^lookAhead = null; return ;^263^264^265^266^^248^278^if  ( blocked )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^263^264^265^266^^248^278^if  ( blocked )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P13_Insert_Block]^if  ( ! ( iterator.hasNext (  )  )  )  {     lookAhead = null;     return ; }^263^^^^^248^278^[Delete]^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P13_Insert_Block]^if  (  ( lookAhead )  == null )  {     return ; }^263^^^^^248^278^[Delete]^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = true;^264^^^^^249^279^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^264^^^^^249^279^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P3_Replace_Literal]^boolean blocked = true;^250^^^^^235^265^boolean blocked = false;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( valueNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent .getString (  )   ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  <= Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent .getString (  )   == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^&& nextNode == nameNode.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( valueNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( nextParent == this )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( valueNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  >= Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^&& nextNode == next.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^255^256^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ; boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( valueHasSideEffects )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = this;^264^^^^^249^279^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean isVarDeclaration =  ( nextParent .getString (  )   == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( nameNode .getString (  )   == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( nameNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( type == Token.NAME && !varName.equals ( nextNode .getFirstChild (  )   )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( type == Token.NAME && !varName.equals ( var.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^&& nextNode == nextParent .getString (  )   ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^&& nextNode == next.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( type > Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( type >= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( var == this )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && valueNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent .getString (  )   ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^&& nextNode == nameNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  <= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^&& nextNode == var.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean isVarDeclaration =  ( next.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( valueNode == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( !valueHasSideEffects ) {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  <= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent .getString (  )   ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^&& nextNode == valueNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^&& nextNode == nextNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = false;^264^^^^^249^279^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( type == Token.NAME && !varName.equals ( nextParent.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^255^256^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ; boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  || type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type == Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type < Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P2_Replace_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type != Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextNode.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextParent )  && type != Token.NAME || type == Token.NAME && nextNode.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && nextParent != Token.NAME || type == Token.NAME && type.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME ) {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  (  type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nodeTypeMayHaveSideEffects(nextNode && type != NAME) )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( type != NAME )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( (type == NAME && nextParent.getType() == CATCH) )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( type == NAME )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P6_Replace_Expression]^if  ( nextParent.getType (  )  == CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && var.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P15_Unwrap_Block]^lookAhead = null; return ;^276^277^278^279^280^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P16_Remove_Block]^^276^277^278^279^280^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null; return; }^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = false;^278^^^^^276^280^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^278^^^^^276^280^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P12_Insert_Condition]^if  ( lookAhead == null )  { lookAhead = null; }^278^^^^^276^280^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead = true;^278^^^^^263^293^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = nextNode;lookAhead = null;^278^^^^^263^293^lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nameNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P7_Replace_Invocation]^if  ( NodeUtil .mayHaveSideEffects ( nextParent )   && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^|| type == Token.NAME && nameNode.getType (  )  == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^|| type == Token.NAME && var.getType (  )  == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P14_Delete_Statement]^^277^278^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  { lookAhead = null;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P5_Replace_Variable]^lookAhead = nameNode;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P8_Replace_Mix]^lookAhead =  next;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[P11_Insert_Donor_Statement]^lookAhead = null;lookAhead = nextNode;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
