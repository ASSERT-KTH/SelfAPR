[P8_Replace_Mix]^private  AbstractCompiler compiler;^68^^^^^63^73^private final AbstractCompiler compiler;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P8_Replace_Mix]^private  boolean assertOnChange;^69^^^^^64^74^private final boolean assertOnChange;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P3_Replace_Literal]^private static final boolean CONVERT_WHILE_TO_FOR = false;^70^^^^^65^75^private static final boolean CONVERT_WHILE_TO_FOR = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P8_Replace_Mix]^private static final boolean CONVERT_WHILE_TO_FOR  = null ;^70^^^^^65^75^private static final boolean CONVERT_WHILE_TO_FOR = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final boolean MAKE_LOCAL_NAMES_UNIQUE = false;^71^^^^^66^76^static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P12_Insert_Condition]^if  ( MAKE_LOCAL_NAMES_UNIQUE )  { static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; }^71^^^^^66^76^static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P8_Replace_Mix]^private Map<String,Boolean> constantMap ;^180^^^^^175^185^private Map<String,Boolean> constantMap = Maps.newHashMap (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^74^^^^^73^76^this.compiler = compiler;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Map  constantMap  
[P5_Replace_Variable]^this.assertOnChange = checkUserDeclarations;^75^^^^^73^76^this.assertOnChange = assertOnChange;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Map  constantMap  
[P11_Insert_Donor_Statement]^this.assertOnChange = forbidChanges;this.assertOnChange = assertOnChange;^75^^^^^73^76^this.assertOnChange = assertOnChange;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Map  constantMap  
[P8_Replace_Mix]^this.compiler =  null;^114^^^^^112^116^this.compiler = compiler;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[P5_Replace_Variable]^this.assertOnChange = checkUserDeclarations;^115^^^^^112^116^this.assertOnChange = forbidChanges;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[P11_Insert_Donor_Statement]^this.assertOnChange = assertOnChange;this.assertOnChange = forbidChanges;^115^^^^^112^116^this.assertOnChange = forbidChanges;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[P8_Replace_Mix]^this.compiler =  null;^166^^^^^165^168^this.compiler = compiler;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean checkUserDeclarations [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[P5_Replace_Variable]^this.checkUserDeclarations = assertOnChange;^167^^^^^165^168^this.checkUserDeclarations = checkUserDeclarations;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean checkUserDeclarations [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[P5_Replace_Variable]^if  ( checkUserDeclarations )  {^79^^^^^78^84^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P8_Replace_Mix]^if  ( forbidChanges )  {^79^^^^^78^84^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Normalize constraints violated:\n" + changeDescription));^79^80^81^82^^78^84^if  ( assertOnChange )  { throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P16_Remove_Block]^^79^80^81^82^^78^84^if  ( assertOnChange )  { throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  &&  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "ormalize constrainormalize constraints violated:\n" + changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P13_Insert_Block]^if  ( assertOnChange )  {     throw new IllegalStateException (  ( "Normalize constraints violated:\n" + changeDescription )  ) ; }^80^^^^^78^84^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  <  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Normalize constraints violated:\nze constraints violated" + changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"   instanceof   changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Normalize constraints violated:\nrm" + changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  ==  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Normalize constraints violated:\nraints" + changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^83^^^^^78^84^compiler.reportCodeChange (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P14_Delete_Statement]^^83^^^^^78^84^compiler.reportCodeChange (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P14_Delete_Statement]^^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;NodeTraversal.traverse ( compiler, root, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^if  ( forbidChanges )  {^89^^^^^87^97^if  ( MAKE_LOCAL_NAMES_UNIQUE )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P15_Unwrap_Block]^com.google.javascript.jscomp.MakeDeclaredNamesUnique renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique(); com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, renamer); t.traverseRoots(externs, root);^89^90^91^92^93^87^97^if  ( MAKE_LOCAL_NAMES_UNIQUE )  { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique (  ) ; NodeTraversal t = new NodeTraversal ( compiler, renamer ) ; t.traverseRoots ( externs, root ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P16_Remove_Block]^^89^90^91^92^93^87^97^if  ( MAKE_LOCAL_NAMES_UNIQUE )  { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique (  ) ; NodeTraversal t = new NodeTraversal ( compiler, renamer ) ; t.traverseRoots ( externs, root ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal ( compiler ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal (  renamer ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal ( renamer, compiler ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P11_Insert_Donor_Statement]^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^t.traverseRoots (  root ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^t.traverseRoots ( externs ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^t.traverseRoots ( root, externs ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root 
[P7_Replace_Invocation]^t.traverseRoots ( root ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P14_Delete_Statement]^^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P11_Insert_Donor_Statement]^t.traverse ( root ) ;t.traverseRoots ( externs, root ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P8_Replace_Mix]^t .traverse(  root )  ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^removeDuplicateDeclarations ( externs ) ;^94^^^^^87^97^removeDuplicateDeclarations ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P7_Replace_Invocation]^splitVarDeclarations ( root ) ;^94^^^^^87^97^removeDuplicateDeclarations ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P14_Delete_Statement]^^94^^^^^87^97^removeDuplicateDeclarations ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P11_Insert_Donor_Statement]^splitVarDeclarations ( n ) ;removeDuplicateDeclarations ( root ) ;^94^^^^^87^97^removeDuplicateDeclarations ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( compiler, forbidChanges ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations (  assertOnChange ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( compiler ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( assertOnChange, compiler ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P4_Replace_Constructor]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process (  root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P4_Replace_Constructor]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( externs, assertOnChange ) .process ( compiler, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( root, assertOnChange ) .process ( externs, compiler ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^new PropogateConstantAnnotations ( compiler, root ) .process ( externs, assertOnChange ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P7_Replace_Invocation]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .PropogateConstantAnnotations ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P7_Replace_Invocation]^new PropogateConstantAnnotations ( compiler, assertOnChange )  .reportCodeChange ( 0 )  ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P8_Replace_Mix]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, externs ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P14_Delete_Statement]^^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[P5_Replace_Variable]^doStatementNormalizations ( t, parent, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^doStatementNormalizations (  n, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^doStatementNormalizations ( t,  parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^doStatementNormalizations ( t, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^doStatementNormalizations ( parent, n, t ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^doStatementNormalizations ( t, parent, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^shouldTraverse ( t, n, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P3_Replace_Literal]^return false;^103^^^^^100^104^return true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, this ) .traverseRoots (  root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, this ) .traverseRoots ( externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal (  this ) .traverseRoots ( externs, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal ( compiler, this ) .traverseRoots ( root, externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal ( root, this ) .traverseRoots ( externs, compiler ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P14_Delete_Statement]^^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( (info != null) && info.isConstant() && IS_CONSTANT_NAME)) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( (info != null && info.isConstant()) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" )  + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  ) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  )  == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  ( n .setType (  )   == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P15_Unwrap_Block]^if (n.getString().isEmpty()) {    return ;}; com.google.javascript.rhino.JSDocInfo info = null; com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString()); if (var != null) {    info = var.getJSDocInfo();}; if (((info != null) && (info.isConstant())) && (!(n.getBooleanProp(Node.IS_CONSTANT_NAME)))) {    n.putBooleanProp(Node.IS_CONSTANT_NAME, true);    if (assertOnChange) {        java.lang.String name = n.getString();        throw new java.lang.IllegalStateException(((((("Unexpected const change.\n" + "  name: ") + name) + "\n") + "  gramps:") + (n.getParent().getParent().toStringTree())));    }};^126^127^128^129^^124^153^if  ( n.getType (  )  == Token.NAME )  { if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P16_Remove_Block]^^126^127^128^129^^124^153^if  ( n.getType (  )  == Token.NAME )  { if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  ) .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( parent.getString (  ) .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P15_Unwrap_Block]^return ;^127^128^129^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P16_Remove_Block]^^127^128^129^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^if  ( var == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( var != false )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P9_Replace_Statement]^if  ( value == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P9_Replace_Statement]^if  ( after == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^134^135^136^^^124^153^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P16_Remove_Block]^^134^135^136^^^124^153^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^135^^^^^124^153^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^135^^^^^124^153^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^if  (  ( info != null || info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^if  (  ( info != parentull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^if  (  ( n != infoull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  ( info != null ) {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( (info != null && info.isConstant()) )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" )  + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  ) )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  (  ( info != null && info.isConstant (  )  )  && !n.putBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  (  ( info != null && info.isConstant (  )  )  && !n .putBooleanProp ( MAKE_LOCAL_NAMES_UNIQUE )   )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^if  ( forbidChanges )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nUnexpec" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: e:"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n .getString (  )^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P1_Replace_Type]^char name = n.getchar (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^String name = n.putBooleanProp (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^String parentame = n.putBooleanProp (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;String name = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;String name = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;String name = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nex" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps: " + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n.getParent (  ) .getParent (  )  .isConstant (  )   ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^"  gramps:" + parent.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n co" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  n"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "ed const" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "name name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^n.replaceChild ( Node.IS_CONSTANT_NAME, true ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^n .getBooleanProp (  )  ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n .getString (  )^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^"  gramps:" + parent .getString (  )^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^if  ( forbidChanges )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( checkUserDeclarations )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "nexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "m"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:amp" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n .getString (  )^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P1_Replace_Type]^char name = n.getchar (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^String name = n.putBooleanProp (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;String name = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;String name = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;String name = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nxpe" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  na name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps: gra" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^String parentame = n.putBooleanProp (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n .getString (  )^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ==  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const channexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name:   na"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getParent (  )  ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.traverse (  ) .getVar ( n.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( n , parent )  .getVar ( n.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n.putBooleanProp (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nexpe" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + " name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P13_Insert_Block]^if  ( n.getString (  ) .isEmpty (  )  )  {     return ; }^127^^^^^124^153^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent.putBooleanProp (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^!n.putBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^139^^^^^124^153^!n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^139^140^^^^124^153^!n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^n.replaceChild ( Node.IS_CONSTANT_NAME, true ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P14_Delete_Statement]^^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P11_Insert_Donor_Statement]^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^"  gramps:" + parent .getString (  )^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( var != true )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  (  ( info != null && info.isConstant (  )  )  && !n .putBooleanProp ( checkUserDeclarations )   )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( checkUserDeclarations )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "nexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramp" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nne" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name:   nam"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  )  .isConstant (  )   ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "t c" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  n name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:g" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Une" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: n"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + " " + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ; ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const nexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name:  n"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "g gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  )  .isConstant (  )   ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.putBooleanProp (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "ted cons" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + ""+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps: g" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "const changnexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:  gram" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "angnexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "n name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "gram" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.getString (  )  .isConstant (  )   )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P8_Replace_Mix]^if  ( parent.getString (  )  .isConstant (  )   )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^n .getBooleanProp (  )  ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P7_Replace_Invocation]^"  gramps:" + n.getParent (  ) .getParent (  )  .isConstant (  )   ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[P5_Replace_Variable]^Node externsAndJs = externs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Node externsAndJs = root.putBooleanProp (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;Node externsAndJs = root.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P8_Replace_Mix]^Node externsAndJs = externsAndJs .getString (  )  ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P2_Replace_Operator]^Preconditions.checkState ( externsAndJs == null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( root != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( previous ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( rootAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions.checkState ( externsAndJs.replaceChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions.checkState ( externsAndJs .hasChildren (  )   ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P8_Replace_Mix]^Preconditions.checkState ( root.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs != null ) ;Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P8_Replace_Mix]^Preconditions.checkState ( rootAndJs.replaceChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^compiler, Lists.newArrayList ( externs, root ) , this ) ;NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, this ) ;NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList (  root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;compiler, Lists.newArrayList ( externs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( isConstantName(n) || getString()) )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value == null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value.booleanValue (  )  == isConst )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "The name " + name )  + " is not consistently annotated as " + "constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not consistently annotated as " )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  )  == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n .setType (  )   == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^java.lang.String name = n.getString(); if (n.getString().isEmpty()) {    return ;}; boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME); if (checkUserDeclarations) {    boolean expectedConst = false;    if ((com.google.javascript.jscomp.NodeUtil.isConstantName(n)) || (compiler.getCodingConvention().isConstant(n.getString()))) {        expectedConst = true;    }else {        expectedConst = false;        com.google.javascript.rhino.JSDocInfo info = null;        com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());        if (var != null) {            info = var.getJSDocInfo();        }        if ((info != null) && (info.isConstant())) {            expectedConst = true;        }else {            expectedConst = false;        }    }    if (expectedConst) {        com.google.common.base.Preconditions.checkState((expectedConst == isConst), (("The name " + name) + " is not annotated as constant."));    }else {        com.google.common.base.Preconditions.checkState((expectedConst == isConst), (("The name " + name) + " should not be annotated as constant."));    }}; java.lang.Boolean value = constantMap.get(name); if (value == null) {    constantMap.put(name, isConst);}else {    com.google.common.base.Preconditions.checkState(((value.booleanValue()) == isConst), ((("The name " + name) + " is not consistently annotated as ") + "constant."));};^184^185^186^187^188^169^199^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^184^185^186^187^188^169^199^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.getString (  )  .isConstant (  )   )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  ) .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^return ;^186^187^188^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^186^187^188^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( forbidChanges )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( NodeUtil.isConstantName ( parent ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( NodeUtil.isConstantName ( n ) ) {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n ) || compiler.reportCodeChange (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n ) || compiler .reportCodeChange ( name )  .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.putBooleanProp (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n .getParent (  )   )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( NodeUtil.isConstantName ( parent ) ) {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( var == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != this )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( value == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( after == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^201^202^203^^^193^210^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^201^202^203^^^193^210^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^202^^^^^193^210^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^202^^^^^193^210^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^expectedConst = true;^205^206^207^208^209^193^210^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^205^206^207^208^209^193^210^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^206^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^206^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^197^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^197^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.traverse (  ) .getVar ( n.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( parent , parent )  .getVar ( n.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n.putBooleanProp (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getParent (  )  ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent.putBooleanProp (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^195^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^195^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( var == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != true )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( value == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( after == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^201^202^203^^^186^216^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^201^202^203^^^186^216^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^202^^^^^187^217^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^202^^^^^187^217^info = var.getJSDocInfo (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null ) {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^expectedConst = true;^205^206^207^208^209^190^220^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^205^206^207^208^209^190^220^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^205^209^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^205^209^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^206^^^^^191^221^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^206^^^^^191^221^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( isConst )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( forbidChanges )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst < isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name  ^  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name T" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant.annotated" ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^216^^^^^212^218^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name  <  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name he" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant.s not annotated as con" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^213^^^^^198^228^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^195^^^^^180^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^195^^^^^180^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^197^^^^^182^212^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^197^^^^^182^212^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^193^223^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^193^223^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^boolean expectedConst = true;^192^^^^^177^207^boolean expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P12_Insert_Condition]^if  ( expectedConst )  { boolean expectedConst = false; }^192^^^^^177^207^boolean expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.traverse (  ) .getVar ( n.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( n , n )  .getVar ( n.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n.putBooleanProp (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.traverse (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^193^^^^^178^208^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^|| compiler.getCodingConvention (  ) .isConstant ( parent.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^|| compiler.reportCodeChange (  ) .isConstant ( n.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^|| compiler.getCodingConvention (  ) .isConstant ( n.putBooleanProp (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^|| compiler.getCodingConvention (  ) .isConstant ( n .getParent (  )   )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^194^195^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  { expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^|| compiler .reportCodeChange ( name )  .isConstant ( n.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name  !=  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "Thehe name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "ated as constis not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "T" + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "ld not be anshould not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^216^^^^^201^231^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( parent )  || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != false ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( n , n )  .getVar ( n.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.traverse (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != this )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != true && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name  <=  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "he" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " " ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name  <<  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( value != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value.booleanValue (  )  == isConst )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "The name " + name )  + " is not consistently annotated as " + "constant." )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not consistently annotated as " )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( value == false )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( var != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( after == null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  <= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  !=  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >=  name  >=  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  &  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name e nam" + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently ann" + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant.c" ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^225^^^^^222^228^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( name, checkUserDeclarations ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put (  isConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P1_Replace_Type]^char name = n.getchar (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^String name = n.putBooleanProp (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;String name = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;String name = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;String name = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^boolean isConst = parent.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^boolean isConst = n.putBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P12_Insert_Condition]^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ; }^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getParent (  )  ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( n , parent )  .getVar ( n.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( n.getString (  ) .isEmpty (  )  )  {     return ; }^186^^^^^171^201^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^boolean isConst = parent.putBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst > isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >  name  >  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not anno" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name  <=  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name he na" + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant. sho" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Boolean value = null.get ( name ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( name, forbidChanges ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  ||  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >  name  >  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "   instanceof   name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "e n" + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " consistently an" + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "cononstant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^225^^^^^210^240^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != false )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != true ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "Thehe name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " c" ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name  >>  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "he name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant.ed a" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( parent , parent )  .getVar ( n.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent.putBooleanProp (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  |  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " annotated as cons" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ||  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The nahe name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " be should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != true )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != this && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( checkUserDeclarations )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name  <<  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "m" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant.not annotated " ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  >= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  &&  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >>  name  >>  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  <=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name name" + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + "stently annotatis not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant.con" ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == forbidChanges, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^|| compiler.getCodingConvention (  ) .isConstant ( parent.putBooleanProp (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, " nahe name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant. is not annota" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name The n" + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " shoul" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Boolean value = 2.get ( name ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^constantMap.put ( name, expectedConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  <= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  <<  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >=  name  >=  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  ==  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name Th" + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + "is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( value.booleanValue (  )  == checkUserDeclarations, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( isConst )  {^237^^^^^234^246^if  ( CONVERT_WHILE_TO_FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^Node expr = parent.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^Node expr = n.putBooleanProp (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^Node expr = parent .getLastChild (  )  ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P14_Delete_Statement]^^238^239^^^^234^246^Node expr = n.getFirstChild (  ) ; n.setType ( Token.FOR ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node expr = n.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^n.putBooleanProp ( Token.FOR ) ;^239^^^^^234^246^n.setType ( Token.FOR ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^n .getType (  )  ;^239^^^^^234^246^n.setType ( Token.FOR ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P14_Delete_Statement]^^239^^^^^234^246^n.setType ( Token.FOR ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P4_Replace_Constructor]^n.addChildBefore ( new Node ( Token.EMPTY )  ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildBefore ( parentew Node ( Token.EMPTY ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildBefore ( new Node ( Token.EMPTY ) , parent ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildBefore ( exprew Node ( Token.EMPTY ) , n ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^n .addChildToFront ( parent )  ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^n.addChildBefore ( new Node ( Token.4 ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P14_Delete_Statement]^^240^241^242^243^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ; n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ; reportCodeChange ( "WHILE node" ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^n.addChildBefore ( newVar, c ) ;n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P4_Replace_Constructor]^n.addChildAfter ( new Node ( Token.EMPTY )  ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildAfter ( parentew Node ( Token.EMPTY ) , expr ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildAfter ( new Node ( Token.EMPTY ) , parent ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^n.addChildAfter ( exprew Node ( Token.EMPTY ) , n ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^n .addChildBefore ( n , n )  ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^n .addChildBefore ( expr , n )  ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P14_Delete_Statement]^^241^242^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ; reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P3_Replace_Literal]^reportCodeChange ( "LE nod" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^splitVarDeclarations ( "WHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P14_Delete_Statement]^^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^reportCodeChange ( "Duplicate VAR declaration" ) ;reportCodeChange ( "WHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^reportCodeChange ( "LABEL normalization" ) ;reportCodeChange ( "WHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^reportCodeChange ( "VAR with multiple children" ) ;reportCodeChange ( "WHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P11_Insert_Donor_Statement]^reportCodeChange ( "FOR initializer" ) ;reportCodeChange ( "WHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^n.addChildBefore ( new Node ( Token.null ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P8_Replace_Mix]^n.addChildAfter ( new Node ( Token.1 ) , expr ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^235^^^^^234^246^switch  ( n.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^switch  ( n.putBooleanProp (  )  )  {^235^^^^^234^246^switch  ( n.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P7_Replace_Invocation]^switch  ( n .setType (  )   )  {^235^^^^^234^246^switch  ( n.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P12_Insert_Condition]^if  ( c.getType (  )  == Token.VAR )  { n.setType ( Token.FOR ) ; }^239^^^^^234^246^n.setType ( Token.FOR ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P3_Replace_Literal]^reportCodeChange ( "WHHILE node" ) ;^242^^^^^234^246^reportCodeChange ( "WHILE node" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.LABEL )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.LABEL )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  )  == Token.LABEL )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.VAR )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( init.getType (  )  == Token.VAR )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^normalizeLabels(n);^252^253^254^^^251^271^if  ( n.getType (  )  == Token.LABEL )  { normalizeLabels ( n ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^252^253^254^^^251^271^if  ( n.getType (  )  == Token.LABEL )  { normalizeLabels ( n ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     moveNamedFunctions ( n.getLastChild (  )  ) ; }^252^^^^^251^271^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^normalizeLabels ( parent ) ;^253^^^^^251^271^normalizeLabels ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^moveNamedFunctions ( n ) ;^253^^^^^251^271^normalizeLabels ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^253^^^^^251^271^normalizeLabels ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^moveNamedFunctions ( parent ) ;^253^^^^^251^271^normalizeLabels ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isStatementBlock ( n )  && n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  != Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isStatementBlock ( parent )  || n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isStatementBlock ( n )  ) {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P6_Replace_Expression]^if  ( n.getType (  )  == LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n )  || n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .isConstantName ( parent )   || n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isStatementBlock ( n )  || n.putBooleanProp (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^extractForInitializer(n, null, null);^258^259^260^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  { extractForInitializer ( n, null, null ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^258^259^260^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  { extractForInitializer ( n, null, null ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^extractForInitializer ( parent, null, null ) ;^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^addToFront ( n, null, null ) ;^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^addToFront ( parent, null, null ) ;^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;extractForInitializer ( n, null, null ) ;^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^258^^^^^251^271^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isStatementBlock ( n )  || n .setType (  )   == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isStatementBlock ( parent )  )  {^264^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n )  )  {^264^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^264^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^splitVarDeclarations(n);^264^265^266^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  { splitVarDeclarations ( n ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^264^265^266^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  { splitVarDeclarations ( n ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^splitVarDeclarations ( parent ) ;^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^removeDuplicateDeclarations ( n ) ;^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^removeDuplicateDeclarations ( parent ) ;^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^removeDuplicateDeclarations ( root ) ;splitVarDeclarations ( n ) ;^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^264^^^^^251^271^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  )  == Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.VAR )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( init.getType (  )  == Token.VAR )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^moveNamedFunctions(n.getLastChild());^268^269^270^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  { moveNamedFunctions ( n.getLastChild (  )  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^268^269^270^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  { moveNamedFunctions ( n.getLastChild (  )  ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {     normalizeLabels ( n ) ; }^268^^^^^251^271^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^moveNamedFunctions ( parent.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^splitVarDeclarations ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^moveNamedFunctions ( n.putBooleanProp (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^moveNamedFunctions ( n .getFirstChild (  )   ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;moveNamedFunctions ( n.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( n .setType (  )   == Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^moveNamedFunctions ( parent.putBooleanProp (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^Preconditions.checkArgument ( n.getType (  )  != Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^Preconditions.checkArgument ( last.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( n.putBooleanProp (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( n .setType (  )   == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P14_Delete_Statement]^^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs != null ) ;Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ; }^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.LABEL )  { Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ; }^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P12_Insert_Condition]^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  { Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ; }^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR )  { Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ; }^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^Node last = block.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Node last = n.putBooleanProp (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^Node last = n .getFirstChild (  )  ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^Node last = last.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P14_Delete_Statement]^^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node last = n.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^Node replacement = new Node ( Token.ASSIGN, n, value ) ;Node block = new Node ( Token.BLOCK ) ;^292^^^^^280^298^Node block = new Node ( Token.BLOCK ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^switch  ( n.getType (  )  )  {^284^^^^^280^298^switch  ( last.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^switch  ( last.putBooleanProp (  )  )  {^284^^^^^280^298^switch  ( last.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^switch  ( last .setType (  )   )  {^284^^^^^280^298^switch  ( last.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P8_Replace_Mix]^switch  ( n.putBooleanProp (  )  )  {^284^^^^^280^298^switch  ( last.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^n.replaceChild ( n, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^n.replaceChild ( last, last ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^n.replaceChild (  block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^n.replaceChild ( last ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^n .getLastChild (  )  ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P8_Replace_Mix]^n.replaceChild ( block, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P14_Delete_Statement]^^293^294^^^^280^298^n.replaceChild ( last, block ) ; block.addChildToFront ( last ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;n.replaceChild ( last, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;n.replaceChild ( last, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;n.replaceChild ( last, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P5_Replace_Variable]^block.addChildToFront ( n ) ;^294^^^^^280^298^block.addChildToFront ( last ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^block.addChildAfter ( last ) ;^294^^^^^280^298^block.addChildToFront ( last ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P14_Delete_Statement]^^294^295^^^^280^298^block.addChildToFront ( last ) ; reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^parent.addChildToFront ( newChild ) ;block.addChildToFront ( last ) ;^294^^^^^280^298^block.addChildToFront ( last ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P3_Replace_Literal]^reportCodeChange ( "LABEL normalizationnormali" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P7_Replace_Invocation]^splitVarDeclarations ( "LABEL normalization" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P14_Delete_Statement]^^295^296^^^^280^298^reportCodeChange ( "LABEL normalization" ) ; return;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^reportCodeChange ( "Duplicate VAR declaration" ) ;reportCodeChange ( "LABEL normalization" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^reportCodeChange ( "WHILE node" ) ;reportCodeChange ( "LABEL normalization" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^reportCodeChange ( "VAR with multiple children" ) ;reportCodeChange ( "LABEL normalization" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P11_Insert_Donor_Statement]^reportCodeChange ( "FOR initializer" ) ;reportCodeChange ( "LABEL normalization" ) ;^295^^^^^280^298^reportCodeChange ( "LABEL normalization" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[P2_Replace_Operator]^if  ( !NodeUtil.isForIn ( c ) || c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  >= Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^if  ( !NodeUtil.isForIn ( n ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^if  ( !NodeUtil.isForIn ( c ) ) {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^if  (  c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^if  ( c.getFirstChild (  ) .getType (  )  != EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^if  ( init.getType() == VAR )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil.newExpr ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil .isFunctionDeclaration ( n )  && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( c ) && c.putBooleanProp (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( c ) && c .getLastChild (  )  .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .putBooleanProp (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  )  .setType (  )   != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( !NodeUtil.isForIn ( newStatement ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( init.getType (  )  <= Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^if  ( newStatement.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( init.putBooleanProp (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( next.putBooleanProp (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P15_Unwrap_Block]^newStatement = init;^331^332^333^334^335^323^339^if  ( init.getType (  )  == Token.VAR )  { newStatement = init; } else { newStatement = NodeUtil.newExpr ( init ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P16_Remove_Block]^^331^332^333^334^335^323^339^if  ( init.getType (  )  == Token.VAR )  { newStatement = init; } else { newStatement = NodeUtil.newExpr ( init ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = NodeUtil.newExpr ( newStatement ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil.isForIn ( init ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  NodeUtil.newExpr ( null ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( beforeParent )  ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = n;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  insertBeforeParent;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  next;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = NodeUtil.newExpr ( next ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( insertBeforeParent )  ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node init = newStatement.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^Node init = c.putBooleanProp (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = n.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node init = insertBeforeParent.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = next .getLastChild (  )  ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P4_Replace_Constructor]^c.replaceChild (  new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^c.replaceChild ( next, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^c.replaceChild ( init, new Node ( Token.1 )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^c.addChildAfter ( init, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^c .getLastChild (  )  ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^c.addChildAfter ( n, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( n )  ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement = NodeUtil.newExpr ( n ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( next, insertBefore ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( newStatement, next ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore (  insertBefore ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( newStatement ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^insertBeforeParent .addChildToFront ( init )  ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^337^338^339^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ; reportCodeChange ( "FOR initializer" ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P3_Replace_Literal]^reportCodeChange ( "FOR initializerOR initiali" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^splitVarDeclarations ( "FOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "Duplicate VAR declaration" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "LABEL normalization" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "WHILE node" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "VAR with multiple children" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( init.getType (  )  != Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( init.putBooleanProp (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( init .setType (  )   == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( newStatement.getType (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P15_Unwrap_Block]^newStatement = init;^331^332^333^334^335^316^346^if  ( init.getType (  )  == Token.VAR )  { newStatement = init; } else { newStatement = NodeUtil.newExpr ( init ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P16_Remove_Block]^^331^332^333^334^335^316^346^if  ( init.getType (  )  == Token.VAR )  { newStatement = init; } else { newStatement = NodeUtil.newExpr ( init ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil.isForIn ( init ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  NodeUtil.newExpr ( next ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = insertBeforeParent;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  next;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^for  ( Node next, c = n.getFirstChild (  ) ; c == null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P4_Replace_Constructor]^for  ( Node next = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P4_Replace_Constructor]^for  ( Node  c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^for  ( Node newStatementext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^for  ( Node insertBefore, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^for  ( Node next, c = n.putBooleanProp (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^for  ( Node next, c = n .getLastChild (  )  ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^for  ( Node next, insertBeforeParent = n.putBooleanProp (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  < Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( !NodeUtil.isForIn ( next ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( init.getType (  )  != Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^if  ( init .setType (  )   == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( newStatement.putBooleanProp (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( newStatement )  ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( c )  ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = next.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^Node init = c .getLastChild (  )  ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^325^326^^^^323^339^Node init = c.getFirstChild (  ) ; c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^c.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^c.addChildAfter ( next, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( newStatement, insertBeforeParent ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P3_Replace_Literal]^reportCodeChange ( "R iniOR initializer" ) ;^338^^^^^323^339^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^if  ( init.getType (  )  <= Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^next = n.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^next = c.putBooleanProp (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^next = c .getParent (  )  ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^next =  insertBeforeParent.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = NodeUtil.newExpr ( n ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil.isForIn ( init ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  NodeUtil.newExpr ( null ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^Node insertBefore =  ( before != null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBefore =  ( next == null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBefore =  ( c == null )  ? before : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^Node insertBefore =  ( before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node insertBefore =  ( n == null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;Node insertBefore =  ( before == null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^Node insertBeforeParent =  ( before != null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( n == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( before == insertBeforeull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( before == null )  ? n : next;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( beforeParent == null )  ? n : before;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( n == beforeull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( before == beforeParentull )  ? n : n;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P6_Replace_Expression]^Node insertBeforeParent =  ( beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node insertBefore =  ( before == null )  ? c : before;Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node init = next.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^Node init = c.putBooleanProp (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = newStatement.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^next = next.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^315^316^^^^300^330^next = c.getNext (  ) ; Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;next = c.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^switch  ( n.getType (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^switch  ( c.putBooleanProp (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^switch  ( c .setType (  )   )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^318^319^320^^^303^333^switch  ( c.getType (  )  )  { case Token.LABEL: extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( n, insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, next, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, insertBefore, next ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer (  insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c,  insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, insertBefore ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( insertBeforeParent, insertBefore, c ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, insertBeforeParent, insertBefore ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^addToFront ( c, insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^extractForInitializer ( n, null, null ) ;extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^&& insertBeforeParent.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^&& c.putBooleanProp (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^&& c .getLastChild (  )  .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^&& next.putBooleanProp (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^324^325^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  { Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^&& next.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = c .getLastChild (  )  ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node init = c.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P4_Replace_Constructor]^c.replaceChild (  new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^c.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^c.addChildAfter ( init, new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^c.replaceChild ( insertBeforeParent, new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( insertBeforeParent.getType (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( c )  ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement = NodeUtil.newExpr ( next ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( next, insertBefore ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( newStatement, next ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore (  insertBefore ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( newStatement ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^337^338^339^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ; reportCodeChange ( "FOR initializer" ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P3_Replace_Literal]^reportCodeChange ( "FOR initialize" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^splitVarDeclarations ( "FOR initializer" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "Duplicate VAR declaration" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "LABEL normalization" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "WHILE node" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "VAR with multiple children" ) ;reportCodeChange ( "FOR initializer" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^for  ( Node newStatement, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^for  ( Node next, c =  n.getFirstChild (  ) ; c !^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement =  n;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( insertBeforeParent )  ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^for  ( Node nextext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^for  ( Node insertBeforeParentext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBefore =  ( before == null )  ? n : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( newStatement == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( before == nextull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^Node insertBeforeParent =  ( before == null )  ? n : newStatement;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node insertBeforeParent =  ( next == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^for  ( Node insertBeforeext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^next = newStatement.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^switch  ( insertBeforeParent.getType (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^switch  ( next.putBooleanProp (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, n, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( c, insertBefore, n ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^extractForInitializer ( insertBefore, c, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^if  ( !NodeUtil.newExpr ( newStatement ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^&& c.getFirstChild (  )  .setType (  )   != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^&& n.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^&& newStatement.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^Node init = next.putBooleanProp (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P14_Delete_Statement]^^325^326^^^^310^340^Node init = c.getFirstChild (  ) ; c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^c .getLastChild (  )  ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^newStatement = NodeUtil .isFunctionDeclaration ( n )  ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^newStatement = NodeUtil.newExpr ( newStatement ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P5_Replace_Variable]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P7_Replace_Invocation]^insertBeforeParent .addChildToFront ( n )  ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P8_Replace_Mix]^insertBeforeParent.addChildBefore ( newStatement, n ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P3_Replace_Literal]^reportCodeChange ( "FOR initializerialize" ) ;^338^^^^^323^353^reportCodeChange ( "FOR initializer" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[P2_Replace_Operator]^while  ( c.getFirstChild (  )  >= c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^while  ( next.getFirstChild (  )  != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^while  ( c.putBooleanProp (  )  != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^while  ( c.getFirstChild (  )  != c.putBooleanProp (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^while  ( c .getLastChild (  )   != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P4_Replace_Constructor]^Node newVar = new Node ( Token.VAR,  n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P4_Replace_Constructor]^Node newVar = new Node ( Token.VARame, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^Node newVar = new Node ( Token.VAR, next, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^Node nextewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^Node newVar = new Node ( Token. name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node newVar = new Node ( Token.VAR, name, n.putBooleanProp (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node newVar = new Node ( Token.VAR, name, n .getParent (  )  , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.putBooleanProp (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node newVar = new Node ( Token.VAR, next, n.getLineno (  ) , n .getParent (  )   ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node name = c.putBooleanProp (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node name = next.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^Node nameewVar = new Node ( Token.VAR, n, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n .getParent (  )   ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node name = newVar.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^363^364^^^^354^371^Node name = c.getFirstChild (  ) ; c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node name = c.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^c.removeChild ( next ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^c.replaceChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^c .removeChildAfter ( next )  ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^c.replaceChild ( next ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^364^365^^^^354^371^c.removeChild ( name ) ; Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;c.removeChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;c.removeChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^n.replaceChild ( last, block ) ;c.removeChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;c.removeChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;c.removeChild ( name ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node newVarewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( nextewVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( next, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( newVar, next ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore (  c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( newVar ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( cewVar, n ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( n, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( c, newVar ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^366^367^368^^^354^371^n.addChildBefore ( newVar, c ) ; reportCodeChange ( "VAR with multiple children" ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^parent.addChildAfter ( newChild, after ) ;n.addChildBefore ( newVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^parent.addChildToFront ( newChild ) ;n.addChildBefore ( newVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "VAR witAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^splitVarDeclarations ( "VAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "Duplicate VAR declaration" ) ;reportCodeChange ( "VAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "LABEL normalization" ) ;reportCodeChange ( "VAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "WHILE node" ) ;reportCodeChange ( "VAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^reportCodeChange ( "FOR initializer" ) ;reportCodeChange ( "VAR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^if  ( c.getType (  )  != Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P6_Replace_Expression]^if  ( assertOnChange && !(c.hasChildren()) )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P6_Replace_Expression]^if  ( c.getFirstChild() != c.getLastChild() )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( c.putBooleanProp (  )  == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P15_Unwrap_Block]^if ((assertOnChange) && (!(c.hasChildren()))) {    throw new java.lang.IllegalStateException("Empty VAR node.");}; while ((c.getFirstChild()) != (c.getLastChild())) {    com.google.javascript.rhino.Node name = c.getFirstChild();    c.removeChild(name);    com.google.javascript.rhino.Node newVar = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, name, n.getLineno(), n.getCharno());    n.addChildBefore(newVar, c);    reportCodeChange("VAR with multiple children");} ;^357^358^359^360^^354^371^if  ( c.getType (  )  == Token.VAR )  { if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P16_Remove_Block]^^357^358^359^360^^354^371^if  ( c.getType (  )  == Token.VAR )  { if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^while  ( c.getFirstChild (  )  == c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^Node name = c .getLastChild (  )  ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node newVar = new Node ( Token.VAR, next, n .getParent (  )  , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node nextewVar = new Node ( Token.VAR, name, n.putBooleanProp (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^365^366^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ; n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^n .addChildToFront ( next )  ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "VAR with multiple childrenAR with multipl" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^if  ( assertOnChange || !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^if  ( expectedConst && !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P6_Replace_Expression]^if  ( assertOnChange ) {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P6_Replace_Expression]^if  (  !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( assertOnChange && !c.putBooleanProp (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^if  ( isConst ) {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Empty VAR node.");^358^359^360^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P16_Remove_Block]^^358^359^360^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^throw new IllegalStateException ( "Unexpected const change.\n" + ;^359^^^^^354^371^throw new IllegalStateException  (" ")  ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P13_Insert_Block]^if  (  ( assertOnChange )  &&  ( ! ( c.hasChildren (  )  )  )  )  {     throw new IllegalStateException ( "Empty VAR node." ) ; }^359^^^^^354^371^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node newVarewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n .getParent (  )   ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( assertOnChange && !c .hasChild ( newVar )   )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^while  ( newVar.getFirstChild (  )  != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^362^363^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  { Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^while  ( c.getFirstChild (  )  != c .getFirstChild (  )   )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node name = next.putBooleanProp (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "h multiple AR with multiple children" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^if  ( isConst && !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^for  ( Node next, c = n.getFirstChild (  ) ; c == null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P4_Replace_Constructor]^for  ( Node next = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P4_Replace_Constructor]^for  ( Node  c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^for  ( Node newVarext, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^for  ( Node next, newVar = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^for  ( Node name, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^for  ( Node next, c = n.putBooleanProp (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^for  ( Node next, c = n .getLastChild (  )  ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^for  ( Node next, newVar = n.putBooleanProp (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^while  ( next.getFirstChild (  )  != c.putBooleanProp (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node name = next .getLastChild (  )  ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "VAR with multiple children " ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^if  ( c.getType (  )  <= Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^if  ( next .setType (  )   == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^while  ( next .getLastChild (  )   != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node nextewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.putBooleanProp (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node nextewVar = new Node ( Token.VAR, name, n .getParent (  )  , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^c .removeChildAfter ( newVar )  ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^Node newVarewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.putBooleanProp (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "VAR with multiple childrenltiple chi" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^if  ( forbidChanges ) {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^c .removeChildAfter ( c )  ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^n .addChildToFront ( newVar )  ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "th multiple chi" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( assertOnChange && !c .hasChild ( n )   )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^next = next.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^next = c.putBooleanProp (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^next =  newVar.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^Node newVar = new Node ( Token.VAR, newVar, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;next = c.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( assertOnChange && !c .hasChild ( next )   )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^c .removeChildAfter ( name )  ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^n.addChildBefore ( newVarewVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^n .addChildToFront ( name )  ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "w" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^for  ( Node next, c =  n.getFirstChild (  ) ; c !^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P5_Replace_Variable]^for  ( Node nextext, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P14_Delete_Statement]^^355^356^357^358^359^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  { next = c.getNext (  ) ; if  ( c.getType (  )  == Token.VAR )  { if  ( assertOnChange && !c.hasChildren (  )  )  { throw new IllegalStateException  (" ")  ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P8_Replace_Mix]^next = newVar .getParent (  )  ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P7_Replace_Invocation]^if  ( c .setType (  )   == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P3_Replace_Literal]^reportCodeChange ( "r" ) ;^367^^^^^354^371^reportCodeChange ( "VAR with multiple children" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[P2_Replace_Operator]^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  < Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Preconditions.checkState ( next.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Preconditions.checkState ( functionBody.putBooleanProp (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Preconditions.checkState ( functionBody .getString (  )  .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^Preconditions.checkState ( previous.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^functionBody.putBooleanProp (  ) .getType (  )  == Token.FUNCTION ) ;^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^379^380^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ; Node previous = null;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^functionBody .getString (  )  .getType (  )  == Token.FUNCTION ) ;^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^379^^^^^364^394^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Node current = previous.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Node current = functionBody.putBooleanProp (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node value = n.getFirstChild (  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node current = functionBody.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P2_Replace_Operator]^while  ( current != null || NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P2_Replace_Operator]^while  ( current == null && NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^while  ( previous != null && NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^while  ( current != null && NodeUtil.isForIn ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^previous =  next;^385^^^^^370^400^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^current = previous.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^current = current.putBooleanProp (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^current = current .getParent (  )  ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;current = current.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^current = previous.putBooleanProp (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node next = current.getNext (  ) ;current = current.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^previous = previous;^385^^^^^370^400^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^previous =  null;^385^^^^^370^400^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^while  ( next != null && NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^384^385^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  { previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^current = next.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Node insertAfter = next;^390^^^^^375^405^Node insertAfter = previous;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P2_Replace_Operator]^while  ( current == null )  {^391^^^^^376^406^while  ( current != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^while  ( previous != null )  {^391^^^^^376^406^while  ( current != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( current )  )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( next )   )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionDeclaration ( next )  )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^previous = next;^405^^^^^394^406^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( previous, current, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( functionBody, previous, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( functionBody, current, previous ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront (  current, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( functionBody,  insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( functionBody, current ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( insertAfter, current, functionBody ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( functionBody, insertAfter, current ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^insertAfter = extractForInitializer ( functionBody, current, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Preconditions.checkNotNull ( next ) ;^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs != null ) ;Preconditions.checkNotNull ( previous ) ;^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;Preconditions.checkNotNull ( previous ) ;^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^functionBody.removeChildAfter ( next ) ;^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^functionBody.replaceChild ( previous ) ;^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^functionBody .removeChild ( next )  ;^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^insertAfter = addToFront ( current, functionBody, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^401^402^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ; compiler.reportCodeChange (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^402^^^^^387^417^compiler.reportCodeChange (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^402^^^^^387^417^compiler.reportCodeChange (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^previous = previous;^405^^^^^390^420^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^previous =  next;^405^^^^^390^420^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^current = insertAfter;^407^^^^^392^422^current = next;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^current =  previous;^407^^^^^392^422^current = next;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Node next = previous.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Node next = current.putBooleanProp (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^Node next = current .getParent (  )  ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^Node externsAndJs = root.getParent (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Node next = next.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^current = current.getNext (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P11_Insert_Donor_Statement]^next = c.getNext (  ) ;Node next = current.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( functionBody )   )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionDeclaration ( previous )  )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^394^^^^^379^409^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^Preconditions.checkNotNull ( insertAfter ) ;^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P7_Replace_Invocation]^functionBody .removeChild ( insertAfter )  ;^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P5_Replace_Variable]^previous = previous;^405^^^^^394^406^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P8_Replace_Mix]^Node next = previous.putBooleanProp (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P14_Delete_Statement]^^396^397^^^^381^411^Preconditions.checkNotNull ( previous ) ; functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[P2_Replace_Operator]^if  ( after != null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^if  ( newChild == null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P8_Replace_Mix]^if  ( after == false )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P9_Replace_Statement]^if  ( var != null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P9_Replace_Statement]^if  ( value == null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P15_Unwrap_Block]^parent.addChildToFront(newChild);^417^418^419^420^421^416^423^if  ( after == null )  { parent.addChildToFront ( newChild ) ; } else { parent.addChildAfter ( newChild, after ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P16_Remove_Block]^^417^418^419^420^421^416^423^if  ( after == null )  { parent.addChildToFront ( newChild ) ; } else { parent.addChildAfter ( newChild, after ) ; }^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( parent, after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( newChild, newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter (  after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P14_Delete_Statement]^^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P11_Insert_Donor_Statement]^n.addChildBefore ( newVar, c ) ;parent.addChildAfter ( newChild, after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P11_Insert_Donor_Statement]^parent.addChildToFront ( newChild ) ;parent.addChildAfter ( newChild, after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildToFront ( after ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P7_Replace_Invocation]^parent.addChildAfter ( newChild ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P14_Delete_Statement]^^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P11_Insert_Donor_Statement]^n.addChildBefore ( newVar, c ) ;parent.addChildToFront ( newChild ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P11_Insert_Donor_Statement]^parent.addChildAfter ( newChild, after ) ;parent.addChildToFront ( newChild ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P11_Insert_Donor_Statement]^block.addChildToFront ( last ) ;parent.addChildToFront ( newChild ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( after, after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( newChild, parent ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^parent.addChildAfter ( after, newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P7_Replace_Invocation]^parent .addChildBefore ( newChild , newChild )  ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P5_Replace_Variable]^return parent;^422^^^^^416^423^return newChild;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[P4_Replace_Constructor]^NodeTraversal t = new NodeTraversal ( compiler,  scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P4_Replace_Constructor]^NodeTraversal t = new NodeTraversal ( compiler, tickler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal (  tickler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal ( tickler, compiler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal ( scopeCreator, tickler, compiler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P5_Replace_Variable]^NodeTraversal t = new NodeTraversal ( compiler, scopeCreator, tickler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P11_Insert_Donor_Statement]^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P7_Replace_Invocation]^t.traverseRoots ( root ) ;^433^^^^^428^434^t.traverse ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P14_Delete_Statement]^^433^^^^^428^434^t.traverse ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P11_Insert_Donor_Statement]^t.traverseRoots ( externs, root ) ;t.traverse ( root ) ;^433^^^^^428^434^t.traverse ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( n.getType (  )  > Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( checkUserDeclarations , name )  ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( n.putBooleanProp (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs != null ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.LABEL )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P12_Insert_Condition]^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P12_Insert_Condition]^if  ( c.getType (  )  == Token.VAR )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^if  ( gramps.getType() == FOR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( parent.putBooleanProp (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( parent .setType (  )   == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( replacement.putBooleanProp (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^if  ( replacement.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( n.putBooleanProp (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( gramps )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( NodeUtil .isConstantName ( replacement )   )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P9_Replace_Statement]^if  ( NodeUtil.isStatementBlock ( n )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^} else if  ( gramps.getType (  )  == Token.this )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^} else if  ( gramps.getType (  )  == LABEL )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^} else {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^} else if  ( gramps.putBooleanProp (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^} else if  ( gramps .setType (  )   == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P13_Insert_Block]^if  ( isStatementBlock ( gramps )  )  {     gramps.removeChild ( parent ) ; }else     if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {         parent.removeChild ( n ) ;         gramps.replaceChild ( parent, n ) ;     }else {         checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;         gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;     }^483^^^^^471^493^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( gramps.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^491^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( replacement, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps.addChildAfter ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent .removeChildAfter ( n )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^487^488^^^^471^493^parent.removeChild ( n ) ; gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;parent.removeChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, value ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild (  n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.replaceChild ( value, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.replaceChild ( last, block ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^} else if  ( replacement .setType (  )   == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent .removeChildAfter ( value )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions .checkState ( isConst , name )  ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .setType (  )   == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.3 )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.removeChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps.replaceChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^}  if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( gramps.getType (  )  == Token.this ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( MAKE_LOCAL_NAMES_UNIQUE , name )  ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( value .setType (  )   == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^481^^^^^471^493^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.replaceChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^} else if  ( value.putBooleanProp (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  > Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ASSIGN,  value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ASSIGN, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = valueew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ASSIGN, n, replacement ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = new Node ( Token. n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, value )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token. replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Node value = n.putBooleanProp (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Node value = replacement.putBooleanProp (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node last = n.getLastChild (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node current = functionBody.getFirstChild (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node init = c.getFirstChild (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node name = c.getFirstChild (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node expr = n.getFirstChild (  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ASSIGN, n, parent ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^Node block = new Node ( Token.BLOCK ) ;Node replacement = new Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;parent.removeChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node value = value.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^475^476^^^^460^490^Node value = n.getFirstChild (  ) ; n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^moveNamedFunctions ( n.getLastChild (  )  ) ;Node value = n.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^n.removeChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^n.replaceChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^n .removeChildAfter ( parent )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^476^477^^^^461^491^n.removeChild ( value ) ; Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.replaceChild ( last, block ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( gramps )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( NodeUtil .isConstantName ( nodeWithLineNumber )   )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( NodeUtil.isStatementBlock ( replacement )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P9_Replace_Statement]^if  ( NodeUtil.isStatementBlock ( n )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^} else if  ( gramps.getType (  )  == LABEL )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P6_Replace_Expression]^} else {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^} else if  ( gramps.putBooleanProp (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^} else if  ( gramps .setType (  )   == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P13_Insert_Block]^if  ( isStatementBlock ( gramps )  )  {     gramps.removeChild ( parent ) ; }else     if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {         parent.removeChild ( n ) ;         gramps.replaceChild ( parent, n ) ;     }else {         checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;         gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;     }^483^^^^^468^498^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.1 )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.replaceChild ( parent, new Node ( Token.0 )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( gramps.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( CONVERT_WHILE_TO_FOR , name )  ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .setType (  )   == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^491^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( value.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps.addChildAfter ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^parent .removeChildAfter ( n )  ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;parent.removeChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( value, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, value ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild (  n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.replaceChild ( last, block ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^487^488^^^^472^502^parent.removeChild ( n ) ; gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( gramps.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^491^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( value.putBooleanProp (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps.addChildAfter ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.removeChild ( value ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps.replaceChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .removeChildAfter ( replacement )  ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^c.removeChild ( name ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.addChildAfter ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Node value = replacement.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( parent.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.putBooleanProp (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent .removeChildAfter ( replacement )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Node value = n .getLastChild (  )  ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^n.replaceChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P13_Insert_Block]^if  ( isStatementBlock ( n )  )  {     splitVarDeclarations ( n ) ; }^481^^^^^466^496^[Delete]^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .removeChildAfter ( parent )  ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .setType (  )   == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P3_Replace_Literal]^reportCodeChange ( "icatuplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^splitVarDeclarations ( "Duplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^reportCodeChange ( "LABEL normalization" ) ;reportCodeChange ( "Duplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^reportCodeChange ( "WHILE node" ) ;reportCodeChange ( "Duplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^reportCodeChange ( "VAR with multiple children" ) ;reportCodeChange ( "Duplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P11_Insert_Donor_Statement]^reportCodeChange ( "FOR initializer" ) ;reportCodeChange ( "Duplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( forbidChanges , name )  ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.addChildAfter ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^} else if  ( gramps.getType (  )  == Token.4 )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( CONVERT_WHILE_TO_FOR , name )  ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent .removeChildAfter ( replacement )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( NodeUtil.isConstantName ( value )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^Preconditions .checkState ( checkUserDeclarations , name )  ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^gramps .getLastChild (  )  ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( NodeUtil.isConstantName ( replacement )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^parent .removeChildAfter ( nodeWithLineNumber )  ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^}  if  ( value.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  < Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( value .setType (  )   == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P5_Replace_Variable]^if  ( value.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^if  ( n .hasChild ( gramps )   )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^if  ( value.putBooleanProp (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^parent .removeChildAfter ( parent )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^n .removeChildAfter ( nodeWithLineNumber )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P14_Delete_Statement]^^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^} else if  ( replacement.putBooleanProp (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  > Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^Preconditions.checkState ( gramps .setType (  )   == Token.4 ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P8_Replace_Mix]^gramps.addChildAfter ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P3_Replace_Literal]^reportCodeChange ( "atiuplicate VAR declaration" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[P7_Replace_Invocation]^t.traverse (  ) ;^509^^^^^506^510^t.getScope (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  
[P14_Delete_Statement]^^509^^^^^506^510^t.getScope (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  
[P3_Replace_Literal]^return false;^520^^^^^518^521^return true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  nodeTraversal  Node  n  parent  
[P8_Replace_Mix]^private  AbstractCompiler compiler;^109^^^^^104^114^private final AbstractCompiler compiler;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^private  boolean assertOnChange;^110^^^^^105^115^private final boolean assertOnChange;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^this.compiler =  null;^114^^^^^112^116^this.compiler = compiler;^[CLASS] PropogateConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  
[P5_Replace_Variable]^this.assertOnChange = assertOnChange;^115^^^^^112^116^this.assertOnChange = forbidChanges;^[CLASS] PropogateConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, this ) .traverseRoots (  root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, this ) .traverseRoots ( externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal (  this ) .traverseRoots ( externs, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal ( compiler, this ) .traverseRoots ( root, externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P5_Replace_Variable]^new NodeTraversal ( externs, this ) .traverseRoots ( compiler, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P14_Delete_Statement]^^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( var != null )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (info != null) && info.isConstant() && IS_CONSTANT_NAME)) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (info != null && info.isConstant()) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" )  + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  ) )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P15_Unwrap_Block]^if (n.getString().isEmpty()) {    return ;}; com.google.javascript.rhino.JSDocInfo info = null; com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString()); if (var != null) {    info = var.getJSDocInfo();}; if (((info != null) && (info.isConstant())) && (!(n.getBooleanProp(Node.IS_CONSTANT_NAME)))) {    n.putBooleanProp(Node.IS_CONSTANT_NAME, true);    if (assertOnChange) {        java.lang.String name = n.getString();        throw new java.lang.IllegalStateException(((((("Unexpected const change.\n" + "  name: ") + name) + "\n") + "  gramps:") + (n.getParent().getParent().toStringTree())));    }};^126^127^128^129^^124^153^if  ( n.getType (  )  == Token.NAME )  { if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P16_Remove_Block]^^126^127^128^129^^124^153^if  ( n.getType (  )  == Token.NAME )  { if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent.getString (  ) .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P15_Unwrap_Block]^return ;^127^128^129^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P16_Remove_Block]^^127^128^129^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( var == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  ( var != this )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^134^135^136^^^124^153^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P16_Remove_Block]^^134^135^136^^^124^153^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^135^^^^^124^153^info = var.getJSDocInfo (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^135^^^^^124^153^info = var.getJSDocInfo (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  (  ( info != null || info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  (  ( info != parentull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  ( info != null ) {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (info != null && info.isConstant()) )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" )  + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  ) )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  (  ( info != false ) {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( forbidChanges )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nxpec" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + " na"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gr" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  )  .isEmpty (  )   ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n .getString (  )^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n .getString (  )^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P1_Replace_Type]^char name = n.getchar (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "ted connexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^"  gramps:" + n.getParent (  ) .getParent (  )  .isEmpty (  )   ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^"  gramps:" + n .getString (  )^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nxpe" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "m gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "d constnexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + " name name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + " gra" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^return ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^n .getBooleanProp (  )  ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( forbidChanges )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  (  ( "Unexpected const change.\n" + "  name: " )  + name )  + "\n" + "  gramps:" )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  ( "Unexpected const change.\n" + "  name: " )  + name + "\n" )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " + name )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( "Unexpected const change.\n" + "  name: " )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nexpec" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + " name:"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramp" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n .getString (  )^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P1_Replace_Type]^char name = n.getchar (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ==  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "ed const ch" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:a" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^return ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^"  gramps:" + n.getParent (  ) .getParent (  )  .isEmpty (  )   ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^"  gramps:" + n .getString (  )^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unnexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gra" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  )  .isEmpty (  )   ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  )  .isEmpty (  )   ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( n , n )  .getVar ( n.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nexpected c" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + " nam"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P13_Insert_Block]^if  ( n.getString (  ) .isEmpty (  )  )  {     return ; }^127^^^^^124^153^[Delete]^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getParent (  )  ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P11_Insert_Donor_Statement]^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^139^140^^^^124^153^!n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  { n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^n .getBooleanProp (  )  ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  ( var != true )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^if  (  ( info != null && info.isConstant (  )  )  && !n .putBooleanProp ( assertOnChange )   )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "expected const ch" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gr gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nt " + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "a" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nected const chan" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name:   n"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:  gra" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "pe" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: e"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "s" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unex" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "amps" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Un" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "a"+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + " " + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^String parentame = n .getParent (  )  ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nconst change." + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "na name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:  gram" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^throw new IllegalStateException ( "Unexpected const change.\nUne" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^private AbstractCompiler compiler;^162^^^^^157^167^final private AbstractCompiler compiler;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^private boolean checkUserDeclarations;^163^^^^^158^168^final private boolean checkUserDeclarations;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^private Map<String,Boolean> constantMap ;^180^^^^^175^185^private Map<String,Boolean> constantMap = Maps.newHashMap (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^this.compiler =  null;^166^^^^^165^168^this.compiler = compiler;^[CLASS] VerifyConstants  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean checkUserDeclarations [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  
[P8_Replace_Mix]^this.checkUserDeclarations =  null;^167^^^^^165^168^this.checkUserDeclarations = checkUserDeclarations;^[CLASS] VerifyConstants  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean checkUserDeclarations [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  
[P8_Replace_Mix]^Node externsAndJs = externs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Node externsAndJs = externsAndJs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P8_Replace_Mix]^Node externsAndJs = externsAndJs .getString (  )  ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^172^173^^^^171^178^Node externsAndJs = root.getParent (  ) ; Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P2_Replace_Operator]^Preconditions.checkState ( externsAndJs == null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( root != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;Preconditions.checkState ( externsAndJs != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( root.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( rootAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^Preconditions.checkState ( externsAndJs .getString (  )   ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( externsAndJs != null ) ;Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P7_Replace_Invocation]^NodeTraversal .getScope (  )  ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^compiler, Lists.newArrayList ( externs, root ) , this ) ;NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList (  root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P5_Replace_Variable]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P14_Delete_Statement]^^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;compiler, Lists.newArrayList ( externs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( isConstantName(n) || getString()) )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value == null )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value.booleanValue (  )  == isConst )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "The name " + name )  + " is not consistently annotated as " + "constant." )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not consistently annotated as " )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( parent .getParent (  )   == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^java.lang.String name = n.getString(); if (n.getString().isEmpty()) {    return ;}; boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME); if (checkUserDeclarations) {    boolean expectedConst = false;    if ((com.google.javascript.jscomp.NodeUtil.isConstantName(n)) || (compiler.getCodingConvention().isConstant(n.getString()))) {        expectedConst = true;    }else {        expectedConst = false;        com.google.javascript.rhino.JSDocInfo info = null;        com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());        if (var != null) {            info = var.getJSDocInfo();        }        if ((info != null) && (info.isConstant())) {            expectedConst = true;        }else {            expectedConst = false;        }    }    if (expectedConst) {        com.google.common.base.Preconditions.checkState((expectedConst == isConst), (("The name " + name) + " is not annotated as constant."));    }else {        com.google.common.base.Preconditions.checkState((expectedConst == isConst), (("The name " + name) + " should not be annotated as constant."));    }}; java.lang.Boolean value = constantMap.get(name); if (value == null) {    constantMap.put(name, isConst);}else {    com.google.common.base.Preconditions.checkState(((value.booleanValue()) == isConst), ((("The name " + name) + " is not consistently annotated as ") + "constant."));};^184^185^186^187^188^169^199^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^184^185^186^187^188^169^199^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^return ;^186^187^188^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^186^187^188^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  { return; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( NodeUtil.isConstantName ( parent ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( NodeUtil.isConstantName ( n ) ) {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( var != null )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null && info.isConstant() )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isEmpty (  )^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n .getParent (  )   )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( var == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != false )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( value == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^201^202^203^^^193^210^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^201^202^203^^^193^210^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^202^^^^^193^210^info = var.getJSDocInfo (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^202^^^^^193^210^info = var.getJSDocInfo (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( info != null && info .isEmpty (  )   )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != this ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^expectedConst = true;^205^206^207^208^209^193^210^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^205^206^207^208^209^193^210^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^206^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^206^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^197^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^197^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .isEmpty (  )  ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^195^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^195^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( var == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != false )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( value == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^info = var.getJSDocInfo();^201^202^203^^^186^216^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^201^202^203^^^186^216^if  ( var != null )  { info = var.getJSDocInfo (  ) ; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^info =  null.getJSDocInfo (  ) ;^202^^^^^187^217^info = var.getJSDocInfo (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^202^^^^^187^217^info = var.getJSDocInfo (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( info != null ) {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( info != null && info .isEmpty (  )   )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != true ) {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P15_Unwrap_Block]^expectedConst = true;^205^206^207^208^209^190^220^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P16_Remove_Block]^^205^206^207^208^209^190^220^if  ( info != null && info.isConstant (  )  )  { expectedConst = true; } else { expectedConst = false; }^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^205^209^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^205^209^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^206^^^^^191^221^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^206^^^^^191^221^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( checkUserDeclarations )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not annotated as constant." )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( expectedConst == isConst )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " should not be annotated as constant." )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name  <  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  |  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "he " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant.hou" ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^216^^^^^212^218^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name  &  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name The nam" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^213^^^^^198^228^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = false;^195^^^^^180^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = false;expectedConst = true;^195^^^^^180^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^197^^^^^182^212^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^197^^^^^182^212^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^expectedConst = true;^208^^^^^193^223^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P11_Insert_Donor_Statement]^expectedConst = true;expectedConst = false;^208^^^^^193^223^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^boolean expectedConst = true;^192^^^^^177^207^boolean expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P12_Insert_Condition]^if  ( expectedConst )  { boolean expectedConst = false; }^192^^^^^177^207^boolean expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^|| compiler.getCodingConvention (  ) .isConstant ( parent.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^|| compiler.getCodingConvention (  )  .isEmpty (  )   )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^194^195^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  { expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n .getParent (  )   ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name h" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant.t annotated as " ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst > isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name  <<  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name  " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " sho" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^216^^^^^201^231^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != this )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != false ) {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent .getParent (  )   ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != true )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != false ) {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( isConst )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name  >>  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ||  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "a" ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "a" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^if  ( value != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( value.booleanValue (  )  == isConst )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  (  ( "The name " + name )  + " is not consistently annotated as " + "constant." )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name + " is not consistently annotated as " )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P6_Replace_Expression]^if  ( "The name " + name )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( value == false )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P9_Replace_Statement]^if  ( var != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  <= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  <  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  &  name  &  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  &  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "Th" + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as  " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant.nstant" ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^225^^^^^222^228^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( name, expectedConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put (  isConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^constantMap .get ( 0 )  ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P1_Replace_Type]^char name = n.getchar (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^String parentame = n .getParent (  )  ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^boolean isConst = parent.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .isEmpty (  )  ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n.getString (  )  .isConstant (  )   )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( n.getString (  ) .isEmpty (  )  )  {     return ; }^186^^^^^171^201^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^|| compiler.getCodingConvention (  ) .isConstant ( n .getParent (  )   )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^|| compiler.getCodingConvention (  ) .isConstant ( parent .getParent (  )   )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name  <  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ||  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "e nhe name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotate" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name  &  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, " " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "shou" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  >= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  >=  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  ^  name  ^  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  ^  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name The " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as s not co" + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "consta" ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P14_Delete_Statement]^^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P13_Insert_Block]^if  ( value == null )  {     constantMap.put ( name, isConst ) ; }else {     checkState (  (  ( value.booleanValue (  )  )  == isConst ) ,  (  (  ( "The name " + name )  + " is not consistently annotated as " )  + "constant." )  ) ; }^225^^^^^210^240^[Delete]^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( NodeUtil.isConstantName ( parent ) || compiler.getCodingConvention (  ) .isConstant ( n .getParent (  )   )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Var var = t .traverseRoots ( compiler , null )  .getVar ( n.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != this )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( info != this ) {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, " name" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "annotated as consshould not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "ehe name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant. annotate" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent .getParent (  )   ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name  <=  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name he n" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "hhe name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant. shoul" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( var != true )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name  &&  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "he nam" + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annota" ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name nam" + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant. is" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P8_Replace_Mix]^if  ( value == this )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  <=  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >  name  >  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  |  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "he he name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + "nnotate" + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "on" ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^boolean isConst = n .getParent (  )  ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^if  ( n .getParent (  )  .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name e " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + "con" ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name  >>  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name a" + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant.h" ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  <=  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  !=  name  !=  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  |  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "amhe name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P3_Replace_Literal]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + "ot consistently annotateis not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P5_Replace_Variable]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[P2_Replace_Operator]^Preconditions.checkState ( n.getType (  )  != Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( n.removeChild (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getFirstChild (  )   == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  > Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  < Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^if  ( gramps.getType() == FOR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^if  ( parent .getFirstChild (  )   == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^if  ( replacement.removeChild (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^if  ( n .hasOneChild (  )   )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^if  ( replacement.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^} else if  ( gramps.getType (  )  == LABEL )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^} else {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^} else if  ( gramps.removeChild (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^} else if  ( gramps .getFirstChild (  )   == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^}  if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P13_Insert_Block]^if  ( isStatementBlock ( gramps )  )  {     gramps.removeChild ( parent ) ; }else     if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {         parent.removeChild ( n ) ;         gramps.replaceChild ( parent, n ) ;     }else {         checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;         gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;     }^483^^^^^471^493^[Delete]^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.removeChild (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .getFirstChild (  )   == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( value.removeChild (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^491^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( replacement, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^487^488^^^^471^493^parent.removeChild ( n ) ; gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( value, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, value ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild (  n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( gramps )  ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( gramps , gramps )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( parent )  ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.removeChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps.replaceChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps.replaceChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;gramps.removeChild ( parent ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  < Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( parent , value )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( nodeWithLineNumber )  ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .replaceChild ( n , value )  ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( gramps )  ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ASSIGN,  value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^Node replacement = new Node ( Token.ASSIGN, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node replacement = new Node ( Token.ASSIGN, n, replacement ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node replacement = new Node ( Token. n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, value )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token. replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node value = replacement.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Node value = n.removeChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node replacement = valueew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Node replacement = new Node ( Token.ASSIGN, n, parent ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Node value = value.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^n.removeChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^n.replaceChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^n .replaceChild ( n , value )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^n .replaceChild ( value , replacement )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^476^477^^^^461^491^n.removeChild ( value ) ; Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;n.removeChild ( value ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == LABEL )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^} else if  ( gramps.getType (  )  == LABEL )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P6_Replace_Expression]^} else {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^} else if  ( gramps.removeChild (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P13_Insert_Block]^if  ( isStatementBlock ( gramps )  )  {     gramps.removeChild ( parent ) ; }else     if  (  ( gramps.getType (  )  )  ==  ( FOR )  )  {         parent.removeChild ( n ) ;         gramps.replaceChild ( parent, n ) ;     }else {         checkState (  (  ( gramps.getType (  )  )  ==  ( LABEL )  )  ) ;         gramps.replaceChild ( parent, new Node ( EMPTY )  ) ;     }^483^^^^^468^498^[Delete]^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps.replaceChild ( parent, new Node ( Token.null )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.removeChild (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .getFirstChild (  )   == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^491^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^487^488^^^^472^502^parent.removeChild ( n ) ; gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;parent.removeChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( n ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( value, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, value ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild (  n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( gramps )  ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.removeChild ( parent ) ;gramps.replaceChild ( parent, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps.removeChild (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( replacement .getFirstChild (  )   == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^491^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ; gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P4_Replace_Constructor]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( gramps )  ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.removeChild ( value ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps.replaceChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, n ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;gramps.removeChild ( parent ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^} else if  ( gramps .getFirstChild (  )   == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( n )  ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps.replaceChild ( replacement, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( parent )  ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.removeChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.removeChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^if  ( value.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( value , replacement )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Node value = n .removeChild ( value )  ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^n .replaceChild ( replacement , gramps )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^n.replaceChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( n )  ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( nodeWithLineNumber )  ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps .getFirstChild (  )   == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps .removeChild ( parent )  ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P3_Replace_Literal]^reportCodeChange ( "ate VAR" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.null )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( value .getFirstChild (  )   == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent .replaceChild ( replacement , n )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^} else if  ( value.removeChild (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( value , gramps )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.removeChild (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .replaceChild ( value , gramps )  ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^}  if  ( value.removeChild (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( nodeWithLineNumber )  ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( value )  ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isStatementBlock ( replacement )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( parent , replacement )  ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( parent )  ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( replacement , nodeWithLineNumber )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Node value = value.removeChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^n .replaceChild ( nodeWithLineNumber , gramps )  ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps .removeChild ( nodeWithLineNumber )  ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent.replaceChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent .replaceChild ( parent , nodeWithLineNumber )  ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P2_Replace_Operator]^Preconditions.checkState ( gramps.getType (  )  < Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .replaceChild ( gramps , n )  ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( gramps , parent )  ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Node value = n .removeChild ( gramps )  ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( parent .removeChild ( value )   ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( value.removeChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^parent .replaceChild ( nodeWithLineNumber , nodeWithLineNumber )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^parent .replaceChild ( parent , parent )  ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^Node value = n .removeChild ( replacement )  ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P7_Replace_Invocation]^gramps .removeChild ( parent )  ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isStatementBlock ( replacement )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^gramps .removeChild ( replacement )  ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.removeChild (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P5_Replace_Variable]^gramps.replaceChild ( replacement, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P3_Replace_Literal]^reportCodeChange ( "Duplicate" ) ;^494^^^^^479^509^reportCodeChange ( "Duplicate VAR declaration" ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[P14_Delete_Statement]^^509^^^^^506^510^t.getScope (  ) ;^[CLASS] ScopeTicklingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  
[P3_Replace_Literal]^return false;^520^^^^^518^521^return true;^[CLASS] ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
