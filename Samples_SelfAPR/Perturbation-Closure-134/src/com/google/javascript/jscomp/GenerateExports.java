[P1_Replace_Type]^private static final char PROTOTYPE_PROPERTY = "prototype";^33^^^^^28^38^private static final String PROTOTYPE_PROPERTY = "prototype";^[CLASS] GenerateExports   [VARIABLES] 
[P3_Replace_Literal]^private static final String PROTOTYPE_PROPERTY = "prorototype";^33^^^^^28^38^private static final String PROTOTYPE_PROPERTY = "prototype";^[CLASS] GenerateExports   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^35^^^^^30^40^private final AbstractCompiler compiler;^[CLASS] GenerateExports   [VARIABLES] 
[P1_Replace_Type]^private final char exportSymbolFunction;^37^^^^^32^42^private final String exportSymbolFunction;^[CLASS] GenerateExports   [VARIABLES] 
[P1_Replace_Type]^private final char exportPropertyFunction;^39^^^^^34^44^private final String exportPropertyFunction;^[CLASS] GenerateExports   [VARIABLES] 
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^49^^^^^47^56^Preconditions.checkNotNull ( compiler ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P14_Delete_Statement]^^49^^^^^47^56^Preconditions.checkNotNull ( compiler ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( exportSymbolFunction ) ;Preconditions.checkNotNull ( compiler ) ;^49^^^^^47^56^Preconditions.checkNotNull ( compiler ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( exportPropertyFunction ) ;Preconditions.checkNotNull ( compiler ) ;^49^^^^^47^56^Preconditions.checkNotNull ( compiler ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P5_Replace_Variable]^Preconditions.checkNotNull ( exportPropertyFunction ) ;^50^^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^50^^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P14_Delete_Statement]^^50^51^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ; Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( exportPropertyFunction ) ;Preconditions.checkNotNull ( exportSymbolFunction ) ;^50^^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( exportSymbolFunction ) ;^50^^^^^47^56^Preconditions.checkNotNull ( exportSymbolFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P5_Replace_Variable]^Preconditions.checkNotNull ( exportSymbolFunction ) ;^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P14_Delete_Statement]^^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( exportSymbolFunction ) ;Preconditions.checkNotNull ( exportPropertyFunction ) ;^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( exportPropertyFunction ) ;^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^context.getNode (  ) , exportPropertyFunction ) } ) ;Preconditions.checkNotNull ( exportPropertyFunction ) ;^51^^^^^47^56^Preconditions.checkNotNull ( exportPropertyFunction ) ;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P8_Replace_Mix]^this.compiler =  null;^53^^^^^47^56^this.compiler = compiler;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P5_Replace_Variable]^this.exportSymbolFunction = exportPropertyFunction;^54^^^^^47^56^this.exportSymbolFunction = exportSymbolFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^this.exportPropertyFunction = exportPropertyFunction;this.exportSymbolFunction = exportSymbolFunction;^54^^^^^47^56^this.exportSymbolFunction = exportSymbolFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P5_Replace_Variable]^this.exportPropertyFunction = exportSymbolFunction;^55^^^^^47^56^this.exportPropertyFunction = exportPropertyFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P11_Insert_Donor_Statement]^this.exportSymbolFunction = exportSymbolFunction;this.exportPropertyFunction = exportPropertyFunction;^55^^^^^47^56^this.exportPropertyFunction = exportPropertyFunction;^[CLASS] GenerateExports  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, node, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, findExportableNodes ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, findExportableNodes, root ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse ( findExportableNodes, root, compiler ) ;^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^61^^^^^46^76^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^62^63^^^^47^77^Map<String, GenerateNodeContext> exports = findExportableNodes .getExports (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( externs.getType (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( getType() == GETPROP && PROTOTYPE_PROPERTY) )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( node.getFirstChild (  ) .getType (  )  == GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.newString (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.equals (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node .getLastChild (  )   == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( root.getType (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P15_Unwrap_Block]^parent = node.getFirstChild().getQualifiedName(); if (((node.getFirstChild().getType()) == (com.google.javascript.rhino.Token.GETPROP)) && (getPropertyName(node.getFirstChild()).equals(com.google.javascript.jscomp.GenerateExports.PROTOTYPE_PROPERTY))) {    grandparent = node.getFirstChild().getFirstChild().getQualifiedName();};^78^79^80^81^82^63^93^if  ( node.getType (  )  == Token.GETPROP )  { parent = node.getFirstChild (  ) .getQualifiedName (  ) ; if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P16_Remove_Block]^^78^79^80^81^82^63^93^if  ( node.getType (  )  == Token.GETPROP )  { parent = node.getFirstChild (  ) .getQualifiedName (  ) ; if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P13_Insert_Block]^if  (  (  ( node.getFirstChild (  ) .getType (  )  )  ==  ( GETPROP )  )  &&  ( getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  )  {     grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^78^^^^^63^93^[Delete]^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP || getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^if  ( node.getFirstChild (  ) .getType (  )  >= Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( externs.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( grandparent )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( PROTOTYPE_PROPERTY.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( node )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP ) {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  (  getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( node.getFirstChild (  ) .getType (  )  == GETPROP )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  ) .equals (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  )  .getLastChild (  )   == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.newString (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .addChildAfter ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  )  .getQualifiedName (  )   )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && annotate ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node .getString (  )  .getType (  )  == Token.GETPROP && getPropertyName ( node^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( node.addChildAfter (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( root.getFirstChild (  ) .getType (  )  == Token.GETPROP ) {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P15_Unwrap_Block]^grandparent = node.getFirstChild().getFirstChild().getQualifiedName();^80^81^82^83^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P16_Remove_Block]^^80^81^82^83^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( GETPROP )  )  {     parent = node.getFirstChild (  ) .getQualifiedName (  ) ;     if  (  (  ( node.getFirstChild (  ) .getType (  )  )  ==  ( GETPROP )  )  &&  ( getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  )  {         grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;     } }^80^^^^^65^95^[Delete]^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^grandparent = root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .equals (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.getFirstChild (  ) .getFirstChild (  )  .equals ( property )  ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.addChildAfter (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.newString (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node .getString (  )^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent = externs.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^82^83^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent = root.addChildAfter (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent = externs .getString (  )^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^parent = root.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^parent = node.getFirstChild (  ) .equals (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^parent = node.newString (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^parent =  externs.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^grandparent = root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .equals (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.getFirstChild (  ) .getFirstChild (  )  .equals ( grandparent )  ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.addChildAfter (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node .getString (  )^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^grandparent = node.newString (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^parent = node.getFirstChild (  )  .equals ( exportSymbolFunction )  ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^parent = node .getString (  )  .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^parent = root.newString (  ) .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^79^80^81^82^83^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ; if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( root.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^getPropertyName ( root.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^getPropertyName ( node.getFirstChild (  )  ) .equals ( parent )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^getPropertyName ( PROTOTYPE_PROPERTY.getFirstChild (  )  ) .equals ( node )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^getPropertyName ( node.getFirstChild (  )  ) .addChildAfter ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^annotate ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^getPropertyName ( node.newString (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^getPropertyName ( node .getString (  )   ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^annotate ( externs.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^81^82^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^getPropertyName ( externs.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^81^^^^^66^96^getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^grandparent = externs.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^82^83^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( property )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent =  null.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent = externs.newString (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^if  ( grandparent != null || exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^if  ( grandparent == null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( property != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( grandproperty != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( exports != null && grandparent.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( grandparent != null ) {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  (  exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( parent != null && exports.containsKey(parent) )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^if  ( parent != null )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^if  ( grandparent != null && exports .entrySet (  )   )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( grandparent != true ) {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P15_Unwrap_Block]^useExportSymbol = false;^87^88^89^90^91^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  { useExportSymbol = false; } else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P16_Remove_Block]^^87^88^89^90^91^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  { useExportSymbol = false; } else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^} else if  ( parent != null || exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P2_Replace_Operator]^} else if  ( parent == null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^} else if  ( property != null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^} else if  ( exports != null && parent.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^} else if  ( parent != null ) {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^} else if  (  exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P6_Replace_Expression]^} else {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^}  if  (  exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P15_Unwrap_Block]^useExportSymbol = false;^89^90^91^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P16_Remove_Block]^^89^90^91^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P3_Replace_Literal]^useExportSymbol = true;^90^^^^^75^105^useExportSymbol = false;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^} else if  ( parent != null && exports .entrySet (  )   )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^} else if  ( exportSymbolFunction != null && exports.containsKey ( parent )  )  {^89^^^^^74^104^} else if  ( parent != null && exports.containsKey ( parent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P3_Replace_Literal]^useExportSymbol = true;^88^^^^^73^103^useExportSymbol = false;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token. new Node[] {^105^106^^^^94^115^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call =  new Node ( Token.CALL, new Node[] {^105^106^^^^94^115^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P1_Replace_Type]^char property = getPropertyName ( node ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^String property = getPropertyName ( root ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^String property = annotate ( node ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^String property = getPropertyName ( externs ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^String export = entry.getKey (  ) ;String property = getPropertyName ( node ) ;^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^104^^^^^94^115^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^NodeUtil.newQualifiedNameNode ( property, context .getScriptNode (  )  , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context^107^108^109^110^^94^115^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^context .getScriptNode (  )  , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context^108^109^110^111^^94^115^context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  )  ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^NodeUtil.newQualifiedNameNode ( grandparent, context .getScriptNode (  )  , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^115^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context .getScriptNode (  )  , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context^110^111^112^113^^94^115^context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction )^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^Node.newString ( exportSymbolFunction ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^111^112^113^114^^94^115^Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^Node .getLastChild (  )  , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^111^112^113^114^^94^115^Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , property ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  )  ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^112^113^114^115^^94^115^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^113^114^^^^94^115^context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P4_Replace_Constructor]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P4_Replace_Constructor]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  )  )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( propertySymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token. NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context .getScriptNode (  )  , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call =  new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, null.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( parentSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( propertySymbolFunction, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  )  )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, exportSymbolFunction.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportSymbolFunctionSymbolFunction, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportSymbolFunction )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context .getScriptNode (  )  , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^context .getScriptNode (  )  , export )  ) ;^98^^^^^83^113^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^98^^^^^83^113^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^Node node = context.getNode (  ) .getFirstChild (  ) ;context.getNode (  ) , export )  ) ;^98^^^^^83^113^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getNode (  ) , exportPropertyFunction ) } ) ;context.getNode (  ) , export )  ) ;^98^^^^^83^113^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getContextNode (  )  ) ;context.getNode (  ) , export )  ) ;^98^^^^^83^113^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( Node.newString ( parent )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call.addChildToBack ( Node.newString ( property )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( Node.newString ( grandparent )  ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^call.addChildToBack ( Node .getLastChild (  )   ) ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode (  context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context .getScriptNode (  )  , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( context, export.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^101^^^^^86^116^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^Node node = context.getNode (  ) .getFirstChild (  ) ;context.getNode (  ) , export )  ) ;^101^^^^^86^116^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getNode (  ) , exportPropertyFunction ) } ) ;context.getNode (  ) , export )  ) ;^101^^^^^86^116^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getContextNode (  )  ) ;context.getNode (  ) , export )  ) ;^101^^^^^86^116^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( context, exportSymbolFunction.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunctionSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token. new Node[] {^105^106^^^^90^120^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call =  new Node ( Token.CALL, new Node[] {^105^106^^^^90^120^call = new Node ( Token.CALL, new Node[] {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( grandparentSymbolFunction, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , export )  ) ;^96^97^98^^^81^111^call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^Node expression = new Node ( Token.EXPR_RESULT, root ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^Node expression = new Node ( Token.EXPR_RESULT ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^Node expression = new Node ( Token. call ) ;^117^^^^^102^132^Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P1_Replace_Type]^char export = entry.getKey (  ) ;^66^^^^^51^81^String export = entry.getKey (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^String property = getPropertyName ( node ) ;String export = entry.getKey (  ) ;^66^^^^^51^81^String export = entry.getKey (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^GenerateNodeContext context = this.getValue (  ) ;^67^^^^^52^82^GenerateNodeContext context = entry.getValue (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^GenerateNodeContext context = entry .getKey (  )  ;^67^^^^^52^82^GenerateNodeContext context = entry.getValue (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P1_Replace_Type]^char parent = null;^74^^^^^59^89^String parent = null;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^String grandparent = null;String parent = null;^74^^^^^59^89^String parent = null;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P1_Replace_Type]^char grandparent = null;^75^^^^^60^90^String grandparent = null;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^String parent = null;String grandparent = null;^75^^^^^60^90^String grandparent = null;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^Node node = context.getNode (  ) .addChildAfter (  ) ;^77^^^^^62^92^Node node = context.getNode (  ) .getFirstChild (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^Node node = context.getNode (  )  .getString (  )  ;^77^^^^^62^92^Node node = context.getNode (  ) .getFirstChild (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^Node node = context .getScriptNode (  )  .getFirstChild (  ) ;^77^^^^^62^92^Node node = context.getNode (  ) .getFirstChild (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P3_Replace_Literal]^boolean useExportSymbol = false;^86^^^^^71^101^boolean useExportSymbol = true;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P12_Insert_Condition]^if  ( useExportSymbol )  { boolean useExportSymbol = true; }^86^^^^^71^101^boolean useExportSymbol = true;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P1_Replace_Type]^char property = getPropertyName ( node ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^String property = getPropertyName ( root ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^String property = annotate ( node ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^String export = entry.getKey (  ) ;String property = getPropertyName ( node ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^for  ( Map.Entry<String, GenerateNodeContext> entry : exports.containsKey (  )  )  {^65^^^^^50^80^for  ( Map.Entry<String, GenerateNodeContext> entry : exports.entrySet (  )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^for  ( Map.Entry<String, GenerateNodeContext> entry : exports .containsKey ( exportPropertyFunction )   )  {^65^^^^^50^80^for  ( Map.Entry<String, GenerateNodeContext> entry : exports.entrySet (  )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^String export = entry .getValue (  )  ;^66^^^^^51^81^String export = entry.getKey (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^66^67^^^^51^81^String export = entry.getKey (  ) ; GenerateNodeContext context = entry.getValue (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^67^^^^^52^82^GenerateNodeContext context = entry.getValue (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^77^^^^^62^92^Node node = context.getNode (  ) .getFirstChild (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getNode (  ) , export )  ) ;Node node = context.getNode (  ) .getFirstChild (  ) ;^77^^^^^62^92^Node node = context.getNode (  ) .getFirstChild (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( root.newString (  )  == Token.GETPROP )  {^78^^^^^63^93^if  ( node.getType (  )  == Token.GETPROP )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^parent = root .getString (  )  .getQualifiedName (  ) ;^79^^^^^64^94^parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^if  ( externs.newString (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^65^95^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^grandparent = root.newString (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^67^97^grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^if  ( exportSymbolFunction != null && exports.containsKey ( grandparent )  )  {^87^^^^^72^102^if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parentSymbolFunction, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( contextSymbolFunction, export.getNode (  ) , export )  ) ;^97^98^^^^82^112^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^call .getFirstChild (  )  ;^99^^^^^84^114^call.addChildToBack ( Node.newString ( export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( grandparent, context .getScriptNode (  )  , export )  ) ;^100^101^^^^85^115^call.addChildToBack ( NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context .getScriptNode (  )  , export )  ) ;^101^^^^^86^116^context.getNode (  ) , export )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^String property = getPropertyName ( externs ) ;^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^104^^^^^89^119^String property = getPropertyName ( node ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, exportPropertyFunction.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context .getScriptNode (  )  , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context^107^108^109^110^^92^122^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context .getScriptNode (  )  , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context^108^109^110^111^^93^123^context.getNode (  ) , exportPropertyFunction ) , NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) ,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , property ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  )  ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , parent ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( context, parent.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^NodeUtil.newQualifiedNameNode ( parent, context .getScriptNode (  )  , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^109^110^111^112^^94^124^NodeUtil.newQualifiedNameNode ( parent, context.getNode (  ) , exportPropertyFunction ) , Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export,^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^Node.newString ( parent ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^111^112^113^114^^96^126^Node.newString ( property ) , NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( property, context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , property ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode (  context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, context.getNode (  )  ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( exportPropertyFunction, context.getNode (  ) , export ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeUtil.newQualifiedNameNode ( export, exportPropertyFunction.getNode (  ) , context ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P8_Replace_Mix]^NodeUtil.newQualifiedNameNode ( grandparent, context.getNode (  ) , exportPropertyFunction ) } ) ;^112^113^114^^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^112^113^114^115^^97^127^NodeUtil.newQualifiedNameNode ( export, context.getNode (  ) , exportPropertyFunction ) } ) ; }^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context .getScriptNode (  )  , exportPropertyFunction ) } ) ;^113^114^^^^98^128^context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^113^114^^^^98^128^context.getNode (  ) , exportPropertyFunction ) } ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^annotate ( root ) ;^118^^^^^103^133^annotate ( expression ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^getPropertyName ( expression ) ;^118^^^^^103^133^annotate ( expression ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^118^^^^^103^133^annotate ( expression ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^context.getScriptNode (  ) .addChildAfter ( expression.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^context.getScriptNode (  ) .addChildAfter (  context.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^context.getScriptNode (  ) .addChildAfter ( context, expression.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context.getScriptNode (  )  .getQualifiedName (  )  ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P7_Replace_Invocation]^context .getContextNode (  )  .addChildAfter ( expression, context.getContextNode (  )  ) ;^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^119^120^^^^104^134^context.getScriptNode (  ) .addChildAfter ( expression, context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^120^^^^^105^135^context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P11_Insert_Donor_Statement]^context.getNode (  ) , export )  ) ;context.getContextNode (  )  ) ;^120^^^^^105^135^context.getContextNode (  )  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P14_Delete_Statement]^^121^^^^^106^136^compiler.reportCodeChange (  ) ;^[CLASS] GenerateExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Entry  entry  boolean  useExportSymbol  Node  call  expression  externs  node  root  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  FindExportableNodes  findExportableNodes  Map  exports  GenerateNodeContext  context  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P5_Replace_Variable]^NodeTraversal.traverse (  node, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P5_Replace_Variable]^NodeTraversal.traverse ( node, compiler, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P14_Delete_Statement]^^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^126^127^^^^125^128^NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[CLASS] GenerateExports  [METHOD] annotate [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  >= Token.GETPROP ) ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( node.getType (  )  == Token.GETPROP ) ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.newString (  )  == Token.GETPROP ) ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node .getLastChild (  )   == Token.GETPROP ) ;^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P14_Delete_Statement]^^137^138^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ; return node.getLastChild (  ) .getString (  ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P12_Insert_Condition]^if  ( node.getType (  )  == Token.GETPROP )  { Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ; }^137^^^^^136^139^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^return node.getLastChild (  ) .equals (  ) ;^138^^^^^136^139^return node.getLastChild (  ) .getString (  ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^return node.newString (  ) .getString (  ) ;^138^^^^^136^139^return node.getLastChild (  ) .getString (  ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P7_Replace_Invocation]^return node .getFirstChild (  )  .getString (  ) ;^138^^^^^136^139^return node.getLastChild (  ) .getString (  ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
[P14_Delete_Statement]^^138^^^^^136^139^return node.getLastChild (  ) .getString (  ) ;^[CLASS] GenerateExports  [METHOD] getPropertyName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  String  PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  boolean  Node  node  
