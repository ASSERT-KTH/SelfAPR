[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^41^^^^^36^46^private static final long serialVersionUID = 1L;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^41^^^^^36^46^private static final long serialVersionUID = 1L;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P8_Replace_Mix]^private  boolean isExtern;^43^^^^^38^48^private final boolean isExtern;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P8_Replace_Mix]^private  SourceAst ast;^44^^^^^39^49^private final SourceAst ast;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P1_Replace_Type]^final private char name;^45^^^^^40^50^final private String name;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> provides = Sets.newHashSet (  ) ;^46^^^^^41^51^private final Set<String> provides = Sets.newHashSet (  ) ;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P8_Replace_Mix]^private final Set<String> requires ;^47^^^^^42^52^private final Set<String> requires = Sets.newHashSet (  ) ;^[CLASS] CompilerInput DepsFinder   [VARIABLES] 
[P3_Replace_Literal]^this ( ast, ast.getSourceFile (  ) .getName (  ) , true ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P7_Replace_Invocation]^this ( ast, ast.setSourceFile (  ) .getName (  ) , false ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P14_Delete_Statement]^^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getCode (  ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getLine ( lineNumber ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P7_Replace_Invocation]^this ( ast, ast.getSourceFile (  )  .getName (  )  , false ) ;^50^^^^^49^51^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst)   SourceAst ast [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P5_Replace_Variable]^this ( ast, ast.getSourceFile (  ) .getName (  ) , findRequire ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P5_Replace_Variable]^this (  ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P5_Replace_Variable]^this ( ast, ast.getSourceFile (  ) .getName (  )  ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P5_Replace_Variable]^this ( isExtern, ast.getSourceFile (  ) .getName (  ) , ast ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P7_Replace_Invocation]^this ( ast, ast.setSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P14_Delete_Statement]^^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getCode (  ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getLine ( lineNumber ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getRegion ( lineNumber ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P7_Replace_Invocation]^this ( ast, ast.getSourceFile (  )  .getName (  )  , isExtern ) ;^54^^^^^53^55^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] SourceAst,boolean)   SourceAst ast boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  name  long  serialVersionUID  
[P8_Replace_Mix]^this.ast =  null;^58^^^^^57^61^this.ast = ast;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.isExtern = isExtern;this.ast = ast;^58^^^^^57^61^this.ast = ast;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^this.name = name;^59^^^^^57^61^this.name = inputName;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.name = file.getName (  ) ;this.name = inputName;^59^^^^^57^61^this.name = inputName;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^this.isExtern = findRequire;^60^^^^^57^61^this.isExtern = isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.ast = ast;this.isExtern = isExtern;^60^^^^^57^61^this.isExtern = isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] String,boolean)   SourceAst ast String inputName boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P3_Replace_Literal]^this ( file, true ) ;^64^^^^^63^65^this ( file, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile)   JSSourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P14_Delete_Statement]^^64^^^^^63^65^this ( file, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile)   JSSourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P8_Replace_Mix]^this.ast =  new JsAst ( null ) ;^68^^^^^67^71^this.ast = new JsAst ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P8_Replace_Mix]^this.name =  null.getName (  ) ;^69^^^^^67^71^this.name = file.getName (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.types = Lists.newArrayList (  ) ;this.name = file.getName (  ) ;^69^^^^^67^71^this.name = file.getName (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.name = inputName;this.name = file.getName (  ) ;^69^^^^^67^71^this.name = file.getName (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P7_Replace_Invocation]^this.name = file .getName (  )  ;^69^^^^^67^71^this.name = file.getName (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P14_Delete_Statement]^^69^^^^^67^71^this.name = file.getName (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P5_Replace_Variable]^this.isExtern = findRequire;^70^^^^^67^71^this.isExtern = isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.ast = ast;this.isExtern = isExtern;^70^^^^^67^71^this.isExtern = isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] JSSourceFile,boolean)   JSSourceFile file boolean isExtern [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  JSSourceFile  file  long  serialVersionUID  
[P5_Replace_Variable]^this.findRequire = isExtern;^133^^^^^132^136^this.findRequire = findRequire;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^this.codingConvention =  null.getCodingConvention (  ) ;^134^^^^^132^136^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^134^^^^^132^136^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^this.types ;^135^^^^^132^136^this.types = Lists.newArrayList (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.name = file.getName (  ) ;this.types = Lists.newArrayList (  ) ;^135^^^^^132^136^this.types = Lists.newArrayList (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^135^^^^^132^136^this.types = Lists.newArrayList (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^return inputName;^75^^^^^74^76^return name;^[CLASS] CompilerInput DepsFinder  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^return compiler.getAstRoot ( ast ) ;^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^return ast.setSourceFile ( compiler ) ;^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^return ast .getSourceFile (  )  ;^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^80^^^^^79^81^return ast.getAstRoot ( compiler ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^ast.getSourceFile (  ) ;^85^^^^^84^86^ast.clearAst (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] clearAst [RETURN_TYPE] void   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^85^^^^^84^86^ast.clearAst (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] clearAst [RETURN_TYPE] void   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^return ast.clearAst (  ) ;^90^^^^^89^91^return ast.getSourceFile (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getSourceFile [RETURN_TYPE] SourceFile   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^90^^^^^89^91^return ast.getSourceFile (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getSourceFile [RETURN_TYPE] SourceFile   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^ast.getAstRoot ( file ) ;^95^^^^^94^96^ast.setSourceFile ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  SourceFile  file  long  serialVersionUID  
[P7_Replace_Invocation]^ast .getSourceFile (  )  ;^95^^^^^94^96^ast.setSourceFile ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  SourceFile  file  long  serialVersionUID  
[P14_Delete_Statement]^^95^^^^^94^96^ast.setSourceFile ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  SourceFile  file  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return getSourceFile (  ) .getCode (  ) ;ast.setSourceFile ( file ) ;^95^^^^^94^96^ast.setSourceFile ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  SourceFile  file  long  serialVersionUID  
[P11_Insert_Donor_Statement]^return ast.getSourceFile (  ) ;ast.setSourceFile ( file ) ;^95^^^^^94^96^ast.setSourceFile ( file ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  inputName  name  SourceFile  file  long  serialVersionUID  
[P2_Replace_Operator]^if  ( getAstRoot ( compiler )  == null )  {^105^^^^^104^113^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( getRequires ( compiler )  != null )  {^105^^^^^104^113^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^if  ( getAstRoot ( compiler )  != true )  {^105^^^^^104^113^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( getAstRoot ( compiler )  )  != null )  {     DepsFinder deps = new DepsFinder ( compiler, false ) ;     traverse ( compiler, getAstRoot ( compiler ) , deps ) ;     provides.addAll ( deps.types ) ;     return provides; }else {     return String>of (  ) ; }^105^^^^^104^113^[Delete]^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^111^^^^^104^113^return ImmutableSet.<String>of (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P3_Replace_Literal]^DepsFinder deps = new DepsFinder ( compiler, false ) ;^106^^^^^104^113^DepsFinder deps = new DepsFinder ( compiler, true ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^DepsFinder deps = new DepsFinder ( compiler, false ) ;DepsFinder deps = new DepsFinder ( compiler, true ) ;^106^^^^^104^113^DepsFinder deps = new DepsFinder ( compiler, true ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse (  getAstRoot ( compiler ) , deps ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, getAstRoot ( compiler )  ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^NodeTraversal.traverse ( compiler, getRequires ( compiler ) , deps ) ;^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^107^108^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ; requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^requires.addAll ( deps.types.types ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^requires.addAll ( deps ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^provides.addAll ( deps.types ) ;requires.addAll ( deps.types ) ;^108^^^^^104^113^requires.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^107^^^^^104^113^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRequires [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^if  ( getAstRoot ( compiler )  == null )  {^117^^^^^116^125^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( getRequires ( compiler )  != null )  {^117^^^^^116^125^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^if  ( getRequires ( compiler )  != this )  {^117^^^^^116^125^if  ( getAstRoot ( compiler )  != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( getAstRoot ( compiler )  )  != null )  {     DepsFinder deps = new DepsFinder ( compiler, true ) ;     traverse ( compiler, getAstRoot ( compiler ) , deps ) ;     requires.addAll ( deps.types ) ;     return requires; }else {     return String>of (  ) ; }^117^^^^^116^125^[Delete]^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^123^^^^^116^125^return ImmutableSet.<String>of (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^return 0;^121^^^^^116^125^return provides;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P3_Replace_Literal]^DepsFinder deps = new DepsFinder ( compiler, true ) ;^118^^^^^116^125^DepsFinder deps = new DepsFinder ( compiler, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^DepsFinder deps = new DepsFinder ( compiler, true ) ;DepsFinder deps = new DepsFinder ( compiler, false ) ;^118^^^^^116^125^DepsFinder deps = new DepsFinder ( compiler, false ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse (  getAstRoot ( compiler ) , deps ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, getAstRoot ( compiler )  ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^NodeTraversal.traverse ( deps, getAstRoot ( compiler ) , compiler ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^NodeTraversal.traverse ( compiler, getRequires ( compiler ) , deps ) ;^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^119^120^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ; provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^119^^^^^116^125^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^provides.addAll ( deps.types.types ) ;^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^requires.addAll ( deps.types ) ;provides.addAll ( deps.types ) ;^120^^^^^116^125^provides.addAll ( deps.types ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^return 3;^121^^^^^116^125^return provides;^[CLASS] CompilerInput DepsFinder  [METHOD] getProvides [RETURN_TYPE] Set   AbstractCompiler compiler [VARIABLES] SourceAst  ast  AbstractCompiler  compiler  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  DepsFinder  deps  String  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^if  ( className == null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^if  ( name != null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^if  ( className != false )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P15_Unwrap_Block]^types.add(className);^144^145^146^^^138^149^if  ( className != null )  { types.add ( className ) ; }^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P16_Remove_Block]^^144^145^146^^^138^149^if  ( className != null )  { types.add ( className ) ; }^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^types.add ( name ) ;^145^^^^^138^149^types.add ( className ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^145^^^^^138^149^types.add ( className ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P1_Replace_Type]^char className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? parent.extractClassNameIfRequire ( n, codingConvention ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = n ? codingConvention.extractClassNameIfRequire ( findRequire, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^String className = findRequire ? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P6_Replace_Expression]^String className  =  codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P6_Replace_Expression]^String className  =  codingConvention.extractClassNameIfRequire ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^String className = findRequire ? codingConvention.extractClassNameIfProvide ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfRequire ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^String className = isExtern ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^139^^^^^138^149^switch  ( n.getType (  )  )  {^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire ( parent, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^? parent.extractClassNameIfRequire ( n, codingConvention ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^? codingConvention.extractClassNameIfProvide ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^: codingConvention.extractClassNameIfProvide ( n, parent ) ;? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^: codingConvention.extractClassNameIfProvide (  parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^: codingConvention.extractClassNameIfProvide ( n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^: n.extractClassNameIfProvide ( codingConvention, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^: parent.extractClassNameIfProvide ( n, codingConvention ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^: codingConvention.extractClassNameIfRequire ( n, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^: codingConvention .extractClassNameIfRequire ( parent , parent )  ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P11_Insert_Donor_Statement]^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;: codingConvention.extractClassNameIfProvide ( n, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P7_Replace_Invocation]^return getSourceFile (  ) .getRegion ( lineNumber ) ;^161^^^^^160^162^return getSourceFile (  ) .getLine ( lineNumber ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getLine [RETURN_TYPE] String   int lineNumber [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  int  lineNumber  
[P7_Replace_Invocation]^return getSourceFile (  )  .getCode (  )  ;^161^^^^^160^162^return getSourceFile (  ) .getLine ( lineNumber ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getLine [RETURN_TYPE] String   int lineNumber [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  int  lineNumber  
[P14_Delete_Statement]^^161^^^^^160^162^return getSourceFile (  ) .getLine ( lineNumber ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getLine [RETURN_TYPE] String   int lineNumber [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  int  lineNumber  
[P7_Replace_Invocation]^return getSourceFile (  ) .getLine ( lineNumber ) ;^174^^^^^173^175^return getSourceFile (  ) .getRegion ( lineNumber ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRegion [RETURN_TYPE] Region   int lineNumber [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  int  lineNumber  
[P14_Delete_Statement]^^174^^^^^173^175^return getSourceFile (  ) .getRegion ( lineNumber ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getRegion [RETURN_TYPE] Region   int lineNumber [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  int  lineNumber  
[P14_Delete_Statement]^^178^^^^^177^179^return getSourceFile (  ) .getCode (  ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] getCode [RETURN_TYPE] String   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^Preconditions.checkArgument ( module == null && this.module == null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^Preconditions.checkArgument ( module != null || this.module != null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^Preconditions.checkArgument ( module == null || this.module != null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P2_Replace_Operator]^Preconditions.checkArgument ( module == null || this.module == null || this.module != module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^Preconditions.checkArgument ( this.module == null || module == null || this.module == module ) ;^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P14_Delete_Statement]^^189^190^^^^187^192^Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^this.module =  null;^191^^^^^187^192^this.module = module;^[CLASS] CompilerInput DepsFinder  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P5_Replace_Variable]^return findRequire;^195^^^^^194^196^return isExtern;^[CLASS] CompilerInput DepsFinder  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] SourceAst  ast  boolean  findRequire  isExtern  Set  provides  requires  CodingConvention  codingConvention  JSModule  module  List  types  String  className  inputName  name  long  serialVersionUID  
[P8_Replace_Mix]^this.findRequire =  null;^133^^^^^132^136^this.findRequire = findRequire;^[CLASS] DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] List  types  AbstractCompiler  compiler  boolean  findRequire  CodingConvention  codingConvention  
[P8_Replace_Mix]^this.codingConvention =  null.getCodingConvention (  ) ;^134^^^^^132^136^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] List  types  AbstractCompiler  compiler  boolean  findRequire  CodingConvention  codingConvention  
[P14_Delete_Statement]^^134^^^^^132^136^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] List  types  AbstractCompiler  compiler  boolean  findRequire  CodingConvention  codingConvention  
[P8_Replace_Mix]^this.types  =  this.types ;^135^^^^^132^136^this.types = Lists.newArrayList (  ) ;^[CLASS] DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] List  types  AbstractCompiler  compiler  boolean  findRequire  CodingConvention  codingConvention  
[P14_Delete_Statement]^^135^^^^^132^136^this.types = Lists.newArrayList (  ) ;^[CLASS] DepsFinder  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean findRequire [VARIABLES] List  types  AbstractCompiler  compiler  boolean  findRequire  CodingConvention  codingConvention  
[P2_Replace_Operator]^if  ( className == null )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P8_Replace_Mix]^if  ( className != this )  {^144^^^^^138^149^if  ( className != null )  {^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P15_Unwrap_Block]^types.add(className);^144^145^146^^^138^149^if  ( className != null )  { types.add ( className ) ; }^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P16_Remove_Block]^^144^145^146^^^138^149^if  ( className != null )  { types.add ( className ) ; }^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P14_Delete_Statement]^^145^^^^^138^149^types.add ( className ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P1_Replace_Type]^char className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = n ? codingConvention.extractClassNameIfRequire ( findRequire, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^String className = codingConvention ? findRequire.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P6_Replace_Expression]^String className  =  codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P6_Replace_Expression]^String className  =  codingConvention.extractClassNameIfRequire ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^String className = findRequire ? codingConvention.extractClassNameIfProvide ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^String className = findRequire ? codingConvention .extractClassNameIfProvide ( n , n )  : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfRequire ( n, parent ) ;^141^142^143^^^138^149^String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^139^^^^^138^149^switch  ( n.getType (  )  )  {^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire (  parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire ( n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^? n.extractClassNameIfRequire ( codingConvention, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^? codingConvention.extractClassNameIfRequire ( parent, n ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^? parent.extractClassNameIfRequire ( n, codingConvention ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^? codingConvention.extractClassNameIfProvide ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P14_Delete_Statement]^^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P11_Insert_Donor_Statement]^: codingConvention.extractClassNameIfProvide ( n, parent ) ;? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^142^143^^^^138^149^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^: codingConvention.extractClassNameIfProvide (  parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^: codingConvention.extractClassNameIfProvide ( n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^: codingConvention.extractClassNameIfProvide ( parent, n ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P5_Replace_Variable]^: parent.extractClassNameIfProvide ( n, codingConvention ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^: codingConvention.extractClassNameIfRequire ( n, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P7_Replace_Invocation]^: codingConvention .extractClassNameIfRequire ( parent , n )  ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P8_Replace_Mix]^: codingConvention.extractClassNameIfProvide ( parent, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P14_Delete_Statement]^^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
[P11_Insert_Donor_Statement]^? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;: codingConvention.extractClassNameIfProvide ( n, parent ) ;^143^^^^^138^149^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^[CLASS] DepsFinder  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  types  boolean  findRequire  String  className  NodeTraversal  t  CodingConvention  codingConvention  Node  n  parent  
