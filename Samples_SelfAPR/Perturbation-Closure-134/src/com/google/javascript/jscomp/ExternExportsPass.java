[P8_Replace_Mix]^private  List<Export> exports;^43^^^^^38^48^private final List<Export> exports;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P8_Replace_Mix]^private  StringBuilder sb;^52^^^^^47^57^private final StringBuilder sb;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, String> mappedPaths;^55^^^^^50^60^private final Map<String, String> mappedPaths;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P1_Replace_Type]^private final char symbolName;^166^^^^^161^171^private final String symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P8_Replace_Mix]^private  Node value;^167^^^^^162^172^private final Node value;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P1_Replace_Type]^private final char exportPath;^203^^^^^198^208^private final String exportPath;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P1_Replace_Type]^private final char symbolName;^204^^^^^199^209^private final String symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P8_Replace_Mix]^private  Node value;^205^^^^^200^210^private final Node value;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1   [VARIABLES] 
[P5_Replace_Variable]^this.symbolName = qualifiedName;^170^^^^^169^178^this.symbolName = symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.symbolName =  null;^170^^^^^169^178^this.symbolName = symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.value =  null;^171^^^^^169^178^this.value = value;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P1_Replace_Type]^char qualifiedName = value.getQualifiedName (  ) ;^173^^^^^169^178^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^String qualifiedName = value .getLastChild (  )  ;^173^^^^^169^178^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^173^174^175^176^177^169^178^String qualifiedName = value.getQualifiedName (  ) ;  if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( qualifiedName == null )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( exportPath != null )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( qualifiedName != false )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( functionValue != null )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^mappedPaths.put(qualifiedName, symbolName);^175^176^177^^^169^178^if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^175^176^177^^^169^178^if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( qualifiedName == null )  {     return null; }^175^^^^^169^178^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put ( symbolName, symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put ( qualifiedName, exportPath ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put (  symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put ( qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put ( symbolName, qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^mappedPaths .put ( value )  ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^176^177^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( qualifiedName != null )  {     mappedPaths.put ( qualifiedName, symbolName ) ; }^176^^^^^169^178^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^mappedPaths.put ( qualifiedName, qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exportPath = symbolName;^208^^^^^207^211^this.exportPath = exportPath;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.symbolName =  qualifiedName;^209^^^^^207^211^this.symbolName = symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.value =  null;^210^^^^^207^211^this.value = value;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.exports ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.paths = Lists.newArrayList (  ) ;this.exports = Lists.newArrayList (  ) ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.mappedPaths = Maps.newHashMap (  ) ;this.exports = Lists.newArrayList (  ) ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^this.exports = Lists .newArrayList ( 1 )  ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^259^260^^^^258^265^this.exports = Lists.newArrayList (  ) ; this.compiler = compiler;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportSymbolNames = Lists.newArrayList (  ) ;this.exports = Lists.newArrayList (  ) ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportPropertyNames = Lists.newArrayList (  ) ;this.exports = Lists.newArrayList (  ) ;^259^^^^^258^265^this.exports = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.compiler =  null;^260^^^^^258^265^this.compiler = compiler;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.definitionMap  =  this.definitionMap ;^261^^^^^258^265^this.definitionMap = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.mappedPaths = Maps.newHashMap (  ) ;this.definitionMap = Maps.newHashMap (  ) ;^261^^^^^258^265^this.definitionMap = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^261^^^^^258^265^this.definitionMap = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.sb  = null ;^262^^^^^258^265^this.sb = new StringBuilder (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.paths  = null ;^263^^^^^258^265^this.paths = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.exports = Lists.newArrayList (  ) ;this.paths = Lists.newArrayList (  ) ;^263^^^^^258^265^this.paths = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.mappedPaths = Maps.newHashMap (  ) ;this.paths = Lists.newArrayList (  ) ;^263^^^^^258^265^this.paths = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^263^264^^^^258^265^this.paths = Lists.newArrayList (  ) ; this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportSymbolNames = Lists.newArrayList (  ) ;this.paths = Lists.newArrayList (  ) ;^263^^^^^258^265^this.paths = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportPropertyNames = Lists.newArrayList (  ) ;this.paths = Lists.newArrayList (  ) ;^263^^^^^258^265^this.paths = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.mappedPaths ;^264^^^^^258^265^this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.exports = Lists.newArrayList (  ) ;this.mappedPaths = Maps.newHashMap (  ) ;^264^^^^^258^265^this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.paths = Lists.newArrayList (  ) ;this.mappedPaths = Maps.newHashMap (  ) ;^264^^^^^258^265^this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.definitionMap = Maps.newHashMap (  ) ;this.mappedPaths = Maps.newHashMap (  ) ;^264^^^^^258^265^this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^264^^^^^258^265^this.mappedPaths = Maps.newHashMap (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( path.split ( "\\\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^List<String> pieces = Lists.newArrayList ( symbolName.split ( "\\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^List<String> pieces = Lists.newArrayList ( qualifiedName.split ( "\\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( path.split ( "\\.\\" )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^List<String> pieces = Lists.newArrayList ( path .compareTo ( exportPath )   ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^List<String> pieces = Lists.newArrayList ( symbolName .compareTo ( qualifiedName )   ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( path.split ( "\\.\" )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^List<String> pieces = Lists.newArrayList ( path .compareTo ( path )   ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^List<String> pieces = Lists.newArrayList ( qualifiedName .compareTo ( path )   ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )  - 1 && !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i != pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   &&  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i >= pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   >>  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size (  )  - i || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size (  )   || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 2  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( i == pieces.size (  )  - 1 || !paths.contains ( symbolName )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( pieces == i.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( i == pieces.size (  )  - 1 ) {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  (  !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( i ==  ( pieces.size (  )  )  - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( pieces.size (  )  - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( i == 0 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( i < pieces.size() - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.add (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.size (  )  - 1 || !paths.add ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.size (  )  - 1 || !paths .size (  )   )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^if (i == 0) {    sb.append("var ");}; sb.append(cPath); if (i < ((pieces.size()) - 1)) {    sb.append(";\n");}; paths.add(cPath);^90^91^92^93^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^90^91^92^93^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i != 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == i )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i == 2 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P9_Replace_Statement]^if  ( i > 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^sb.append("var ");^91^92^93^^^78^104^if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^91^92^93^^^78^104^if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i <  (  ( pieces.size (  )  )  - 1 )  )  {     sb.append ( ";\n" ) ; }^91^^^^^78^104^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i > 0 )  {     sb.append ( ", " ) ; }^91^^^^^78^104^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^sb .StringBuilder (  )  ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i <= pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   >=  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size (  )   )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 3  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i < pieces.add (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i < pieces.size (  )  - 0  )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^sb.append(";\n");^97^98^99^^^78^104^if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^97^98^99^^^78^104^if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i == 0 )  {     sb.append ( "var " ) ; }^97^^^^^78^104^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i > 0 )  {     sb.append ( ", " ) ; }^97^^^^^78^104^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( ";\n;\" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "ar " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^sb.append ( symbolName ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^paths.add ( cPath ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^paths.add ( qualifiedName ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^paths.contains ( cPath ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^paths .contains ( 0 )  ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^paths.contains ( symbolName ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sorted.addAll ( exports ) ;paths.add ( cPath ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;paths.add ( cPath ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i == 1 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "var r" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   >>  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 7  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i < pieces .contains ( 4 )   - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^sb .StringBuilder (  )  ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^for  &  ( int i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() + 7 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < pieces.add (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   ||  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   <  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 9  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( i == cPath.size (  )  - 1 || !paths.contains ( pieces )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i == pieces.add (  )  - 0  ) {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == 3 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i > pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   &&  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 1  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( pieces < i.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "arar " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 5  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^paths.add ( symbolName ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i <= 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == -1 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i == 0L )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   <<  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 2  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^char cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  ==  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "" ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." )  .getNext (  )  ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  ^  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + i )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( null, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  >  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() + 4  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^sb.append ( qualifiedName ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 8  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = -6; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() - 7 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  <=  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() + 5 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  <<  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 8  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() + 1  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i == pieces.size (  )  - 1 || !paths.contains ( qualifiedName )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "vaar " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^sb .StringBuilder (  )  ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 6  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( i < null.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^char qualifiedName = value.getQualifiedName (  ) ;^113^^^^^112^131^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^String qualifiedName = definitionParent.getQualifiedName (  ) ;^113^^^^^112^131^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^113^114^115^116^117^112^131^String qualifiedName = value.getQualifiedName (  ) ;  if  ( qualifiedName == null )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( qualifiedName != null )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( symbolName == null )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( qualifiedName == false )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( functionValue != null )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return null;^115^116^117^^^112^131^if  ( qualifiedName == null )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^115^116^117^^^112^131^if  ( qualifiedName == null )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( objectArg.getQualifiedName (  )  )  == null )  {     return ; }^115^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( qualifiedName != null )  {     mappedPaths.put ( qualifiedName, symbolName ) ; }^115^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^return true;^116^^^^^112^131^return null;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( !definitionMap.containsKey ( path )  )  {^119^^^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( !definitionMap .get ( exportPath )   )  {^119^^^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( !definitionMap.containsKey ( symbolName )  )  {^119^^^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return null;^119^120^121^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^119^120^121^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^return true;^120^^^^^112^131^return null;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( ! ( definitionMap.containsKey ( qualifiedName )  )  )  {     return null; }^119^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node definitionParent = definitionMap.get ( path ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node definitionParent = qualifiedName.get ( definitionMap ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node definitionParent = definitionMap.get ( symbolName ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node functionValue = getFunctionValue ( value ) ;Node definitionParent = definitionMap.get ( qualifiedName ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node definition = definitionParent.getLastChild (  ) ;Node definitionParent = definitionMap.get ( qualifiedName ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^123^124^^126^127^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ; Node definition = definitionParent.getLastChild (  ) ; if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node definition = value.getLastChild (  ) ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node definition = definitionParent .getFirstChild (  )  ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node thisNode = parent.getFirstChild (  ) ;Node definition = definitionParent.getLastChild (  ) ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node definitionParent = definitionMap.get ( qualifiedName ) ;Node definition = definitionParent.getLastChild (  ) ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( definition.getType (  )  == Token.FUNCTION )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( value.getType (  )  != Token.FUNCTION )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( definition .getString (  )   != Token.FUNCTION )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  != Token.CALL )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( nameArg.getType (  )  != Token.STRING )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return null;^126^127^128^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^126^127^128^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^126^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( nameArg.getType (  )  )  !=  ( STRING )  )  {     return ; }^126^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( CALL )  )  {     return ; }^126^^^^^112^131^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^return false;^127^^^^^112^131^return null;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^return this;^127^^^^^112^131^return null;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return value;^130^^^^^112^131^return definition;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^sb.append ( " " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^sb .StringBuilder (  )  ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^sb .StringBuilder (  )  ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( current.getString (  )  ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^Node parameters = value.getFirstChild (  ) .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^Node thisNode = parent.getFirstChild (  ) ;Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^Node parameters = definition.getFirstChild (  )  .join (  )  ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^Node parameters = definition .getLastChild (  )  .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^Node parameters = parameters .getLastChild (  )  .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^short  i = 0;^144^^^^^137^159^int i = 0;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i < 0 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i > i )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i > 1 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P9_Replace_Statement]^if  ( i == 0 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^sb.append(", ");^149^150^151^^^137^159^if  ( i > 0 )  { sb.append ( ", " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^149^150^151^^^137^159^if  ( i > 0 )  { sb.append ( ", " ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i <  (  ( pieces.size (  )  )  - 1 )  )  {     sb.append ( ";\n" ) ; }^149^^^^^137^159^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i == 0 )  {     sb.append ( "var " ) ; }^149^^^^^137^159^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( ", ," ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^sb .StringBuilder (  )  ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^for  ( Node current = value.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^for  ( Node parameters = parameters.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^for  ( Node parameters = current.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^for  ( Node current = parameters .getLastChild (  )  ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^for  ( Node value = parameters.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i >= 0 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i > -6 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i > 2 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^sb.append ( "" ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^sb.append ( value.getString (  )  ) ;^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^sb.append ( current .getLastChild (  )   ) ;^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^sb.append ( parameters.getString (  )  ) ;^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^current = value.getNext (  )  )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^current =  null.getNext (  )  )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^for  ( Node current = value .getLastChild (  )  ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^Node thisNode = parent.getFirstChild (  ) ;for  ( Node current = parameters.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^for  ( Node current = definitionParent.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^current = current .join (  )   )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^current = value .join (  )   )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return path;^182^^^^^181^183^return symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^appendInferredPaths ( qualifiedName ) ;^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^getExportedPath ( symbolName ) ;^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^appendInferredPaths ( exportedPath ) ;appendInferredPaths ( symbolName ) ;^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node functionValue = getFunctionValue ( parameters ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node functionValue = getExportedPath ( value ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node functionValue = getExportedPath ( parameters ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node definitionParent = definitionMap.get ( qualifiedName ) ;Node functionValue = getFunctionValue ( value ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node functionValue = getFunctionValue ( functionValue ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^appendFunctionValue ( functionValue ) ;Node functionValue = getFunctionValue ( value ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( functionValue == null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( parameters != null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( functionValue != true )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( qualifiedName == null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^appendFunctionValue(functionValue);^191^192^193^^^186^196^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^191^192^193^^^186^196^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^appendFunctionValue ( parameters ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^getFunctionValue ( functionValue ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^appendFunctionValue ( value ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node functionValue = getFunctionValue ( value ) ;appendFunctionValue ( functionValue ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^getFunctionValue ( parameters ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^sb.append ( "\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^sb .StringBuilder (  )  ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ";\n" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\" )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^List<String> pieces = Lists.newArrayList ( symbolName.split ( "\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^List<String> pieces = Lists.newArrayList ( exportPath.compareTo ( "\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^List<String> pieces = Lists.newArrayList ( symbolName .compareTo ( exportPath )   ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^List<String> pieces = Lists.newArrayList ( exportPath .compareTo ( exportPath )   ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^List<String> pieces = Lists.newArrayList ( qualifiedName.split ( "\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( cPath.containsKey ( mappedPaths )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( "." + skip(pieces, i)) )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( newPath + "." + symbolName )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( newPath + "." )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( mappedPaths.containsKey ( symbolName )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^java.lang.String newPath = mappedPaths.get(cPath); if (i < (pieces.size())) {    newPath += "." + (com.google.common.base.Joiner.on(".").join(com.google.common.collect.Iterables.skip(pieces, i)));}; return (newPath + ".") + (symbolName);^225^226^^228^229^214^237^if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^225^226^^228^229^214^237^if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i > pieces.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 9  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( pieces < i.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P6_Replace_Expression]^if  ( "." + skip(pieces, i)) )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i < pieces.add (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P9_Replace_Statement]^if  ( i < pieces.size (  )  - 1 )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P15_Unwrap_Block]^newPath += "." + (com.google.common.base.Joiner.on(".").join(com.google.common.collect.Iterables.skip(pieces, i)));^228^229^230^^^214^237^if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P16_Remove_Block]^^228^229^230^^^214^237^if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  <=  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^newPath += "" + Joiner.on ( "" ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip (  i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( i, pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^newPath += "." + Joiner.on ( "." )  .getNext (  )  ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^newPath +=  "." + Joiner.on ( "." ) .join ( Iterables.skip ( null, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P13_Insert_Block]^if  ( i <  ( pieces.size (  )  )  )  {     newPath += "." +  ( on ( "." ) .join ( skip ( pieces, i )  )  ) ; }^229^^^^^214^237^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( 1, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )   instanceof   ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^return newPath  >  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^return newPath + "" + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return newPath + "." + qualifiedName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return symbolName + "." + newPath;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^char newPath = mappedPaths.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String newPath = cPath.get ( mappedPaths ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 8  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( i < 2.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 3  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( i < 1.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ==  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^for  (  long  i = pieces.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^for  ( int i = pieces.size (  ) ; i >= 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = pieces.size (  ) ; i > i; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = pieces.size() - 7 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^for  ( piecesnt i = i.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^for  ( int i = pieces.add (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( mappedPaths .get ( symbolName )   )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^if  ( i <= pieces.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^if  ( i < null.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  &&  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^newPath +=  "." + Joiner.on ( "." ) .join ( Iterables.skip ( 0, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^return newPath  <  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^return newPath  ||  "."  ||  symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String newPath = mappedPaths.get ( qualifiedName ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 7  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 0  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^if  ( i < pieces .contains ( null )   )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ||  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^return newPath  >=  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return qualifiedName + "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^return newPath  ;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^char cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "" ) .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." )  .getNext (  )  ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P11_Insert_Donor_Statement]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^String newPath = 2.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P14_Delete_Statement]^^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 5  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^for  (  short  i = pieces.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = pieces.size() - 2 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^for  ( int i = pieces.size() - 1 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." ) .join ( Iterables .skip ( null , i )   ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^if  ( mappedPaths.containsKey ( qualifiedName )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^String newPath = 3.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^String newPath = this.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P2_Replace_Operator]^return exportPath  &  "." + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P3_Replace_Literal]^return exportPath + "" + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return qualifiedName + "." + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return exportPath + "." + qualifiedName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P5_Replace_Variable]^return symbolName + "." + exportPath;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P8_Replace_Mix]^return exportPath  ;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[P1_Replace_Type]^char exportedPath = getExportedPath (  ) ;^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^appendInferredPaths ( exportedPath ) ;String exportedPath = getExportedPath (  ) ;^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;String exportedPath = getExportedPath (  ) ;^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^appendInferredPaths ( symbolName ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^appendFunctionValue ( exportedPath ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^appendInferredPaths ( symbolName ) ;appendInferredPaths ( exportedPath ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^String exportedPath = getExportedPath (  ) ;appendInferredPaths ( exportedPath ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node functionValue = getFunctionValue ( parameters ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node functionValue = getExportedPath ( value ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node definitionParent = definitionMap.get ( qualifiedName ) ;Node functionValue = getFunctionValue ( value ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node functionValue = getFunctionValue ( functionValue ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^appendFunctionValue ( functionValue ) ;Node functionValue = getFunctionValue ( value ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( functionValue == null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( value != null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( functionValue != true )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( qualifiedName == null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^appendFunctionValue(functionValue);^247^248^249^^^240^252^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^247^248^249^^^240^252^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^appendFunctionValue ( value ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^getFunctionValue ( functionValue ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node functionValue = getFunctionValue ( value ) ;appendFunctionValue ( functionValue ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^sb.append ( "" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^sb .StringBuilder (  )  ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ";\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new NodeTraversal (  this ) .traverse ( root ) ;^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new NodeTraversal ( root, this ) .traverse ( compiler ) ;^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^new NodeTraversal ( compiler, this ) .traverse ( functionValue ) ;^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return export.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return e1.getExportedPath (  ) .compareTo ( export.getExportedPath (  )  ) ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1.appendInferredPaths (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P1_Replace_Type]^new  LinkedList <Export> ( new Comparator<Export> (  )  {^277^^^^^270^289^new TreeSet<Export> ( new Comparator<Export> (  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^new Export> (  )  {     Override     public int compare ( Export e1, Export e2 )  {         return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;     } }   {^277^^^^^270^289^new TreeSet<Export> ( new Comparator<Export> (  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^Set<Export> sorted = Set<Export> sorted =  new Export> (  )  {     Override     public int compare ( Export e1, Export e2 )  {         return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;     } }   {^276^277^^^^270^289^Set<Export> sorted = new TreeSet<Export> ( new Comparator<Export> (  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1.getExportedPath (  )  .split ( exportPath )  ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1 .PropertyExport ( cPath , symbolName , definition )  .compareTo ( e2^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1 .PropertyExport ( path , path , definition )  .compareTo ( e2^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^284^^^^^270^289^sorted.addAll ( exports ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^paths.add ( cPath ) ;sorted.addAll ( exports ) ;^284^^^^^270^289^sorted.addAll ( exports ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^export.appendInferredPaths (  ) ;^287^^^^^270^289^export.generateExterns (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^287^^^^^270^289^export.generateExterns (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1.getExportedPath (  )  .split ( path )  ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1.appendInferredPaths (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^return e1 .PropertyExport ( symbolName , exportedPath , definitionParent )  .compareTo ( e2^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1.getExportedPath (  )  .split ( qualifiedName )  ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1 .PropertyExport ( qualifiedName , path , current )  .compareTo ( e2^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return e2.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return e1 .PropertyExport ( qualifiedName , qualifiedName , definitionParent )  .compareTo ( e2^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^return e1.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^return sb.StringBuilder (  ) ;^295^^^^^294^296^return sb.toString (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getGeneratedExterns [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^295^^^^^294^296^return sb.toString (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getGeneratedExterns [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( parent.getType (  )  > Token.ASSIGN )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.ASSIGN )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.ASSIGN )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( value .getString (  )   == Token.ASSIGN )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( definition.getType (  )  != Token.FUNCTION )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  != Token.CALL )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( nameArg.getType (  )  != Token.STRING )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^definitionMap.put(n.getQualifiedName(), parent);^306^307^308^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  { definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^306^307^308^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  { definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( nameArg.getType (  )  )  !=  ( STRING )  )  {     return ; }^306^^^^^291^321^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( CALL )  )  {     return ; }^306^^^^^291^321^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( definition.getType (  )  )  !=  ( FUNCTION )  )  {     return null; }^306^^^^^291^321^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^definitionMap.put ( value.getQualifiedName (  ) , parent ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^definitionMap.put ( n.getQualifiedName (  ) , parameters ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^definitionMap.put ( n.getQualifiedName (  )  ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^definitionMap.put ( parent.getQualifiedName (  ) , n ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^definitionMap .put ( current )  ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^definitionMap.put ( n .getLastChild (  )  , parent ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^definitionMap.put ( n.getQualifiedName (  ) , value ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^307^308^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( ! ( definitionMap.containsKey ( qualifiedName )  )  )  {     return null; }^307^^^^^292^322^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.CALL )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( n.getType (  )  != Token.CALL )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( value.getType (  )  != Token.CALL )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( definition.getType (  )  != Token.FUNCTION )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( nameArg.getType (  )  != Token.STRING )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^312^313^314^^^297^327^if  ( parent.getType (  )  != Token.CALL )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^312^313^314^^^297^327^if  ( parent.getType (  )  != Token.CALL )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^312^^^^^297^327^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( nameArg.getType (  )  )  !=  ( STRING )  )  {     return ; }^312^^^^^297^327^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( definition.getType (  )  )  !=  ( FUNCTION )  )  {     return null; }^312^^^^^297^327^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( 2.contains ( n.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( exportPropertyNames.contains ( value.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( n.contains ( exportPropertyNames.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( exportPropertyNames .size (  )   )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( exportPropertyNames.contains ( parameters.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^handlePropertyExport(parent);^329^330^331^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  { handlePropertyExport ( parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^329^330^331^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  { handlePropertyExport ( parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {     handleSymbolExport ( parent ) ; }^329^^^^^314^344^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^handlePropertyExport ( value ) ;^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^handleSymbolExport ( parent ) ;^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^handleSymbolExport ( parameters ) ;^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^handleSymbolExport ( parent ) ;handlePropertyExport ( parent ) ;^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( exportSymbolNames.contains ( parameters.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( n.contains ( exportSymbolNames.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( exportSymbolNames.contains ( n .getLastChild (  )   )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( exportSymbolNames.contains ( value.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^handleSymbolExport(parent);^333^334^335^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  { handleSymbolExport ( parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^333^334^335^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  { handleSymbolExport ( parent ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {     handlePropertyExport ( parent ) ; }^333^^^^^318^348^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^handleSymbolExport ( n ) ;^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^handlePropertyExport ( parent ) ;^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^handlePropertyExport ( parent ) ;handleSymbolExport ( parent ) ;^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportPropertyNames = Lists.newArrayList (  ) ;List<String> exportSymbolNames = Lists.newArrayList (  ) ;^316^^^^^301^331^List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^List<String> exportSymbolNames = Lists.newArrayList (  ) ;List<String> exportPropertyNames = Lists.newArrayList (  ) ;^317^^^^^302^332^List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^switch  ( parent.getType (  )  )  {^302^^^^^287^317^switch  ( n.getType (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.ASSIGN )  {^306^^^^^291^321^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^definitionMap.put ( parameters.getQualifiedName (  ) , parent ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^definitionMap.put ( parent.getQualifiedName (  ) , parent ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( parameters.getType (  )  != Token.CALL )  {^312^^^^^297^327^if  ( parent.getType (  )  != Token.CALL )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^List<String> exportSymbolNames = Lists .newArrayList ( null )  ;^316^^^^^301^331^List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^316^317^^^^301^331^List<String> exportSymbolNames = Lists.newArrayList (  ) ; List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.exports = Lists.newArrayList (  ) ;List<String> exportSymbolNames = Lists.newArrayList (  ) ;^316^^^^^301^331^List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.paths = Lists.newArrayList (  ) ;List<String> exportSymbolNames = Lists.newArrayList (  ) ;^316^^^^^301^331^List<String> exportSymbolNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^317^^^^^302^332^List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.exports = Lists.newArrayList (  ) ;List<String> exportPropertyNames = Lists.newArrayList (  ) ;^317^^^^^302^332^List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.paths = Lists.newArrayList (  ) ;List<String> exportPropertyNames = Lists.newArrayList (  ) ;^317^^^^^302^332^List<String> exportPropertyNames = Lists.newArrayList (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^exportSymbolNames.add ( "goog" ) ;^322^^^^^307^337^exportSymbolNames.add ( "goog.exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^322^323^^^^307^337^exportSymbolNames.add ( "goog.exportSymbol" ) ; exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "google_exportSymbol" ) ;exportSymbolNames.add ( "goog.exportSymbol" ) ;^322^^^^^307^337^exportSymbolNames.add ( "goog.exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "google_exportProperty" ) ;exportSymbolNames.add ( "goog.exportSymbol" ) ;^322^^^^^307^337^exportSymbolNames.add ( "goog.exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "goog.exportProperty" ) ;exportSymbolNames.add ( "goog.exportSymbol" ) ;^322^^^^^307^337^exportSymbolNames.add ( "goog.exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^exportPropertyNames.add ( "goog.exportPropertyrtProp" ) ;^323^^^^^308^338^exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^323^^^^^308^338^exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "google_exportSymbol" ) ;exportPropertyNames.add ( "goog.exportProperty" ) ;^323^^^^^308^338^exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "goog.exportSymbol" ) ;exportPropertyNames.add ( "goog.exportProperty" ) ;^323^^^^^308^338^exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "google_exportProperty" ) ;exportPropertyNames.add ( "goog.exportProperty" ) ;^323^^^^^308^338^exportPropertyNames.add ( "goog.exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^exportSymbolNames.add ( "googloogle_exportSymbol" ) ;^326^^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^exportSymbolNames .contains ( 0 )  ;^326^^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^326^327^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ; exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "goog.exportSymbol" ) ;exportSymbolNames.add ( "google_exportSymbol" ) ;^326^^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "google_exportProperty" ) ;exportSymbolNames.add ( "google_exportSymbol" ) ;^326^^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "goog.exportProperty" ) ;exportSymbolNames.add ( "google_exportSymbol" ) ;^326^^^^^311^341^exportSymbolNames.add ( "google_exportSymbol" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^exportPropertyNames.add ( "go" ) ;^327^^^^^312^342^exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^327^^^^^312^342^exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "google_exportSymbol" ) ;exportPropertyNames.add ( "google_exportProperty" ) ;^327^^^^^312^342^exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportSymbolNames.add ( "goog.exportSymbol" ) ;exportPropertyNames.add ( "google_exportProperty" ) ;^327^^^^^312^342^exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^exportPropertyNames.add ( "goog.exportProperty" ) ;exportPropertyNames.add ( "google_exportProperty" ) ;^327^^^^^312^342^exportPropertyNames.add ( "google_exportProperty" ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( exportPropertyNames.contains ( root.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( exportPropertyNames.contains ( n .getLastChild (  )   )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {     handlePropertyExport ( parent ) ; }^329^^^^^314^344^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^handlePropertyExport ( n ) ;^330^^^^^315^345^handlePropertyExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( exportSymbolNames.contains ( parent.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( exportSymbolNames .size (  )   )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {     handleSymbolExport ( parent ) ; }^333^^^^^318^348^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( exportSymbolNames.contains ( root.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^handleSymbolExport ( root ) ;^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^handlePropertyExport ( value ) ;^334^^^^^319^349^handleSymbolExport ( parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( parent.getChildCount (  )  == 3 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^if  ( parent.getChildCount (  )  != 0 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( parent .getQualifiedName (  )   != 3L )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getChildCount (  )  != 4 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^342^343^344^^^339^358^if  ( parent.getChildCount (  )  != 3 )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^342^343^344^^^339^358^if  ( parent.getChildCount (  )  != 3 )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( objectArg.getQualifiedName (  )  )  == null )  {     return ; }^342^^^^^339^358^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getChildCount (  )  )  != 4 )  {     return ; }^342^^^^^339^358^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( nameArg.getChildCount (  )  != 3 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( parent .getQualifiedName (  )   != 3 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( thisNode.getChildCount (  )  != 3 )  {^342^^^^^339^358^if  ( parent.getChildCount (  )  != 3 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node thisNode = parameters.getFirstChild (  ) ;^346^^^^^339^358^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node thisNode = parent .getLastChild (  )  ;^346^^^^^339^358^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node thisNode = valueArg.getFirstChild (  ) ;^346^^^^^339^358^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node thisNode = nameArg.getFirstChild (  ) ;^346^^^^^339^358^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^346^^^^^339^358^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node nameArg = valueArg.getNext (  ) ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node nameArg = thisNode .join (  )  ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node nameArg = value.getNext (  ) ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node objectArg = thisNode.getNext (  ) ;Node nameArg = thisNode.getNext (  ) ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = objectArg.getNext (  ) ;Node nameArg = thisNode.getNext (  ) ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node valueArg = nameArg.getNext (  ) ;Node nameArg = thisNode.getNext (  ) ;^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^347^^^^^339^358^Node nameArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node valueArg = parameters.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node valueArg = nameArg .join (  )  ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = thisNode.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node objectArg = thisNode.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = objectArg.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node valueArg = thisNode.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node valueArg = root.getNext (  ) ;^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^348^^^^^339^358^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( nameArg.getType (  )  < Token.STRING )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( parameters.getType (  )  != Token.STRING )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( nameArg .getString (  )   != Token.STRING )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( definition.getType (  )  != Token.FUNCTION )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  != Token.CALL )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^352^353^354^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^352^353^354^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^352^^^^^339^358^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( CALL )  )  {     return ; }^352^^^^^339^358^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( definition.getType (  )  )  !=  ( FUNCTION )  )  {     return null; }^352^^^^^339^358^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( thisNode.getType (  )  != Token.STRING )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( value.getType (  )  != Token.STRING )  {^352^^^^^339^358^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^this.exports.add ( new SymbolExport ( nameArg.getString (  )  )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new SymbolExport ( root.getString (  ) , valueArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , value )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new SymbolExport ( valueArg.getString (  ) , nameArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^this.exports.add ( new SymbolExport ( nameArg .getLastChild (  )  , valueArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , parameters )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new SymbolExport ( parent.getString (  ) , valueArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^nameArg.getString (  ) , valueArg )  ) ;this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( parent.getChildCount (  )  == 4 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^if  ( parent.getChildCount (  )  != -3 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( thisNode.getChildCount (  )  != 4 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( parent.getChildCount (  )  != 0 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getChildCount (  )  != 3 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^363^364^365^^^360^387^if  ( parent.getChildCount (  )  != 4 )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^363^364^365^^^360^387^if  ( parent.getChildCount (  )  != 4 )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( objectArg.getQualifiedName (  )  )  == null )  {     return ; }^363^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getChildCount (  )  )  != 3 )  {     return ; }^363^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( objectArg.getChildCount (  )  != 4 )  {^363^^^^^360^387^if  ( parent.getChildCount (  )  != 4 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node thisNode = parameters.getFirstChild (  ) ;^367^^^^^360^387^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node thisNode = objectArg.getFirstChild (  ) ;^367^^^^^360^387^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node thisNode = parent .getLastChild (  )  ;^367^^^^^360^387^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node thisNode = value.getFirstChild (  ) ;^367^^^^^360^387^Node thisNode = parent.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^367^368^^^^360^387^Node thisNode = parent.getFirstChild (  ) ; Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node objectArg = parent.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node objectArg = thisNode .join (  )  ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node objectArg = parameters.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = thisNode.getNext (  ) ;Node objectArg = thisNode.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = objectArg.getNext (  ) ;Node objectArg = thisNode.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node valueArg = nameArg.getNext (  ) ;Node objectArg = thisNode.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node objectArg = valueArg.getNext (  ) ;^368^^^^^360^387^Node objectArg = thisNode.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^368^369^^^^360^387^Node objectArg = thisNode.getNext (  ) ; Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node nameArg = thisNode.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node nameArg = root .join (  )  ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = thisNode.getNext (  ) ;Node nameArg = objectArg.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node objectArg = thisNode.getNext (  ) ;Node nameArg = objectArg.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node valueArg = nameArg.getNext (  ) ;Node nameArg = objectArg.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node nameArg = parameters.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node nameArg = objectArg .join (  )  ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^Node nameArg = root.getNext (  ) ;^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^369^^^^^360^387^Node nameArg = objectArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^Node valueArg = root.getNext (  ) ;^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = thisNode.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node objectArg = thisNode.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^Node nameArg = objectArg.getNext (  ) ;Node valueArg = nameArg.getNext (  ) ;^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^Node valueArg = nameArg .join (  )  ;^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^370^^^^^360^387^Node valueArg = nameArg.getNext (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( objectArg.getQualifiedName (  )  != null )  {^374^^^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( parent.getQualifiedName (  )  == null )  {^374^^^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( objectArg.getQualifiedName (  )  == this )  {^374^^^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^374^375^376^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^374^375^376^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  ( qualifiedName == null )  {     return null; }^374^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getChildCount (  )  )  != 3 )  {     return ; }^374^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getChildCount (  )  )  != 4 )  {     return ; }^374^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( thisNode.getQualifiedName (  )  == null )  {^374^^^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^if  ( objectArg .getLastChild (  )   == null )  {^374^^^^^360^387^if  ( objectArg.getQualifiedName (  )  == null )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P2_Replace_Operator]^if  ( nameArg.getType (  )  <= Token.STRING )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( root.getType (  )  != Token.STRING )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^if  ( parent.getType (  )  != Token.STRING )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( definition.getType (  )  != Token.FUNCTION )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P9_Replace_Statement]^if  ( parent.getType (  )  != Token.CALL )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P15_Unwrap_Block]^return ;^378^379^380^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P16_Remove_Block]^^378^379^380^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  { return; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     definitionMap.put ( n.getQualifiedName (  ) , parent ) ; }^378^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( CALL )  )  {     return ; }^378^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P13_Insert_Block]^if  (  ( definition.getType (  )  )  !=  ( FUNCTION )  )  {     return null; }^378^^^^^360^387^[Delete]^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^if  ( parameters.getType (  )  != Token.STRING )  {^378^^^^^360^387^if  ( nameArg.getType (  )  != Token.STRING )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^new PropertyExport ( objectArg.getQualifiedName (  ) .getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  )  )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new PropertyExport ( parent.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new PropertyExport ( objectArg.getQualifiedName (  ) , root.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , root )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new PropertyExport ( nameArg.getQualifiedName (  ) , objectArg.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^new PropertyExport ( objectArg.getQualifiedName (  ) , valueArg.getString (  ) , nameArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^new PropertyExport ( objectArg .getLastChild (  )  , nameArg.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg .getLastChild (  )  , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^new PropertyExport ( objectArg .getLastChild (  )  , parent.getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) .getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P4_Replace_Constructor]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  )  )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new PropertyExport ( thisNode.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , parameters.getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , parent )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new PropertyExport ( valueArg.getQualifiedName (  ) , nameArg.getString (  ) , objectArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P5_Replace_Variable]^this.exports.add ( new PropertyExport ( nameArg.getQualifiedName (  ) , objectArg.getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg .getLastChild (  )  , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P8_Replace_Mix]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg .getLastChild (  )  , value )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^384^385^386^387^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ; }^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P7_Replace_Invocation]^nameArg .getLastChild (  )  , valueArg )  ) ;^385^386^^^^360^387^nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P14_Delete_Statement]^^385^386^^^^360^387^nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P11_Insert_Donor_Statement]^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;nameArg.getString (  ) , valueArg )  ) ;^385^386^^^^360^387^nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( path.split ( "\\.\\" )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^List<String> pieces = Lists.newArrayList ( cPath.split ( "\\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( path.split ( "\." )  ) ;^81^^^^^78^104^List<String> pieces = Lists.newArrayList ( path.split ( "\\." )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )  - 1 && !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i != pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )    instanceof   1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   <=  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size (  )   || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() + 0  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^if  ( i == pieces.size (  )  - 1 || !paths.contains ( path )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^if  ( pieces == i.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( i == pieces.size (  )  - 1 ) {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  (  !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( i ==  ( pieces.size (  )  )  - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( pieces.size (  )  - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( i == 0 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( i < pieces.size() - 1 )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.add (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.size (  )  - 1 || !paths.add ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == pieces.size (  )  - 0  || !paths.contains ( path )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P15_Unwrap_Block]^if (i == 0) {    sb.append("var ");}; sb.append(cPath); if (i < ((pieces.size()) - 1)) {    sb.append(";\n");}; paths.add(cPath);^90^91^92^93^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P16_Remove_Block]^^90^91^92^93^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  { if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i != 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == -5 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == 3 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P9_Replace_Statement]^if  ( i > 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P15_Unwrap_Block]^sb.append("var ");^91^92^93^^^78^104^if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P16_Remove_Block]^^91^92^93^^^78^104^if  ( i == 0 )  { sb.append ( "var " ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P13_Insert_Block]^if  ( i <  (  ( pieces.size (  )  )  - 1 )  )  {     sb.append ( ";\n" ) ; }^91^^^^^78^104^[Delete]^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P13_Insert_Block]^if  ( i > 0 )  {     sb.append ( ", " ) ; }^91^^^^^78^104^[Delete]^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( "var " ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )    instanceof   1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size (  )   )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 2  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^if  ( pieces < i.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P6_Replace_Expression]^if  ( pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i < pieces.add (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i < pieces.size (  )  - 0  )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P15_Unwrap_Block]^sb.append(";\n");^97^98^99^^^78^104^if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P16_Remove_Block]^^97^98^99^^^78^104^if  ( i < pieces.size (  )  - 1 )  { sb.append ( ";\n" ) ; }^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P13_Insert_Block]^if  ( i == 0 )  {     sb.append ( "var " ) ; }^97^^^^^78^104^[Delete]^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P13_Insert_Block]^if  ( i > 0 )  {     sb.append ( ", " ) ; }^97^^^^^78^104^[Delete]^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( ";\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "r" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^sb.append ( path ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^paths.add ( cPath ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( cPath ) ;^95^^^^^78^104^sb.append ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 8  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( ";" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^paths.add ( path ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^paths.contains ( cPath ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;paths.add ( cPath ) ;^101^^^^^78^104^paths.add ( cPath ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i >= 0 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == i )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == 1 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i <= pieces.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   |  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size (  )  - i )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 1  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^for  <  ( int i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() + 7 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^for  ( piecesnt i = 0; i < i.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < pieces.add (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   >>  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i <= pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i == pieces.size (  )   >  1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size (  )  - i || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 8  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^if  ( i == cPath.size (  )  - 1 || !paths.contains ( pieces )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == pieces.size (  )  - 0  || !paths.add ( path )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == 4 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "var var" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   !=  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( ";\n;\" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "var v" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == -2 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^if  ( i == 0 - 2 )  {^91^^^^^78^104^if  ( i == 0 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "va" ) ;^92^^^^^78^104^sb.append ( "var " ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^if  ( i < pieces.size (  )   <<  1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() - 8  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( "\n" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P1_Replace_Type]^char cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  &  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "" ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + i )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  ||  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." )  .getNext (  )  ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P14_Delete_Statement]^^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() + 1  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i == pieces .contains ( null )   - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 9  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i == pieces.size (  )  - 1 || !paths .size (  )   )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P7_Replace_Invocation]^if  ( i < pieces .contains ( 1 )   - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^sb.append ( ";\n;" ) ;^98^^^^^78^104^sb.append ( ";\n" ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < pieces.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() - 0 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  <=  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P8_Replace_Mix]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( null, i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pieces.size() + 1 ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  >>  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P2_Replace_Operator]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i  <<  1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() + 8  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i == pieces.size() - 3  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P3_Replace_Literal]^if  ( i < pieces.size() + 0  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[P1_Replace_Type]^char qualifiedName = value.getQualifiedName (  ) ;^113^^^^^112^131^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P5_Replace_Variable]^String qualifiedName = definitionParent.getQualifiedName (  ) ;^113^^^^^112^131^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^String qualifiedName = value .getLastChild (  )  ;^113^^^^^112^131^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P14_Delete_Statement]^^113^114^115^116^117^112^131^String qualifiedName = value.getQualifiedName (  ) ;  if  ( qualifiedName == null )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P2_Replace_Operator]^if  ( qualifiedName != null )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^if  ( qualifiedName == false )  {^115^^^^^112^131^if  ( qualifiedName == null )  {^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P15_Unwrap_Block]^return null;^115^116^117^^^112^131^if  ( qualifiedName == null )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P16_Remove_Block]^^115^116^117^^^112^131^if  ( qualifiedName == null )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^return false;^116^^^^^112^131^return null;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P7_Replace_Invocation]^if  ( !definitionMap.get ( qualifiedName )  )  {^119^^^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  {^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P15_Unwrap_Block]^return null;^119^120^121^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P16_Remove_Block]^^119^120^121^^^112^131^if  ( !definitionMap.containsKey ( qualifiedName )  )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^return this;^120^^^^^112^131^return null;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P13_Insert_Block]^if  ( ! ( definitionMap.containsKey ( qualifiedName )  )  )  {     return null; }^119^^^^^112^131^[Delete]^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P5_Replace_Variable]^Node definitionParent = qualifiedName.get ( definitionMap ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P7_Replace_Invocation]^Node definitionParent = definitionMap.containsKey ( qualifiedName ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^Node definitionParent = this .containsKey ( qualifiedName )  ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P11_Insert_Donor_Statement]^Node definition = definitionParent.getLastChild (  ) ;Node definitionParent = definitionMap.get ( qualifiedName ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P14_Delete_Statement]^^123^124^^126^127^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ; Node definition = definitionParent.getLastChild (  ) ; if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P5_Replace_Variable]^Node definition = value.getLastChild (  ) ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P7_Replace_Invocation]^Node definition = definitionParent .getFirstChild (  )  ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P11_Insert_Donor_Statement]^Node definitionParent = definitionMap.get ( qualifiedName ) ;Node definition = definitionParent.getLastChild (  ) ;^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P14_Delete_Statement]^^124^^^^^112^131^Node definition = definitionParent.getLastChild (  ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P2_Replace_Operator]^if  ( definition.getType (  )  < Token.FUNCTION )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P5_Replace_Variable]^if  ( value.getType (  )  != Token.FUNCTION )  {^126^^^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  {^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P15_Unwrap_Block]^return null;^126^127^128^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P16_Remove_Block]^^126^127^128^^^112^131^if  ( definition.getType (  )  != Token.FUNCTION )  { return null; }^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^return false;^127^^^^^112^131^return null;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P8_Replace_Mix]^return true;^127^^^^^112^131^return null;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P5_Replace_Variable]^return value;^130^^^^^112^131^return definition;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[P3_Replace_Literal]^sb.append ( " =  =" ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( " = " ) ;^138^^^^^137^159^sb.append ( " = " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( current.getString (  )  ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( "function ( " ) ;^139^^^^^137^159^sb.append ( "function ( " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^Node parameters = current.getFirstChild (  ) .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P7_Replace_Invocation]^Node parameters = definition .getLastChild (  )  .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P8_Replace_Mix]^Node parameters = parameters.getFirstChild (  ) .getNext (  ) ;^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^142^^^^^137^159^Node parameters = definition.getFirstChild (  ) .getNext (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P1_Replace_Type]^long  i = 0;^144^^^^^137^159^int i = 0;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P3_Replace_Literal]^int i = i;^144^^^^^137^159^int i = 0;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P2_Replace_Operator]^if  ( i >= 0 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P3_Replace_Literal]^if  ( i > i )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P8_Replace_Mix]^if  ( i > 4 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P9_Replace_Statement]^if  ( i == 0 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P15_Unwrap_Block]^sb.append(", ");^149^150^151^^^137^159^if  ( i > 0 )  { sb.append ( ", " ) ; }^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P16_Remove_Block]^^149^150^151^^^137^159^if  ( i > 0 )  { sb.append ( ", " ) ; }^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P13_Insert_Block]^if  ( i <  (  ( pieces.size (  )  )  - 1 )  )  {     sb.append ( ";\n" ) ; }^149^^^^^137^159^[Delete]^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P13_Insert_Block]^if  ( i == 0 )  {     sb.append ( "var " ) ; }^149^^^^^137^159^[Delete]^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " )  {}" ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( ", " ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^for  ( Node current = definition.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^for  ( Node parameters = parameters.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^for  ( Node parameters = current.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P7_Replace_Invocation]^for  ( Node current = parameters .getLastChild (  )  ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P3_Replace_Literal]^if  ( i > -4 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P8_Replace_Mix]^if  ( i > 3 )  {^149^^^^^137^159^if  ( i > 0 )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P3_Replace_Literal]^sb.append ( "" ) ;^150^^^^^137^159^sb.append ( ", " ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^sb.append ( parameters.getString (  )  ) ;^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P7_Replace_Invocation]^sb.append ( current .getLastChild (  )   ) ;^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^153^^^^^137^159^sb.append ( current.getString (  )  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^current = parameters.getNext (  )  )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P7_Replace_Invocation]^current = current .join (  )   )  {^147^^^^^137^159^current = current.getNext (  )  )  {^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P8_Replace_Mix]^for  ( Node current = definition .getLastChild (  )  ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P14_Delete_Statement]^^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ";\n" ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "function ( " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( cPath ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( " = " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( "var " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P11_Insert_Donor_Statement]^sb.append ( ", " ) ;sb.append ( " )  {}" ) ;^158^^^^^137^159^sb.append ( " )  {}" ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P1_Replace_Type]^private final char symbolName;^166^^^^^161^171^private final String symbolName;^[CLASS] SymbolExport  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[P5_Replace_Variable]^this.symbolName = qualifiedName;^170^^^^^169^178^this.symbolName = symbolName;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P8_Replace_Mix]^this.value =  null;^171^^^^^169^178^this.value = value;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P1_Replace_Type]^char qualifiedName = value.getQualifiedName (  ) ;^173^^^^^169^178^String qualifiedName = value.getQualifiedName (  ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^173^174^175^176^177^169^178^String qualifiedName = value.getQualifiedName (  ) ;  if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P2_Replace_Operator]^if  ( qualifiedName == null )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P8_Replace_Mix]^if  ( qualifiedName != this )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P9_Replace_Statement]^if  ( functionValue != null )  {^175^^^^^169^178^if  ( qualifiedName != null )  {^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P15_Unwrap_Block]^mappedPaths.put(qualifiedName, symbolName);^175^176^177^^^169^178^if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P16_Remove_Block]^^175^176^177^^^169^178^if  ( qualifiedName != null )  { mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^mappedPaths.put ( symbolName, symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^mappedPaths.put (  symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^mappedPaths.put ( qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^mappedPaths.put ( symbolName, qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^176^177^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ; }^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P13_Insert_Block]^if  ( qualifiedName != null )  {     mappedPaths.put ( qualifiedName, symbolName ) ; }^176^^^^^169^178^[Delete]^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^return qualifiedName;^182^^^^^181^183^return symbolName;^[CLASS] SymbolExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^appendInferredPaths ( qualifiedName ) ;^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^187^^^^^186^196^appendInferredPaths ( symbolName ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P8_Replace_Mix]^Node functionValue = getFunctionValue ( functionValue ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P11_Insert_Donor_Statement]^appendFunctionValue ( functionValue ) ;Node functionValue = getFunctionValue ( value ) ;^189^^^^^186^196^Node functionValue = getFunctionValue ( value ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P2_Replace_Operator]^if  ( functionValue == null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^if  ( value != null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P8_Replace_Mix]^if  ( functionValue != true )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P9_Replace_Statement]^if  ( qualifiedName != null )  {^191^^^^^186^196^if  ( functionValue != null )  {^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P15_Unwrap_Block]^appendFunctionValue(functionValue);^191^192^193^^^186^196^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P16_Remove_Block]^^191^192^193^^^186^196^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^appendFunctionValue ( value ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P7_Replace_Invocation]^getFunctionValue ( functionValue ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P11_Insert_Donor_Statement]^Node functionValue = getFunctionValue ( value ) ;appendFunctionValue ( functionValue ) ;^192^^^^^186^196^appendFunctionValue ( functionValue ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P3_Replace_Literal]^sb.append ( ";" ) ;^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P14_Delete_Statement]^^195^^^^^186^196^sb.append ( ";\n" ) ;^[CLASS] SymbolExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P1_Replace_Type]^private final char exportPath;^203^^^^^198^208^private final String exportPath;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P1_Replace_Type]^private final char symbolName;^204^^^^^199^209^private final String symbolName;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  qualifiedName  symbolName  boolean  
[P5_Replace_Variable]^this.exportPath = symbolName;^208^^^^^207^211^this.exportPath = exportPath;^[CLASS] PropertyExport  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] Node  value  String  exportPath  symbolName  boolean  
[P5_Replace_Variable]^this.symbolName = exportPath;^209^^^^^207^211^this.symbolName = symbolName;^[CLASS] PropertyExport  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] Node  value  String  exportPath  symbolName  boolean  
[P8_Replace_Mix]^this.value =  null;^210^^^^^207^211^this.value = value;^[CLASS] PropertyExport  [METHOD] <init> [RETURN_TYPE] Node)   String exportPath String symbolName Node value [VARIABLES] Node  value  String  exportPath  symbolName  boolean  
[P5_Replace_Variable]^List<String> pieces = Lists.newArrayList ( symbolName.split ( "\\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\." )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P14_Delete_Statement]^^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\" )  ) ;^217^^^^^214^237^List<String> pieces = Lists.newArrayList ( exportPath.split ( "\\." )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^if  ( mappedPaths.containsKey ( symbolName )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P6_Replace_Expression]^if  ( "." + skip(pieces, i)) )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P6_Replace_Expression]^if  ( newPath + "." + symbolName )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P6_Replace_Expression]^if  ( newPath + "." )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^if  ( mappedPaths.get ( cPath )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P15_Unwrap_Block]^java.lang.String newPath = mappedPaths.get(cPath); if (i < (pieces.size())) {    newPath += "." + (com.google.common.base.Joiner.on(".").join(com.google.common.collect.Iterables.skip(pieces, i)));}; return (newPath + ".") + (symbolName);^225^226^^228^229^214^237^if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P16_Remove_Block]^^225^226^^228^229^214^237^if  ( mappedPaths.containsKey ( cPath )  )  { String newPath = mappedPaths.get ( cPath ) ; if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^if  ( i == pieces.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() - 5  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^if  ( pieces < i.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P6_Replace_Expression]^if  ( "." + skip(pieces, i)) )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P15_Unwrap_Block]^newPath += "." + (com.google.common.base.Joiner.on(".").join(com.google.common.collect.Iterables.skip(pieces, i)));^228^229^230^^^214^237^if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P16_Remove_Block]^^228^229^230^^^214^237^if  ( i < pieces.size (  )  )  { newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ; }^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  >  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^newPath += "" + Joiner.on ( "" ) .join ( Iterables.skip ( pieces, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( null, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip (  i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( i, pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P13_Insert_Block]^if  ( i <  ( pieces.size (  )  )  )  {     newPath += "." +  ( on ( "." ) .join ( skip ( pieces, i )  )  ) ; }^229^^^^^214^237^[Delete]^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P14_Delete_Statement]^^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ==  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^return newPath  !=  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^return newPath + "" + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return newPath + "." + exportPath;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return symbolName + "." + newPath;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P1_Replace_Type]^char newPath = mappedPaths.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String newPath = mappedPaths.get ( symbolName ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String newPath = cPath.get ( mappedPaths ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^String newPath = mappedPaths.containsKey ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P14_Delete_Statement]^^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() + 5  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^newPath += "." + Joiner.on ( "." ) .join ( Iterables .limit ( this , i )   ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^if  ( i <= pieces.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() + 3  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P8_Replace_Mix]^if  ( i < 3.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  &  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P1_Replace_Type]^for  (  short  i = pieces.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^for  ( int i = pieces.size (  ) ; i >= 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^for  ( int i = pieces.size (  ) ; i > 5; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^for  ( int i = pieces.size() - 8 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^for  ( int i = 0.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^for  ( piecesnt i = i.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^if  ( mappedPaths .get ( null )   )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() + 6  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^if  ( i < null.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ||  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^return newPath  &&  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return exportPath + "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P8_Replace_Mix]^String newPath = mappedPaths.containsKey ( symbolName ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() - 7  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^if  ( i > pieces.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() - 9  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  |  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P8_Replace_Mix]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( 1, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^return newPath  ==  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P1_Replace_Type]^char cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^String cPath = Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^String cPath = Joiner.on ( "" ) .join ( Iterables.limit ( pieces, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P14_Delete_Statement]^^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^if  ( cPath.containsKey ( mappedPaths )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() + 2  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P8_Replace_Mix]^if  ( i < this.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( 2, i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^return newPath  <=  "." + symbolName;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^for  ( int i = pieces.size() + 5 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( null, i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^for  ( int i = pieces.size() - 7 ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P7_Replace_Invocation]^if  ( mappedPaths .get ( this )   )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^String newPath = null.get ( cPath ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^if  ( i < pieces.size() - 0  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P8_Replace_Mix]^newPath += "." + Joiner.on ( "." ) .join ( Iterables .limit ( 2 , i )   ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P2_Replace_Operator]^return exportPath  |  "." + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P3_Replace_Literal]^return exportPath + "" + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return newPath + "." + symbolName;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return exportPath + "." + newPath;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P5_Replace_Variable]^return symbolName + "." + exportPath;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[P1_Replace_Type]^char exportedPath = getExportedPath (  ) ;^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P14_Delete_Statement]^^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P11_Insert_Donor_Statement]^appendInferredPaths ( exportedPath ) ;String exportedPath = getExportedPath (  ) ;^241^^^^^240^252^String exportedPath = getExportedPath (  ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P5_Replace_Variable]^appendInferredPaths ( symbolName ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P7_Replace_Invocation]^appendFunctionValue ( exportedPath ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P8_Replace_Mix]^appendFunctionValue ( symbolName ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P14_Delete_Statement]^^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P11_Insert_Donor_Statement]^String exportedPath = getExportedPath (  ) ;appendInferredPaths ( exportedPath ) ;^243^^^^^240^252^appendInferredPaths ( exportedPath ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P5_Replace_Variable]^Node functionValue = getFunctionValue ( functionValue ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P14_Delete_Statement]^^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P11_Insert_Donor_Statement]^appendFunctionValue ( functionValue ) ;Node functionValue = getFunctionValue ( value ) ;^245^^^^^240^252^Node functionValue = getFunctionValue ( value ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P2_Replace_Operator]^if  ( functionValue == null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P5_Replace_Variable]^if  ( value != null )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P8_Replace_Mix]^if  ( value != this )  {^247^^^^^240^252^if  ( functionValue != null )  {^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P15_Unwrap_Block]^appendFunctionValue(functionValue);^247^248^249^^^240^252^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P16_Remove_Block]^^247^248^249^^^240^252^if  ( functionValue != null )  { appendFunctionValue ( functionValue ) ; }^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P5_Replace_Variable]^appendFunctionValue ( value ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P7_Replace_Invocation]^getFunctionValue ( functionValue ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P8_Replace_Mix]^getFunctionValue ( value ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P14_Delete_Statement]^^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P11_Insert_Donor_Statement]^Node functionValue = getFunctionValue ( value ) ;appendFunctionValue ( functionValue ) ;^248^^^^^240^252^appendFunctionValue ( functionValue ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P3_Replace_Literal]^sb.append ( "\n" ) ;^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P14_Delete_Statement]^^251^^^^^240^252^sb.append ( ";\n" ) ;^[CLASS] PropertyExport  [METHOD] generateExterns [RETURN_TYPE] void   [VARIABLES] Node  functionValue  value  String  cPath  exportPath  exportedPath  newPath  symbolName  boolean  
[P5_Replace_Variable]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] boolean  Export  e1  e2  
[P14_Delete_Statement]^^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] boolean  Export  e1  e2  
[P5_Replace_Variable]^return e2.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] boolean  Export  e1  e2  
[P5_Replace_Variable]^return e1.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] boolean  Export  e1  e2  
