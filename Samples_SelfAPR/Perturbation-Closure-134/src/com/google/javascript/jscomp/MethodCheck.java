[P8_Replace_Mix]^private  CheckLevel level;^45^^^^^40^50^private final CheckLevel level;^[CLASS] MethodCheck CheckUsage Store   [VARIABLES] 
[P8_Replace_Mix]^final Multimap<String,FunctionInfo> methodSignatures ;^48^49^^^^48^49^final Multimap<String,FunctionInfo> methodSignatures = HashMultimap.create (  ) ;^[CLASS] MethodCheck CheckUsage Store   [VARIABLES] 
[P4_Replace_Constructor]^final MethodCompilerPass.SignatureStore signatureCallback = final MethodCompilerPass.Signaturenew CheckUsage (  )  ;^51^^^^^46^56^final MethodCompilerPass.SignatureStore signatureCallback = new Store (  ) ;^[CLASS] MethodCheck CheckUsage Store   [VARIABLES] 
[P8_Replace_Mix]^final MethodCompilerPass.SignatureStore signatureCallback ;^51^^^^^46^56^final MethodCompilerPass.SignatureStore signatureCallback = new Store (  ) ;^[CLASS] MethodCheck CheckUsage Store   [VARIABLES] 
[P14_Delete_Statement]^^54^^^^^53^56^super ( compiler ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  AbstractCompiler  compiler  boolean  CheckLevel  level  
[P8_Replace_Mix]^this.level =  null;^55^^^^^53^56^this.level = level;^[CLASS] MethodCheck CheckUsage Store  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  AbstractCompiler  compiler  boolean  CheckLevel  level  
[P5_Replace_Variable]^if  ( callName.contains ( externMethodsWithoutSignatures )  )  {^66^^^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P8_Replace_Mix]^if  ( null.contains ( callName )  )  {^66^^^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P15_Unwrap_Block]^return ;^66^67^68^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  { return; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P16_Remove_Block]^^66^67^68^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  { return; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( signatures.isEmpty (  )  )  {     return ; }^66^^^^^65^80^[Delete]^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {     return ; }^66^^^^^65^80^[Delete]^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^Collection<FunctionInfo> signatures = callName.get ( methodSignatures ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P7_Replace_Invocation]^Collection<FunctionInfo> signatures = methodSignatures.put ( callName ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P14_Delete_Statement]^^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P15_Unwrap_Block]^return ;^72^73^^^76^65^80^if  ( signatures.isEmpty (  )  )  {  return; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P16_Remove_Block]^^72^73^^^76^65^80^if  ( signatures.isEmpty (  )  )  {  return; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {     return ; }^72^^^^^65^80^[Delete]^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( parent, callName, signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall (  callName, signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode,  signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName,  t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures,  level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures, t ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( level, callName, signatures, t, callNode ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, level, signatures, t, callName ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, signatures, callName, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures, level, t ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P14_Delete_Statement]^^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^methodSignatures.put (  FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler,  sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo (  functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^methodSignatures.put ( sourceFile, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( functionNode, compiler, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P8_Replace_Mix]^methodSignatures .get ( functionName )  ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P14_Delete_Statement]^^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P11_Insert_Donor_Statement]^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler,  sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler, functionNode )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo (  functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( functionNode, compiler, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P8_Replace_Mix]^FunctionCheck.createFunctionInfo ( 3, functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P14_Delete_Statement]^^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P11_Insert_Donor_Statement]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[P5_Replace_Variable]^if  ( functionName.containsKey ( methodSignatures )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P7_Replace_Invocation]^if  ( methodSignatures.get ( functionName )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P7_Replace_Invocation]^if  ( methodSignatures .clear (  )   )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P15_Unwrap_Block]^methodSignatures.removeAll(functionName);^108^109^110^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P16_Remove_Block]^^108^109^110^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P7_Replace_Invocation]^methodSignatures.get ( functionName ) ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P8_Replace_Mix]^methodSignatures .clear (  )  ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P14_Delete_Statement]^^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P11_Insert_Donor_Statement]^methodSignatures.clear (  ) ;methodSignatures.removeAll ( functionName ) ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P12_Insert_Condition]^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[P14_Delete_Statement]^^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  CheckLevel  level  
[P11_Insert_Donor_Statement]^methodSignatures.removeAll ( functionName ) ;methodSignatures.clear (  ) ;^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  CheckLevel  level  
[P12_Insert_Condition]^if  ( signatures.isEmpty (  )  )  { methodSignatures.clear (  ) ; }^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  CheckLevel  level  
[P5_Replace_Variable]^if  ( callName.contains ( externMethodsWithoutSignatures )  )  {^66^^^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P15_Unwrap_Block]^return ;^66^67^68^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  { return; }^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P16_Remove_Block]^^66^67^68^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  { return; }^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( signatures.isEmpty (  )  )  {     return ; }^66^^^^^65^80^[Delete]^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {     return ; }^66^^^^^65^80^[Delete]^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^Collection<FunctionInfo> signatures = callName.get ( methodSignatures ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P14_Delete_Statement]^^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P15_Unwrap_Block]^return ;^72^73^^^76^65^80^if  ( signatures.isEmpty (  )  )  {  return; }^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P16_Remove_Block]^^72^73^^^76^65^80^if  ( signatures.isEmpty (  )  )  {  return; }^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P13_Insert_Block]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {     return ; }^72^^^^^65^80^[Delete]^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( parent, callName, signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall (  callName, signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode,  signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName,  t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures,  level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures, t ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( signatures, callName, callNode, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, level, signatures, t, callName ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, level, t, signatures ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^FunctionCheck.checkCall ( callNode, callName, signatures, level, t ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P14_Delete_Statement]^^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[P5_Replace_Variable]^methodSignatures.put (  FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler,  sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo (  functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^methodSignatures.put ( sourceFile, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P7_Replace_Invocation]^methodSignatures .containsKey ( functionName )  ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P8_Replace_Mix]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P14_Delete_Statement]^^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P11_Insert_Donor_Statement]^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler,  sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( compiler, functionNode )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo (  functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( functionNode, compiler, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P14_Delete_Statement]^^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P11_Insert_Donor_Statement]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[P5_Replace_Variable]^if  ( functionName.containsKey ( methodSignatures )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P7_Replace_Invocation]^if  ( methodSignatures.removeAll ( functionName )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P15_Unwrap_Block]^methodSignatures.removeAll(functionName);^108^109^110^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P16_Remove_Block]^^108^109^110^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P7_Replace_Invocation]^methodSignatures.containsKey ( functionName ) ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P8_Replace_Mix]^methodSignatures .clear (  )  ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P14_Delete_Statement]^^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P11_Insert_Donor_Statement]^methodSignatures.clear (  ) ;methodSignatures.removeAll ( functionName ) ;^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P12_Insert_Condition]^if  ( methodSignatures.containsKey ( functionName )  )  { methodSignatures.removeAll ( functionName ) ; }^109^^^^^105^111^methodSignatures.removeAll ( functionName ) ;^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P7_Replace_Invocation]^if  ( methodSignatures .clear (  )   )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
[P8_Replace_Mix]^methodSignatures .removeAll ( null )  ;^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  
[P14_Delete_Statement]^^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  
[P11_Insert_Donor_Statement]^methodSignatures.removeAll ( functionName ) ;methodSignatures.clear (  ) ;^114^^^^^113^115^methodSignatures.clear (  ) ;^[CLASS] Store  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  
