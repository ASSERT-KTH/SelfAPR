[P8_Replace_Mix]^private Deque<Renamer> nameStack  = null ;^42^^^^^37^47^private Deque<Renamer> nameStack = new ArrayDeque<Renamer> (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private  Renamer rootRenamer;^43^^^^^38^48^private final Renamer rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private Map<Var, String> nameMap  = null ;^234^^^^^229^239^private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private  Multiset<String> nameUsage;^299^^^^^294^304^private final Multiset<String> nameUsage;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, String> declarations = Maps.newHashMap (  ) ;^300^^^^^295^305^private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private final Map<String, String> declarations  = null ;^380^^^^^375^385^private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P8_Replace_Mix]^private  Supplier<String> uniqueIdSupplier;^381^^^^^376^386^private final Supplier<String> uniqueIdSupplier;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P1_Replace_Type]^private final char namePrefix;^382^^^^^377^387^private final String namePrefix;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [VARIABLES] 
[P4_Replace_Constructor]^this.rootRenamer = this.rootRenamer =  new ContextualRenameInverter ( compiler )  ;^46^^^^^45^47^this.rootRenamer = new ContextualRenamer (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique()   [VARIABLES] Renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.rootRenamer =  new ContextualRenameInverter ( compiler )  ;^46^^^^^45^47^this.rootRenamer = new ContextualRenamer (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique()   [VARIABLES] Renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.rootRenamer = renamer;this.rootRenamer = new ContextualRenamer (  ) ;^46^^^^^45^47^this.rootRenamer = new ContextualRenamer (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique()   [VARIABLES] Renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^this.rootRenamer = rootRenamer;^50^^^^^49^51^this.rootRenamer = renamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)   Renamer renamer [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = rootRenamer;this.rootRenamer = renamer;^50^^^^^49^51^this.rootRenamer = renamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)   Renamer renamer [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.rootRenamer = new ContextualRenamer (  ) ;this.rootRenamer = renamer;^50^^^^^49^51^this.rootRenamer = renamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)   Renamer renamer [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.compiler =  null;^237^^^^^236^238^this.compiler = compiler;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^this.global = false;^304^^^^^303^306^this.global = true;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.global = false;this.global = true;^304^^^^^303^306^this.global = true;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^nameUsage ;^305^^^^^303^306^nameUsage = HashMultiset.create (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^305^^^^^303^306^nameUsage = HashMultiset.create (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^this.global = true;^312^^^^^311^314^this.global = false;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.global = true;this.global = false;^312^^^^^311^314^this.global = false;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.nameUsage =  null;^313^^^^^311^314^this.nameUsage = nameUsage;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.namePrefix = namePrefix;this.nameUsage = nameUsage;^313^^^^^311^314^this.nameUsage = nameUsage;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.uniqueIdSupplier =  null;^389^^^^^385^392^this.uniqueIdSupplier = uniqueIdSupplier;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.namePrefix =  null;^390^^^^^385^392^this.namePrefix = namePrefix;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.nameUsage = nameUsage;this.namePrefix = namePrefix;^390^^^^^385^392^this.namePrefix = namePrefix;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^this.removeConstness = global;^391^^^^^385^392^this.removeConstness = removeConstness;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.removeConstness =  null;^391^^^^^385^392^this.removeConstness = removeConstness;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P4_Replace_Constructor]^return return  new ContextualRenamer (  )  ;^54^^^^^53^55^return new ContextualRenameInverter ( compiler ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getContextualRenameInverter [RETURN_TYPE] CompilerPass   AbstractCompiler compiler [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return  new ContextualRenamer (  )  ;^54^^^^^53^55^return new ContextualRenameInverter ( compiler ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getContextualRenameInverter [RETURN_TYPE] CompilerPass   AbstractCompiler compiler [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node declarationRoot = t .getScope (  )  ;^59^^^^^44^74^Node declarationRoot = t.getScopeRoot (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node declarationRoot = t.getScopeRoot (  ) ;^59^^^^^44^74^Node declarationRoot = t.getScopeRoot (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^59^^^^^44^74^Node declarationRoot = t.getScopeRoot (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( declarationRoot.getType (  )  != FUNCTION )  {^61^^^^^46^76^if  ( nameStack.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( rootRenamer instanceof ContextualRenamer )  {^61^^^^^46^76^if  ( nameStack.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( name.isEmpty (  )  )  {^61^^^^^46^76^if  ( nameStack.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer = nameStack.peek (  ) .stripConstIfReplaced (  ) ;^70^^^^^61^71^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer = nameStack.pop (  ) .forChildScope (  ) ;^70^^^^^61^71^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer  =  renamer ;^70^^^^^61^71^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^70^71^^^^61^71^renamer = nameStack.peek (  ) .forChildScope (  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;renamer = nameStack.peek (  ) .forChildScope (  ) ;^70^^^^^61^71^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer  = null ;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^this.rootRenamer = renamer;renamer = rootRenamer;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^newName = oldName;renamer = rootRenamer;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION && ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  >= Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer  >=  ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Preconditions.checkState ( functionBody.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( renamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Preconditions.checkState ( rootRenamer.getType (  )  != Token.FUNCTION || ! ( declarationRoot instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Preconditions.checkState ( declarationRoot.setString (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Preconditions.checkState ( declarationRoot .getString (  )   != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^Preconditions.checkState ( functionBody.setString (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^declarationRoot.setString (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^65^66^^^^50^80^declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^declarationRoot .getString (  )   != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^65^66^^^^50^80^declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^65^66^^^^50^80^declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^67^^^^^52^82^Preconditions.checkState ( t.inGlobalScope (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^67^68^^^^52^82^Preconditions.checkState ( t.inGlobalScope (  )  ) ; renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer = renamer;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer ;^68^^^^^53^83^renamer = rootRenamer;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer = nameStack.peek (  ) .stripConstIfReplaced (  ) ;^70^^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer = nameStack.pop (  ) .forChildScope (  ) ;^70^^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer  =  renamer ;^70^^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  == Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer  &&  ContextualRenamer )  ) ;^64^65^66^^^49^79^Preconditions.checkState ( declarationRoot.getType (  )  != Token.FUNCTION || ! ( rootRenamer instanceof ContextualRenamer )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Preconditions.checkState ( t .getScope (  )   ) ;^67^^^^^52^82^Preconditions.checkState ( t.inGlobalScope (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^70^71^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;renamer = nameStack.peek (  ) .forChildScope (  ) ;^70^^^^^55^85^renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( declarationRoot.getType (  )  < Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( functionBody.getType (  )  == Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( c != null )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( declarationRoot.setString (  )  == Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( functionBody.setString (  )  == Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( functionBody, null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( declarationRoot, null, rootRenamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames (  null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( declarationRoot, null ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^shouldTraverse ( declarationRoot, null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( c, n, renamer ) ;findDeclaredNames ( declarationRoot, null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( functionBody, null, renamer ) ;findDeclaredNames ( declarationRoot, null, renamer ) ;^86^^^^^73^87^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^for  ( Node c = fnParams.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node fnParams = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = fnParams.setString (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.setString (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c .getVar ( name )   )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node c = functionBody.setString (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char name = c.getchar (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String name = functionBody.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = c.setString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;String name = c.getString (  ) ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( namePrefix ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( namePrefix )  ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^newName = getUniqueName ( name, id ) ;renamer.addDeclaredName ( name ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^reserveName ( name ) ;renamer.addDeclaredName ( name ) ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node functionBody = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node c =  fnParams.getFirstChild (  ) ; functionBody !^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Node fnParams = functionBody.getFirstChild (  ) .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node fnParams = declarationRoot.getFirstChild (  ) .getVar (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node fnParams = declarationRoot.setString (  ) .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node functionBody = declarationRoot.getLastChild (  ) ;Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node c = functionBody.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = fnParams .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Node functionBody = fnParams.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node functionBody = declarationRoot.setString (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node functionBody = declarationRoot .getFirstChild (  )  ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;Node functionBody = declarationRoot.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node functionBody = declarationRoot.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node fnParams = declarationRoot.getFirstChild (  )  .getVar ( name )  ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node fnParams = declarationRoot .getLastChild (  )  .getNext (  ) ;^75^^^^^60^90^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^76^77^78^79^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { String name = c.getString (  ) ; renamer.addDeclaredName ( name ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = c .setString ( name )  ;^77^^^^^62^92^String name = c.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^77^78^^^^62^92^String name = c.getString (  ) ; renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( fnParams, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( functionBody, null, rootRenamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames (  null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( functionBody, null ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( renamer, null, functionBody ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^shouldTraverse ( functionBody, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( c, n, renamer ) ;findDeclaredNames ( functionBody, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( declarationRoot, null, renamer ) ;findDeclaredNames ( functionBody, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer .getReplacementName ( name )  ;^78^^^^^63^93^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^Node functionBody = fnParams .getFirstChild (  )  ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( declarationRoot .getString (  )   == Token.FUNCTION )  {^73^^^^^58^88^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c .getVar ( namePrefix )   )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node functionBody = fnParams.getFirstChild (  ) ; c != null; c = c.setString (  )  )  {^76^^^^^61^91^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Node functionBody = functionBody.getLastChild (  ) ;^82^^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^82^83^^^^67^97^Node functionBody = declarationRoot.getLastChild (  ) ; findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^shouldTraverse ( fnParams, null, renamer ) ;^83^^^^^68^98^findDeclaredNames ( functionBody, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( functionBody, null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( declarationRoot, null, rootRenamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames (  null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( declarationRoot, null ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( renamer, null, declarationRoot ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^shouldTraverse ( declarationRoot, null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^shouldTraverse ( declarationRoot, null, rootRenamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( c, n, renamer ) ;findDeclaredNames ( declarationRoot, null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( functionBody, null, renamer ) ;findDeclaredNames ( declarationRoot, null, renamer ) ;^86^^^^^71^101^findDeclaredNames ( declarationRoot, null, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameStack.push ( rootRenamer ) ;^88^^^^^73^103^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^88^^^^^73^103^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameMap.put ( var, newName ) ;nameStack.push ( renamer ) ;^88^^^^^73^103^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.pop (  ) ;nameStack.push ( renamer ) ;^88^^^^^73^103^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  fnParams  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( !t .getScope (  )   )  {^93^^^^^92^96^if  ( !t.inGlobalScope (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^nameStack.pop();^93^94^95^^^92^96^if  ( !t.inGlobalScope (  )  )  { nameStack.pop (  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^93^94^95^^^92^96^if  ( !t.inGlobalScope (  )  )  { nameStack.pop (  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameStack.peek (  ) ;^94^^^^^92^96^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^94^^^^^92^96^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.push ( renamer ) ;nameStack.pop (  ) ;^94^^^^^92^96^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( name != null || !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( name == null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( name != null && !name.isEmpty (  )  && parent == null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( namePrefix != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( n != nameull && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( nameame != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( name != null ) {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( ((name != null) && !(name.isEmpty()) && parent != null) )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( (name != null && !(name.isEmpty())) )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parent != null )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( name != null && !name.indexOf (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isVarDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil .isVarDeclaration ( parent )   )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( name != true ) {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^renamer.addDeclaredName(name);^110^111^112^113^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  { renamer.addDeclaredName ( name ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^110^111^112^113^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  { renamer.addDeclaredName ( name ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( namePrefix ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer .getReplacementName ( namePrefix )  ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^newName = getUniqueName ( name, id ) ;renamer.addDeclaredName ( name ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^reserveName ( name ) ;renamer.addDeclaredName ( name ) ;^112^^^^^110^113^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Renamer renamer = nameStack.peek (  ) .stripConstIfReplaced (  ) ;^106^^^^^91^121^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Renamer renamer = nameStack.pop (  ) .forChildScope (  ) ;^106^^^^^91^121^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Renamer renamer = nameStack.peek (  ) ;Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^106^^^^^91^121^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char name = n.getFirstChild (  ) .getchar (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String parentame = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  ) .getVar (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n.setString (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String name = n.getFirstChild (  )  .setString ( name )  ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Renamer renamer = nameStack.peek (  ) .stripConstIfReplaced (  ) ;^121^^^^^106^136^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Renamer renamer = nameStack.pop (  ) .forChildScope (  ) ;^121^^^^^106^136^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Renamer renamer = nameStack.peek (  ) ;Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^121^^^^^106^136^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char name = n.getFirstChild (  ) .getchar (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  ) .getVar (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  )  .setString ( namePrefix )  ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n.setString (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String parentame = n.setString (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;String name = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^101^^^^^86^116^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^101^^^^^86^116^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = nameStack.peek (  ) .forChildScope (  ) ;Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^106^^^^^91^121^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String name = n .getLastChild (  )  .getString (  ) ;^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^109^^^^^94^124^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( namePrefix != null && !name.indexOf (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^95^125^if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^&& !NodeUtil.isFunctionDeclaration ( parent )  )  {^111^^^^^96^126^&& !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^&& !NodeUtil.isVarDeclaration ( n )  )  {^111^^^^^96^126^&& !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^&& !NodeUtil .isVarDeclaration ( parent )   )  {^111^^^^^96^126^&& !NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^111^112^^^^96^126^&& !NodeUtil.isFunctionDeclaration ( n )  )  { renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( namePrefix ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( namePrefix )  ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^newName = getUniqueName ( name, id ) ;renamer.addDeclaredName ( name ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^reserveName ( name ) ;renamer.addDeclaredName ( name ) ;^112^^^^^97^127^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameStack.push ( rootRenamer ) ;^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameStack .peek (  )  ;^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameMap.put ( var, newName ) ;nameStack.push ( renamer ) ;^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.pop (  ) ;nameStack.push ( renamer ) ;^115^^^^^100^130^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = nameStack.peek (  ) .forChildScope (  ) ;Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^121^^^^^106^136^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String parentame = n.getFirstChild (  ) .getString (  ) ;^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^123^^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^123^124^^^^108^138^String name = n.getFirstChild (  ) .getString (  ) ; renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( namePrefix ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( name )  ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;renamer.addDeclaredName ( name ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^newName = getUniqueName ( name, id ) ;renamer.addDeclaredName ( name ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^reserveName ( name ) ;renamer.addDeclaredName ( name ) ;^124^^^^^109^139^renamer.addDeclaredName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameStack.push ( rootRenamer ) ;^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameStack .peek (  )  ;^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameMap.put ( var, newName ) ;nameStack.push ( renamer ) ;^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.pop (  ) ;nameStack.push ( renamer ) ;^126^^^^^111^141^nameStack.push ( renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^return false;^131^^^^^116^146^return true;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( newName == null )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( namePrefix != null )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( parentewName != null )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( newName != true )  {^139^^^^^135^160^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {    n.removeProp(Node.IS_CONSTANT_NAME);}; n.setString(newName); t.getCompiler().reportCodeChange();^139^140^141^^143^135^160^if  ( newName != null )  { Renamer renamer = nameStack.peek (  ) ; if  ( renamer.stripConstIfReplaced (  )  )  { n.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^139^140^141^^143^135^160^if  ( newName != null )  { Renamer renamer = nameStack.peek (  ) ; if  ( renamer.stripConstIfReplaced (  )  )  { n.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( rootRenamer.stripConstIfReplaced (  )  )  {^141^^^^^135^160^if  ( renamer.stripConstIfReplaced (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( renamer.getReplacementName (  )  )  {^141^^^^^135^160^if  ( renamer.stripConstIfReplaced (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^n.removeProp(Node.IS_CONSTANT_NAME);^141^142^143^144^^135^160^if  ( renamer.stripConstIfReplaced (  )  )  {  n.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^141^142^143^144^^135^160^if  ( renamer.stripConstIfReplaced (  )  )  {  n.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^n.setString ( Node.IS_CONSTANT_NAME ) ;^143^^^^^135^160^n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^143^^^^^135^160^n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Renamer renamer = nameStack.pop (  ) ;^140^^^^^135^160^Renamer renamer = nameStack.peek (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;Renamer renamer = nameStack.peek (  ) ;^140^^^^^135^160^Renamer renamer = nameStack.peek (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^140^^^^^135^160^Renamer renamer = nameStack.peek (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^n .getType (  )  ;^143^^^^^135^160^n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^n.setString ( parentewName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^n.setString ( namePrefix ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^n.setString ( newNameewName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^n.setString ( n ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^n .setString ( name )  ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^145^146^^^^135^160^n.setString ( newName ) ; t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameMap.put ( var, newName ) ;n.setString ( newName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;n.setString ( newName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;n.setString ( newName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;n.setString ( newName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^reserveName ( name ) ;n.setString ( newName ) ;^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^t.getCompiler (  ) .getVar (  ) ;^146^^^^^135^160^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^t .getScope (  )  .reportCodeChange (  ) ;^146^^^^^135^160^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^t.getCompiler (  )  .getString (  )  ;^146^^^^^135^160^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^146^^^^^135^160^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^compiler.reportCodeChange (  ) ;t.getCompiler (  ) .reportCodeChange (  ) ;^146^^^^^135^160^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char newName = getReplacementName ( n.getchar (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String parentewName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = enterScope ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = getReplacementName ( n.setString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = names.getReplacementName ( oldName ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^136^^^^^135^160^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^136^^^^^135^160^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^136^^^^^135^160^switch  ( n.getType (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^136^137^138^^^135^160^switch  ( n.getType (  )  )  { case Token.NAME: String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;String newName = getReplacementName ( n.getString (  )  ) ;^138^^^^^135^160^String newName = getReplacementName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Renamer renamer = this.peek (  ) ;^140^^^^^135^160^Renamer renamer = nameStack.peek (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^145^^^^^135^160^n.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameStack.peek (  ) ;^152^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^152^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.push ( renamer ) ;nameStack.pop (  ) ;^152^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameStack.peek (  ) ;^157^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^157^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.push ( renamer ) ;nameStack.pop (  ) ;^157^^^^^135^160^nameStack.pop (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Renamer  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( newName == null )  {^169^^^^^166^174^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( oldName != null )  {^169^^^^^166^174^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( newName != true )  {^169^^^^^166^174^if  ( newName != null )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^return newName;^169^170^171^^^166^174^if  ( newName != null )  { return newName; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^169^170^171^^^166^174^if  ( newName != null )  { return newName; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P13_Insert_Block]^if  ( name.isEmpty (  )  )  {     return name; }^169^^^^^166^174^[Delete]^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldName;^170^^^^^166^174^return newName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char newName = names.getReplacementName ( oldName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = rootRenamer.getReplacementName ( oldName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = names.getReplacementName ( namePrefix ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = oldName.getReplacementName ( names ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = names.getReplacementName ( newName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;String newName = names.getReplacementName ( oldName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;String newName = names.getReplacementName ( oldName ) ;^168^^^^^166^174^String newName = names.getReplacementName ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return true;^173^^^^^166^174^return null;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n != parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( n == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( parent == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parent == null ) {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( (parent == null || parent.getType() != FUNCTION) )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parent.getType (  )  != FUNCTION )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( c != null )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parent == null || parent.setString (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.setString (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent .getLastChild (  )   )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  (  parent.getType (  )  != Token.FUNCTION || parent == parent.getFirstChild (  )  )  {^183^184^185^^^180^197^if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^186^^^^^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^186^^^^^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^renamer.addDeclaredName(n.getString());^186^187^188^189^190^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  { renamer.addDeclaredName ( n.getString (  )  ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^186^187^188^189^190^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  { renamer.addDeclaredName ( n.getString (  )  ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^188^^^^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^} else {^188^^^^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isVarDeclaration ( n )  )  {^188^^^^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString());^188^189^190^191^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^188^189^190^191^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P13_Insert_Block]^if  ( isVarDeclaration ( n )  )  {     renamer.addDeclaredName ( n.getString (  )  ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         renamer.addDeclaredName ( nameNode.getString (  )  ) ;     }^188^^^^^180^197^[Delete]^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Node parentameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node nameNode = n.setString (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node nameNode = n .getLastChild (  )  ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node functionBody = declarationRoot.getLastChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node nameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;Node nameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node parentNode = var.getParentNode (  ) ;Node nameNode = n.getFirstChild (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( parent.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( nameNode.setString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;renamer.addDeclaredName ( nameNode.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String oldName = node.getString (  ) ;renamer.addDeclaredName ( nameNode.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;renamer.addDeclaredName ( nameNode.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( name ) ;renamer.addDeclaredName ( nameNode.getString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( nameNode .setString ( newName )   ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( namePrefix )  ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer.addDeclaredName ( parent.setString (  )  ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^renamer.addDeclaredName ( parent.getString (  )  ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( oldName )  ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( n.setString (  )  ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer.addDeclaredName ( parent .setString ( newName )   ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^188^^^^^180^197^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^Node parentameNode = n.setString (  ) ;^189^^^^^180^197^Node nameNode = n.getFirstChild (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^189^190^^^^180^197^Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node c = parent.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = n.setString (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.setString (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( parent, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( c, parent, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames (  n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( c,  renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( c, n ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( renamer, n, c ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( c, renamer, n ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^shouldTraverse ( c, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( declarationRoot, null, renamer ) ;findDeclaredNames ( c, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^findDeclaredNames ( functionBody, null, renamer ) ;findDeclaredNames ( c, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; null !^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node c = parent.setString (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( c )   )  {^186^^^^^180^197^if  ( NodeUtil.isVarDeclaration ( n )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( n .setString ( namePrefix )   ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^renamer.addDeclaredName ( parent.setString (  )  ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( nameNode .setString ( namePrefix )   ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( nameNode .setString ( oldName )   ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^193^194^195^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { findDeclaredNames ( c, n, renamer ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getVar ( name )   )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( c, n, rootRenamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^findDeclaredNames ( n, c, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer .getReplacementName ( oldName )  ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( n .setString ( newName )   ) ;^187^^^^^180^197^renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^shouldTraverse ( parent, n, renamer ) ;^194^^^^^180^197^findDeclaredNames ( c, n, renamer ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; parent !^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^|| nameNode.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^184^185^^^^180^197^|| parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^|| parent.setString (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^184^185^^^^180^197^|| parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^|| nameNode.setString (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^184^185^^^^180^197^|| parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^|| n == nameNode.getFirstChild (  )  )  {^185^^^^^180^197^|| n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^|| n == parent.setString (  )  )  {^185^^^^^180^197^|| n == parent.getFirstChild (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^185^186^187^^^180^197^|| n == parent.getFirstChild (  )  )  { if  ( NodeUtil.isVarDeclaration ( n )  )  { renamer.addDeclaredName ( n.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^renamer.addDeclaredName ( nameNode .setString ( name )   ) ;^190^^^^^180^197^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getVar ( newName )   )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^for  ( Node parent = n.getFirstChild (  ) ; c != null; c = c.setString (  )  )  {^193^^^^^180^197^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] findDeclaredNames [RETURN_TYPE] void   Node n Node parent Renamer renamer [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  c  n  nameNode  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^NodeTraversal.traverse (  js, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Node  externs  js  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( node.getType (  )  < Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( oldName.indexOf("$$") != -1 )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var == null || var.isGlobal() )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var == null )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( isDeclared(newName, false) || isJSIdentifier(newName)) )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( node.setString (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( node.containsKeyType (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( oldName.indexOf ( "$$" )  == -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$$" )  != --4 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var == null || var.isGlobal() )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var == null )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( isDeclared(newName, false) || isJSIdentifier(newName)) )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( oldName.substring ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( oldName .lastIndexOf ( newName )   != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope scope = t.getScope(); com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(oldName); if ((var == null) || (var.isGlobal())) {    return ;}; if (nameMap.containsKey(var)) {    node.setString(nameMap.get(var));}else {    java.lang.String newName = oldName.substring(0, oldName.lastIndexOf("$$"));    if ((var.scope.isDeclared(newName, false)) || (!(com.google.javascript.rhino.TokenStream.isJSIdentifier(newName)))) {        newName = oldName;    }else {        var.scope.declare(newName, var.nameNode, null, null);        com.google.javascript.rhino.Node parentNode = var.getParentNode();        if (((parentNode.getType()) == (com.google.javascript.rhino.Token.FUNCTION)) && (parentNode == (var.scope.getRootNode()))) {            var.getNameNode().setString(newName);        }        node.setString(newName);        compiler.reportCodeChange();    }    nameMap.put(var, newName);};^248^249^250^251^252^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ; if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ; if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( var == null && var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var == null ) {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( var == false || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^return ;^251^252^253^^^236^266^if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^251^252^253^^^236^266^if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( nameMap.get ( var )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( !declarations.containsKey ( name )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( var.scope.isDeclared (  false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( var.scope.declare ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^271^272^273^274^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString ( name )  ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node parentNode = var .getNameNode (  )  ;^270^^^^^263^278^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node parentNode = var.getParentNode (  ) ;^270^^^^^263^278^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( oldName , removeConstness )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^270^^^^^263^278^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^272^273^^^^263^278^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( newName )  ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^node.setString ( oldName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^277^^^^263^278^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;node.setString ( newName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^277^^^^^263^278^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .reportCodeChange (  ) ;compiler.reportCodeChange (  ) ;^277^^^^^263^278^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^newName =  null;^265^^^^^263^278^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = rootRenamer;newName = oldName;^265^^^^^263^278^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^271^272^273^274^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^255^281^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^newName =  namePrefix;^265^^^^^255^281^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = rootRenamer;newName = oldName;^265^^^^^255^281^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = namePrefix.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( newName )   ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^281^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node parentNode = var.getParentNode (  ) ;^270^^^^^255^281^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( null, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( namePrefix )   ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = oldName .lastIndexOf ( namePrefix )  ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^255^281^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( namePrefix , removeConstness )  ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( oldName , global )  ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^270^^^^^255^281^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^272^273^^^^255^281^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^node.setString ( oldName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( name )  ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^node .setString ( newName )  ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^277^^^^255^281^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;node.setString ( newName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^compiler .getString (  )  ;^277^^^^^255^281^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^277^^^^^255^281^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .reportCodeChange (  ) ;compiler.reportCodeChange (  ) ;^277^^^^^255^281^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( var, oldName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put (  newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^declarations.put ( name, newName ) ;nameMap.put ( var, newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;nameMap.put ( var, newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.push ( renamer ) ;nameMap.put ( var, newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node.setString ( nameMap .put ( var , name )   ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( var.scope.isDeclared (  false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( var.scope.declare ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  < Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( namePrefix , global )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^compiler .getString (  )  ;^277^^^^^263^278^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^263^278^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^newName =  namePrefix;^265^^^^^263^278^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^271^272^273^274^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^250^280^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^newName =  namePrefix;^265^^^^^250^280^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer = rootRenamer;newName = oldName;^265^^^^^250^280^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Scope scope = t .getScopeRoot (  )  ;^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node declarationRoot = t.getScopeRoot (  ) ;Scope scope = t.getScope (  ) ;^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;Scope scope = t.getScope (  ) ;^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getString (  )  ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^Var var = t .getScopeRoot (  )  .getVar ( newName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -7, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = namePrefix.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^285^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node parentNode = var.getParentNode (  ) ;^270^^^^^255^285^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^249^250^^^^234^264^Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;Var var = t.getScope (  ) .getVar ( oldName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^Var var = t .getScopeRoot (  )  .getVar ( oldName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( this.containsKey ( var )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^node.setString ( 2.get ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^node.setString ( nameMap .put ( var , newName )   ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 5, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( name )  ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = newName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^249^279^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^270^^^^^255^285^Node parentNode = var.getParentNode (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^272^273^^^^257^287^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString ( newName )  ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^node.setString ( oldName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^277^^^^261^291^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;node.setString ( newName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^277^^^^^262^292^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .reportCodeChange (  ) ;compiler.reportCodeChange (  ) ;^277^^^^^262^292^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( var, oldName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put (  newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^declarations.put ( name, newName ) ;nameMap.put ( var, newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;nameMap.put ( var, newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^nameStack.push ( renamer ) ;nameMap.put ( var, newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( name , removeConstness )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( newName , global )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( namePrefix )  ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 2, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( name )   ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = namePrefix .lastIndexOf ( oldName )  ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -5, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = newName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( name , global )  ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( namePrefix )  ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( oldName , global )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^newName =  null;^265^^^^^250^280^newName = oldName;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P1_Replace_Type]^char oldName = node.getchar (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^String oldName = parentNode.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String oldName = node.setString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = names.getReplacementName ( oldName ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String name = c.getString (  ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^String newName = getReplacementName ( n.getString (  )  ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = namePrefix .lastIndexOf ( name )  ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String oldName = node .setString ( name )  ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( n.getString (  )  ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;String oldName = node.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( newName.indexOf ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( oldName .lastIndexOf ( namePrefix )   != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( newName.substring ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = newName.substring ( 0, oldName .indexOf ( name )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( newName )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( namePrefix , global )  ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^compiler .getString (  )  ;^277^^^^^262^292^compiler.reportCodeChange (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$$" )  != --2 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( var.scope.declare ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parentNode.setString (  )  == Token.FUNCTION ) {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( oldName )  ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -8, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( name , removeConstness )  ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString ( name )  ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node.setString ( nameMap .put ( var , oldName )   ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( var.scope.isDeclared ( newName, true )  ) {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( name )  ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -2, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( oldName )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = namePrefix.substring ( 0, oldName .indexOf ( oldName )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 8, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( name )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( oldName , global )  ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString ( namePrefix )  ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( var == false ) {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parentNode .getString (  )   == Token.FUNCTION ) {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString ( newName )  ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -9, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( name )  ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String newName = namePrefix.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 7, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( oldName )  ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( parentNode.getType (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^String oldName = parentNode.setString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( oldName .lastIndexOf ( oldName )   != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^if  ( 2.get ( var )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^node .setString ( namePrefix )  ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( namePrefix )  ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( name , global )  ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^nameMap .get ( var )  ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P4_Replace_Constructor]^return return  new ContextualRenameInverter ( compiler )  ;^321^^^^^320^322^return new ContextualRenamer ( nameUsage ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new ContextualRenamer ( null ) ;^321^^^^^320^322^return new ContextualRenamer ( nameUsage ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return  new ContextualRenameInverter ( compiler )  ;^321^^^^^320^322^return new ContextualRenamer ( nameUsage ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( removeConstness )  {^329^^^^^328^342^if  ( global )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P13_Insert_Block]^if  ( ! ( declarations.containsKey ( name )  )  )  {     int id = incrementNameCount ( name ) ;     String newName = null;     if  ( id != 0 )  {         newName = getUniqueName ( name, id ) ;     }     declarations.put ( name, newName ) ; }^329^^^^^328^342^[Delete]^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^if  ( !declarations.containsKey ( oldName )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P7_Replace_Invocation]^if  ( !declarations.get ( name )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P9_Replace_Statement]^if  ( nameMap.containsKey ( var )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P15_Unwrap_Block]^int id = incrementNameCount(name); java.lang.String newName = null; if (id != 0) {    newName = getUniqueName(name, id);}; declarations.put(name, newName);^333^334^335^336^337^328^342^if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P16_Remove_Block]^^333^334^335^336^337^328^342^if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P2_Replace_Operator]^if  ( id <= 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P3_Replace_Literal]^if  ( id !=  )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P8_Replace_Mix]^if  ( id != 2 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P15_Unwrap_Block]^newName = getUniqueName(name, id);^336^337^338^^^328^342^if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P16_Remove_Block]^^336^337^338^^^328^342^if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( oldName, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^newName = getUniqueName (  id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P13_Insert_Block]^if  ( id != 0 )  {     newName = getUniqueName ( name, id ) ; }^337^^^^^328^342^[Delete]^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P14_Delete_Statement]^^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^declarations.put ( name, getUniqueName ( name )  ) ;newName = getUniqueName ( name, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( name ) ;newName = getUniqueName ( name, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P1_Replace_Type]^long  id = incrementNameCount ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^int id = incrementNameCount ( oldName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P7_Replace_Invocation]^int id = reserveName ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P1_Replace_Type]^char newName = null;^335^^^^^328^342^String newName = null;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P12_Insert_Condition]^if  ( newName != null )  { String newName = null; }^335^^^^^328^342^String newName = null;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P8_Replace_Mix]^int id = reserveName ( oldName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P14_Delete_Statement]^^334^335^^^^328^342^int id = incrementNameCount ( name ) ; String newName = null;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^declarations.put ( oldName, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^declarations.put ( name, oldName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^declarations.put (  newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^declarations.put ( name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P14_Delete_Statement]^^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^nameMap.put ( var, newName ) ;declarations.put ( name, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^declarations.put ( name, getUniqueName ( name )  ) ;declarations.put ( name, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^return declarations.get ( oldName ) ;declarations.put ( name, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P2_Replace_Operator]^if  ( id < 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P3_Replace_Literal]^if  ( id != id )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P8_Replace_Mix]^if  ( id != 3 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P1_Replace_Type]^short  id = incrementNameCount ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P14_Delete_Statement]^^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^reserveName ( oldName ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P7_Replace_Invocation]^addDeclaredName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P14_Delete_Statement]^^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^n.setString ( newName ) ;reserveName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^return nameUsage.add ( name, 1 ) ;reserveName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P11_Insert_Donor_Statement]^renamer.addDeclaredName ( name ) ;reserveName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P2_Replace_Operator]^if  ( id == 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P8_Replace_Mix]^if  ( id != 4 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^return declarations.get ( newName ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^return declarations.containsKey ( oldName ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return declarations.containsKey ( newName ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^return name  >  "$$" + id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^return oldName + "$$" + id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P5_Replace_Variable]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P8_Replace_Mix]^return name  |  "$$"  |  id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  int  id  
[P3_Replace_Literal]^nameUsage.setCount ( name, 2, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^nameUsage.setCount ( name, 0, 2 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameUsage.setCount ( oldName, 0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^nameUsage.setCount (  0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^return nameUsage.add ( name, -1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldNameUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return nameUsage.add (  1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return oldNameUsage.add ( name, 1 + 2 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^return nameUsage.add ( name,  ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^return true;^366^^^^^365^367^return false;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( !declarations.containsKey ( oldName )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( !declarations.get ( name )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( nameMap.containsKey ( var )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^declarations.put(name, getUniqueName(name));^396^397^398^^^395^399^if  ( !declarations.containsKey ( name )  )  { declarations.put ( name, getUniqueName ( name )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^396^397^398^^^395^399^if  ( !declarations.containsKey ( name )  )  { declarations.put ( name, getUniqueName ( name )  ) ; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^declarations.put ( oldName, getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^declarations.put (  getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^declarations.put ( name, getReplacementName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^declarations.put ( oldName, getReplacementName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^if  ( oldName.isEmpty (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^if  ( name.indexOf (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P9_Replace_Statement]^if  ( nameStack.isEmpty (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P15_Unwrap_Block]^return name;^402^403^404^^^401^406^if  ( name.isEmpty (  )  )  { return name; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P16_Remove_Block]^^402^403^404^^^401^406^if  ( name.isEmpty (  )  )  { return name; }^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P13_Insert_Block]^if  ( newName != null )  {     return newName; }^402^^^^^401^406^[Delete]^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldName;^403^^^^^401^406^return name;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  <  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  ||  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P2_Replace_Operator]^return namePrefix  !=  name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P3_Replace_Literal]^return namePrefix + name + "" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldNamePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldName + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return namePrefixPrefix + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return name + namePrefix + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return uniqueIdSupplier + name + "_" + namePrefix.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^return namePrefix + name + "_" + uniqueIdSupplier .get ( 4 )  ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return declarations.get ( newName ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P7_Replace_Invocation]^return declarations.containsKey ( oldName ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P14_Delete_Statement]^^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, oldName, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, namePrefix, global ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer (  namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier,  removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, removeConstness, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P5_Replace_Variable]^return global;^420^^^^^419^421^return removeConstness;^[CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^private  AbstractCompiler compiler;^231^^^^^226^236^private final AbstractCompiler compiler;^[CLASS] ContextualRenameInverter  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^private Map<Var, String> nameMap  = null ;^234^^^^^229^239^private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Renamer  names  renamer  rootRenamer  AbstractCompiler  compiler  boolean  global  removeConstness  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  name  namePrefix  newName  oldName  Deque  nameStack  Map  declarations  nameMap  
[P8_Replace_Mix]^this.compiler =  null;^237^^^^^236^238^this.compiler = compiler;^[CLASS] ContextualRenameInverter  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] Map  nameMap  AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P5_Replace_Variable]^NodeTraversal.traverse (  js, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P5_Replace_Variable]^NodeTraversal.traverse ( js, compiler, this ) ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P8_Replace_Mix]^NodeTraversal .getScope (  )  ;^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P14_Delete_Statement]^^241^^^^^240^242^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] ContextualRenameInverter  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameMap  Node  externs  js  
[P2_Replace_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( node.getType (  )  < Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( oldName.indexOf("$$") != -1 )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var == null || var.isGlobal() )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var == null )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( isDeclared(newName, false) || isJSIdentifier(newName)) )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( node.setString (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( node.containsKeyType (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( oldName.indexOf ( "$$" )  < -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$$" )  != -9 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var == null || var.isGlobal() )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var == null )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( isDeclared(newName, false) || isJSIdentifier(newName)) )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( oldName.substring ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( oldName .lastIndexOf ( newName )   != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope scope = t.getScope(); com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(oldName); if ((var == null) || (var.isGlobal())) {    return ;}; if (nameMap.containsKey(var)) {    node.setString(nameMap.get(var));}else {    java.lang.String newName = oldName.substring(0, oldName.lastIndexOf("$$"));    if ((var.scope.isDeclared(newName, false)) || (!(com.google.javascript.rhino.TokenStream.isJSIdentifier(newName)))) {        newName = oldName;    }else {        var.scope.declare(newName, var.nameNode, null, null);        com.google.javascript.rhino.Node parentNode = var.getParentNode();        if (((parentNode.getType()) == (com.google.javascript.rhino.Token.FUNCTION)) && (parentNode == (var.scope.getRootNode()))) {            var.getNameNode().setString(newName);        }        node.setString(newName);        compiler.reportCodeChange();    }    nameMap.put(var, newName);};^248^249^250^251^252^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ; if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ; if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( var == null && var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var == null ) {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( var == false || var.isGlobal (  )  )  {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P15_Unwrap_Block]^return ;^251^252^253^^^236^266^if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P16_Remove_Block]^^251^252^253^^^236^266^if  ( var == null || var.isGlobal (  )  )  { return; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( nameMap.get ( var )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( var.scope.isDeclared (  false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( var.scope.declare ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P16_Remove_Block]^^271^272^273^274^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString (  )  ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^Node parentNode = var .getNameNode (  )  ;^270^^^^^263^278^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^270^^^^^263^278^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^272^273^^^^263^278^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^node.setString ( oldName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node .setString (  )  ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^277^^^^263^278^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^277^^^^^263^278^compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^263^278^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^newName =  null;^265^^^^^263^278^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parentNode.setString (  )  == Token.FUNCTION ) {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P16_Remove_Block]^^271^272^273^274^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString (  )  ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^255^281^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^newName =  null;^265^^^^^255^281^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P1_Replace_Type]^char newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 5, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( newName )  ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( newName )   ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^String newName = newName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^255^281^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^281^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^270^^^^^255^281^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^272^273^^^^255^281^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^var.getNameNode (  )  .setString (  )  ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^255^281^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^node.setString ( oldName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node .setString (  )  ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^255^281^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^277^^^^^255^281^compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( var, oldName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put (  newName ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^nameMap .get ( var )  ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^node.setString ( var.get ( nameMap )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node.setString ( nameMap .put ( var , oldName )   ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( var.scope.isDeclared ( newName, false )  && !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( var.scope.isDeclared ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( var.scope.isDeclared (  false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType() == FUNCTION && parentNode == getRootNode() )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( var.scope.declare ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^var.scope .isDeclared ( newName , 0 )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^var .getParentNode (  )  .setString ( oldName ) ;^273^^^^^263^278^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  != Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode.getType (  )  == FUNCTION )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P6_Replace_Expression]^if  ( parentNode == getRootNode (  ) )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P15_Unwrap_Block]^var.getNameNode().setString(newName);^271^272^273^274^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P16_Remove_Block]^^271^272^273^274^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^newName = newName;^265^^^^^250^280^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^newName =  null;^265^^^^^250^280^newName = oldName;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^Var var = oldName.getScope (  ) .getVar ( t ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .setString (  )  ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P1_Replace_Type]^char newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -7, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName .lastIndexOf ( oldName )  ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( newName )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^249^^^^^234^264^Scope scope = t.getScope (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;Var var = t.getScope (  ) .getVar ( oldName ) ;^250^^^^^235^265^Var var = t.getScope (  ) .getVar ( oldName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( var.containsKey ( nameMap )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^node.setString ( this.get ( var )  ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^String newName = newName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( oldName )   ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^String newName = newName.substring ( 0, oldName.substring ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^!TokenStream.isJSIdentifier ( oldName )  )  {^264^^^^^249^279^!TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName.nameNode, null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare (  var.nameNode, null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.scope.declare ( newName,  null, null ) ;^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^267^^^^^252^282^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^270^^^^^255^285^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^272^273^^^^257^287^parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( newName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( oldName ) ;var.getNameNode (  ) .setString ( newName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^node.setString ( oldName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node .setString (  )  ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^node.setString ( nameMap.get ( var )  ) ;node.setString ( newName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P11_Insert_Donor_Statement]^var.getNameNode (  ) .setString ( newName ) ;node.setString ( newName ) ;^276^^^^^261^291^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^277^^^^^262^292^compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( var, oldName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put (  newName ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^nameMap .get ( var )  ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parentNode.setString (  )  == Token.FUNCTION ) {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^^^^^263^278^node.setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -8, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String newName = oldName.substring ( 0, oldName .indexOf ( oldName )   ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -9, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^277^^^^255^281^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( newName, var ) ;^280^^^^^255^281^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^node .setString (  )  ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( var.scope.declare ( newName, true )  || !TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  > Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( newName , 3 )  ;^267^^^^^263^278^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  < Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^if  ( parentNode .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P1_Replace_Type]^char oldName = node.getchar (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^String oldName = parentNode.getString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^String oldName = node.setString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^285^Node parentNode = var.getParentNode (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( newName.indexOf ( "$$" )  != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( newName .lastIndexOf ( newName )   != -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( null.containsKey ( var )  )  {^255^^^^^240^270^if  ( nameMap.containsKey ( var )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 7, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var.getNameNode (  )  .setString (  )  ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P14_Delete_Statement]^^276^277^^^^261^291^node.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^nameMap.put ( newName, var ) ;^280^^^^^265^295^nameMap.put ( var, newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( oldName.indexOf ( "$$" )  <= -1 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^if  ( oldName.indexOf ( "$$" )  != -5 )  {^248^^^^^233^263^if  ( oldName.indexOf ( "$$" )  != -1 )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  <= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 6, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 2, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P7_Replace_Invocation]^var.scope .isDeclared ( oldName , 2 )  ;^267^^^^^255^281^var.scope.declare ( newName, var.nameNode, null, null ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^node.setString ( nameMap .put ( var , newName )   ) ;^256^^^^^241^271^node.setString ( nameMap.get ( var )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P2_Replace_Operator]^if  ( parentNode.getType (  )  >= Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parentNode .getString (  )   == Token.FUNCTION ) {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 6, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( var == this ) {^251^^^^^236^266^if  ( var == null || var.isGlobal (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( var.scope.isDeclared ( newName, true )  ) {^263^264^^^^255^281^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$" )  ) ;^258^^^^^255^281^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( var.scope.isDeclared ( newName, true )  ) {^263^264^^^^248^278^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( 5, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P5_Replace_Variable]^if  ( parentNode.getType (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parentNode.setString (  )  == Token.NAME )  {^246^^^^^231^261^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^String oldName = parentNode.setString (  ) ;^247^^^^^232^262^String oldName = node.getString (  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^String newName = oldName.substring ( -4, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^243^273^String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^256^286^if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^var .getParentNode (  )  .setString ( oldName ) ;^273^^^^^258^288^var.getNameNode (  ) .setString ( newName ) ;^[CLASS] ContextualRenameInverter  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^private  Multiset<String> nameUsage;^299^^^^^294^304^private final Multiset<String> nameUsage;^[CLASS] ContextualRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^private  Map<String, String> declarations = Maps.newHashMap (  ) ;^300^^^^^295^305^private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[CLASS] ContextualRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P8_Replace_Mix]^private  boolean global;^301^^^^^296^306^private final boolean global;^[CLASS] ContextualRenamer  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  node  parent  parentNode  String  newName  oldName  Map  nameMap  
[P3_Replace_Literal]^this.global = false;^304^^^^^303^306^this.global = true;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P11_Insert_Donor_Statement]^this.global = false;this.global = true;^304^^^^^303^306^this.global = true;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P8_Replace_Mix]^nameUsage ;^305^^^^^303^306^nameUsage = HashMultiset.create (  ) ;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P14_Delete_Statement]^^305^^^^^303^306^nameUsage = HashMultiset.create (  ) ;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$ContextualRenamer()   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P3_Replace_Literal]^this.global = true;^312^^^^^311^314^this.global = false;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P11_Insert_Donor_Statement]^this.global = true;this.global = false;^312^^^^^311^314^this.global = false;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P8_Replace_Mix]^this.nameUsage =  null;^313^^^^^311^314^this.nameUsage = nameUsage;^[CLASS] ContextualRenamer  [METHOD] <init> [RETURN_TYPE] Multiset)   String> nameUsage [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P13_Insert_Block]^if  ( ! ( declarations.containsKey ( name )  )  )  {     int id = incrementNameCount ( name ) ;     String newName = null;     if  ( id != 0 )  {         newName = getUniqueName ( name, id ) ;     }     declarations.put ( name, newName ) ; }^329^^^^^328^342^[Delete]^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^if  ( !declarations.containsKey ( newName )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P7_Replace_Invocation]^if  ( !declarations.get ( name )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P15_Unwrap_Block]^int id = incrementNameCount(name); java.lang.String newName = null; if (id != 0) {    newName = getUniqueName(name, id);}; declarations.put(name, newName);^333^334^335^336^337^328^342^if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P16_Remove_Block]^^333^334^335^336^337^328^342^if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P2_Replace_Operator]^if  ( id == 0 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^if  ( id != 0 + 2 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P15_Unwrap_Block]^newName = getUniqueName(name, id);^336^337^338^^^328^342^if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P16_Remove_Block]^^336^337^338^^^328^342^if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^newName = getUniqueName (  id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( id, name ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^newName =  getUniqueName ( null, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P13_Insert_Block]^if  ( id != 0 )  {     newName = getUniqueName ( name, id ) ; }^337^^^^^328^342^[Delete]^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^newName = getUniqueName ( newName, id ) ;^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P14_Delete_Statement]^^337^^^^^328^342^newName = getUniqueName ( name, id ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P1_Replace_Type]^long  id = incrementNameCount ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^int id = incrementNameCount ( newName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P7_Replace_Invocation]^int id = reserveName ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^int id = reserveName ( newName ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P1_Replace_Type]^char newName = null;^335^^^^^328^342^String newName = null;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P14_Delete_Statement]^^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^declarations.put ( name, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^declarations.put (  newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^declarations.put ( name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P14_Delete_Statement]^^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P11_Insert_Donor_Statement]^return declarations.get ( oldName ) ;declarations.put ( name, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P3_Replace_Literal]^if  ( id != 5 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^if  ( id != 0L )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P1_Replace_Type]^short  id = incrementNameCount ( name ) ;^334^^^^^328^342^int id = incrementNameCount ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P14_Delete_Statement]^^334^335^^^^328^342^int id = incrementNameCount ( name ) ; String newName = null;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^declarations.put ( newName, newName ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^reserveName ( newName ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P7_Replace_Invocation]^addDeclaredName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P14_Delete_Statement]^^330^^^^^328^342^reserveName ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P11_Insert_Donor_Statement]^return nameUsage.add ( name, 1 ) ;reserveName ( name ) ;^330^^^^^328^342^reserveName ( name ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P3_Replace_Literal]^if  ( id != -4 )  {^336^^^^^328^342^if  ( id != 0 )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^declarations.put ( newName, name ) ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^declarations .get ( 0 )  ;^339^^^^^328^342^declarations.put ( name, newName ) ;^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P8_Replace_Mix]^if  ( !declarations.get ( newName )  )  {^333^^^^^328^342^if  ( !declarations.containsKey ( name )  )  {^[CLASS] ContextualRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  newName  Map  declarations  int  id  
[P5_Replace_Variable]^return oldName.get ( declarations ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] ContextualRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Multiset  nameUsage  boolean  global  String  oldName  Map  declarations  
[P7_Replace_Invocation]^return declarations.containsKey ( oldName ) ;^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] ContextualRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Multiset  nameUsage  boolean  global  String  oldName  Map  declarations  
[P14_Delete_Statement]^^346^^^^^345^347^return declarations.get ( oldName ) ;^[CLASS] ContextualRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Multiset  nameUsage  boolean  global  String  oldName  Map  declarations  
[P2_Replace_Operator]^return name  |  "$$" + id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[P5_Replace_Variable]^return id + "$$" + name;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[P8_Replace_Mix]^return name  ||  "$$"  ||  id;^353^^^^^352^354^return name + "$$" + id;^[CLASS] ContextualRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name int id [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  int  id  
[P3_Replace_Literal]^nameUsage.setCount ( name, -7, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P3_Replace_Literal]^nameUsage.setCount ( name, 0, 9 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P5_Replace_Variable]^nameUsage.setCount (  0, 1 ) ;^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P14_Delete_Statement]^^357^^^^^356^358^nameUsage.setCount ( name, 0, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] reserveName [RETURN_TYPE] void   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P3_Replace_Literal]^return nameUsage.add ( name, 8 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P5_Replace_Variable]^return nameUsage.add (  1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P5_Replace_Variable]^return nameUsageUsage.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P5_Replace_Variable]^return name.add ( nameUsage, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P8_Replace_Mix]^return nameUsage.add ( name, 1 >> 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P5_Replace_Variable]^return 1.add ( name, 1 ) ;^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P14_Delete_Statement]^^361^^^^^360^362^return nameUsage.add ( name, 1 ) ;^[CLASS] ContextualRenamer  [METHOD] incrementNameCount [RETURN_TYPE] int   String name [VARIABLES] Multiset  nameUsage  boolean  global  String  name  Map  declarations  
[P3_Replace_Literal]^return true;^366^^^^^365^367^return false;^[CLASS] ContextualRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P8_Replace_Mix]^private  Map<String, String> declarations = Maps.newHashMap (  ) ;^380^^^^^375^385^private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[CLASS] InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P8_Replace_Mix]^private  Supplier<String> uniqueIdSupplier;^381^^^^^376^386^private final Supplier<String> uniqueIdSupplier;^[CLASS] InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P1_Replace_Type]^private final char namePrefix;^382^^^^^377^387^private final String namePrefix;^[CLASS] InlineRenamer  [METHOD] stripConstIfReplaced [RETURN_TYPE] boolean   [VARIABLES] Multiset  nameUsage  boolean  global  Map  declarations  
[P8_Replace_Mix]^this.uniqueIdSupplier =  null;^389^^^^^385^392^this.uniqueIdSupplier = uniqueIdSupplier;^[CLASS] InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  namePrefix  Map  declarations  
[P8_Replace_Mix]^this.namePrefix =  null;^390^^^^^385^392^this.namePrefix = namePrefix;^[CLASS] InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  namePrefix  Map  declarations  
[P8_Replace_Mix]^this.removeConstness =  null;^391^^^^^385^392^this.removeConstness = removeConstness;^[CLASS] InlineRenamer  [METHOD] <init> [RETURN_TYPE] String,boolean)   String> uniqueIdSupplier String namePrefix boolean removeConstness [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  namePrefix  Map  declarations  
[P5_Replace_Variable]^if  ( !declarations.containsKey ( namePrefix )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P7_Replace_Invocation]^if  ( !declarations.get ( name )  )  {^396^^^^^395^399^if  ( !declarations.containsKey ( name )  )  {^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P15_Unwrap_Block]^declarations.put(name, getUniqueName(name));^396^397^398^^^395^399^if  ( !declarations.containsKey ( name )  )  { declarations.put ( name, getUniqueName ( name )  ) ; }^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P16_Remove_Block]^^396^397^398^^^395^399^if  ( !declarations.containsKey ( name )  )  { declarations.put ( name, getUniqueName ( name )  ) ; }^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^declarations.put ( namePrefix, getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^declarations.put (  getUniqueName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P7_Replace_Invocation]^declarations .get (  )  ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P7_Replace_Invocation]^declarations.put ( name, getReplacementName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P14_Delete_Statement]^^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P8_Replace_Mix]^declarations.put ( namePrefix, getReplacementName ( name )  ) ;^397^^^^^395^399^declarations.put ( name, getUniqueName ( name )  ) ;^[CLASS] InlineRenamer  [METHOD] addDeclaredName [RETURN_TYPE] void   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^if  ( namePrefix.isEmpty (  )  )  {^402^^^^^401^406^if  ( name.isEmpty (  )  )  {^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P15_Unwrap_Block]^return name;^402^403^404^^^401^406^if  ( name.isEmpty (  )  )  { return name; }^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P16_Remove_Block]^^402^403^404^^^401^406^if  ( name.isEmpty (  )  )  { return name; }^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return namePrefix;^403^^^^^401^406^return name;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P2_Replace_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  <  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P2_Replace_Operator]^return namePrefix + name + "_" + uniqueIdSupplier.get (  >  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P2_Replace_Operator]^return namePrefix  &&  name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return name + name + "_" + uniqueIdSupplier.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return namePrefix + name + "_" + this.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return uniqueIdSupplierPrefix + name + "_" + name.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return uniqueIdSupplier + name + "_" + namePrefix.get (  ) ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P7_Replace_Invocation]^return namePrefix + name + "_" + uniqueIdSupplier .get (  )  ;^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P14_Delete_Statement]^^405^^^^^401^406^return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[CLASS] InlineRenamer  [METHOD] getUniqueName [RETURN_TYPE] String   String name [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  Map  declarations  
[P5_Replace_Variable]^return declarations.get ( namePrefix ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return oldName.get ( declarations ) ;^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P14_Delete_Statement]^^410^^^^^409^411^return declarations.get ( oldName ) ;^[CLASS] InlineRenamer  [METHOD] getReplacementName [RETURN_TYPE] String   String oldName [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, oldName, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer (  namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier,  removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( uniqueIdSupplier, namePrefix ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( namePrefix, uniqueIdSupplier, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( removeConstness, namePrefix, uniqueIdSupplier ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
[P5_Replace_Variable]^return new InlineRenamer ( 3, namePrefix, removeConstness ) ;^415^^^^^414^416^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[CLASS] InlineRenamer  [METHOD] forChildScope [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer   [VARIABLES] Supplier  uniqueIdSupplier  boolean  removeConstness  String  name  namePrefix  oldName  Map  declarations  
