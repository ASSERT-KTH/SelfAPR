[P1_Replace_Type]^private char sourceName = null;^32^^^^^27^37^private String sourceName = null;^[CLASS] ControlStructureCheck   [VARIABLES] 
[P8_Replace_Mix]^private String sourceName  = null ;^32^^^^^27^37^private String sourceName = null;^[CLASS] ControlStructureCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType USE_OF_WITH = DiagnosticType.warning ( "SC_USE", "The use of the 'with' structure should be avoided." ) ;^34^35^36^^^34^36^static final DiagnosticType USE_OF_WITH = DiagnosticType.warning ( "JSC_USE_OF_WITH", "The use of the 'with' structure should be avoided." ) ;^[CLASS] ControlStructureCheck   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType USE_OF_WITH = DiagnosticType.warning ( "JSC_USE_OF_WITH", "re s" ) ;^34^35^36^^^34^36^static final DiagnosticType USE_OF_WITH = DiagnosticType.warning ( "JSC_USE_OF_WITH", "The use of the 'with' structure should be avoided." ) ;^[CLASS] ControlStructureCheck   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType USE_OF_WITH ;^34^35^36^^^34^36^static final DiagnosticType USE_OF_WITH = DiagnosticType.warning ( "JSC_USE_OF_WITH", "The use of the 'with' structure should be avoided." ) ;^[CLASS] ControlStructureCheck   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^39^^^^^38^40^this.compiler = compiler;^[CLASS] ControlStructureCheck  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  
[P5_Replace_Variable]^check ( externs ) ;^44^^^^^43^45^check ( root ) ;^[CLASS] ControlStructureCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  Node  externs  root  
[P14_Delete_Statement]^^44^^^^^43^45^check ( root ) ;^[CLASS] ControlStructureCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  Node  externs  root  
[P11_Insert_Donor_Statement]^check ( bChild ) ;check ( root ) ;^44^^^^^43^45^check ( root ) ;^[CLASS] ControlStructureCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  Node  externs  root  
[P15_Unwrap_Block]^report(node, com.google.javascript.jscomp.ControlStructureCheck.USE_OF_WITH);^58^59^60^^^52^74^if  ( !allowWith )  { report ( node, USE_OF_WITH ) ; }^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P16_Remove_Block]^^58^59^60^^^52^74^if  ( !allowWith )  { report ( node, USE_OF_WITH ) ; }^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^report (  USE_OF_WITH ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^report ( node ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^report ( USE_OF_WITH, node ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P7_Replace_Invocation]^check ( node, USE_OF_WITH ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P8_Replace_Mix]^report ( next, USE_OF_WITH ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P13_Insert_Block]^if  ( !allowWith )  {     report ( node, USE_OF_WITH ) ; }^59^^^^^52^74^[Delete]^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P1_Replace_Type]^sourceName =  ( char )  node.getProp ( Node.SOURCENAME_PROP ) ;^65^^^^^52^74^sourceName =  ( String )  node.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^sourceName =  ( String )  next.getProp ( Node.SOURCENAME_PROP ) ;^65^^^^^52^74^sourceName =  ( String )  node.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P7_Replace_Invocation]^sourceName =  ( String )  node .getType (  )  ;^65^^^^^52^74^sourceName =  ( String )  node.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^JSDocInfo info = next.getJSDocInfo (  ) ;^55^^^^^52^74^JSDocInfo info = node.getJSDocInfo (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P2_Replace_Operator]^boolean allowWith = info != null || info.getSuppressions (  ) .contains ( "with" ) ;^56^57^^^^52^74^boolean allowWith = info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P2_Replace_Operator]^boolean allowWith = info == null && info.getSuppressions (  ) .contains ( "with" ) ;^56^57^^^^52^74^boolean allowWith = info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^switch  ( next.getType (  )  )  {^53^^^^^52^74^switch  ( node.getType (  )  )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P7_Replace_Invocation]^switch  ( node .getProp (  )   )  {^53^^^^^52^74^switch  ( node.getType (  )  )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^53^54^55^^^52^74^switch  ( node.getType (  )  )  { case Token.WITH: JSDocInfo info = node.getJSDocInfo (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^55^^^^^52^74^JSDocInfo info = node.getJSDocInfo (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P3_Replace_Literal]^info != null && info.getSuppressions (  ) .contains ( "witith" ) ;^57^^^^^52^74^info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^57^^^^^52^74^info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^65^66^^^^52^74^sourceName =  ( String )  node.getProp ( Node.SOURCENAME_PROP ) ; break;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P2_Replace_Operator]^for  ( Node bChild = node.getFirstChild (  ) ; bChild == null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^for  ( Node bChild = next.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^for  ( Node node = node.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^for  ( Node node = bChild.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^bChild = node;^72^^^^^52^74^bChild = next;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^Node next = node.getNext (  ) ;^70^^^^^52^74^Node next = bChild.getNext (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^70^71^^^^52^74^Node next = bChild.getNext (  ) ; check ( bChild ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^check ( node ) ;^71^^^^^52^74^check ( bChild ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^71^72^^^^52^74^check ( bChild ) ; bChild = next;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P11_Insert_Donor_Statement]^check ( root ) ;check ( bChild ) ;^71^^^^^52^74^check ( bChild ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P8_Replace_Mix]^bChild =  null;^72^^^^^52^74^bChild = next;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P8_Replace_Mix]^for  ( Node bChild = next .getType (  )  ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^69^70^71^72^73^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  { Node next = bChild.getNext (  ) ; check ( bChild ) ; bChild = next; }^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P7_Replace_Invocation]^Node next = bChild .getType (  )  ;^70^^^^^52^74^Node next = bChild.getNext (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^70^^^^^52^74^Node next = bChild.getNext (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P14_Delete_Statement]^^71^^^^^52^74^check ( bChild ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName,  error )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName, n )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, error )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( error, n, sourceName )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P7_Replace_Invocation]^compiler .report (  )  ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P8_Replace_Mix]^compiler.report ( JSError.make ( sourceName, n, USE_OF_WITH )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P14_Delete_Statement]^^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, sourceName, error )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
