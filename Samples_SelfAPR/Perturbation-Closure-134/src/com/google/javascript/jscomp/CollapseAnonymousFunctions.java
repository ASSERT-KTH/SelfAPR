[P8_Replace_Mix]^private  AbstractCompiler compiler;^41^^^^^36^46^private final AbstractCompiler compiler;^[CLASS] CollapseAnonymousFunctions Callback   [VARIABLES] 
[P8_Replace_Mix]^Preconditions.checkArgument ( compiler .reportCodeChange (  )   ) ;^44^^^^^43^46^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P14_Delete_Statement]^^44^^^^^43^46^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.hasOneChild (  )  ) ;Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^44^^^^^43^46^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P8_Replace_Mix]^this.compiler =  null;^45^^^^^43^46^this.compiler = compiler;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P14_Delete_Statement]^^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( value.getType (  )  != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( n.getType (  )  != Token.null )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P15_Unwrap_Block]^return ;^56^57^58^^^41^71^if  ( n.getType (  )  != Token.VAR )  { return; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P16_Remove_Block]^^56^57^58^^^41^71^if  ( n.getType (  )  != Token.VAR )  { return; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( NAME )  )  &&  ( n.getString (  ) .equals ( name )  )  )  {     return true; }^56^^^^^41^71^[Delete]^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( n .getParent (  )   != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node grandparent = value.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node grandparent = parent.removeChild (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node grandparent = parent.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node grandparent = parent.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node grandparent = parent .getString (  )  ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT && grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  != Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null || grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent == null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( ! ( value.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( ! ( parent.getType (  )  == Token.SCRIPT || value != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( ! ( grandparent.getType (  )  == Token.SCRIPT || parent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( ! ( parent.getType (  )  == Token.SCRIPT ) {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  (  grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == SCRIPT )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( ((grandparent != null) && (grandparent.getType() == FUNCTION) && parent.getType() == BLOCK) )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( (grandparent != null && grandparent.getType() == FUNCTION) )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( grandparent != null )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == FUNCTION )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == BLOCK )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( ! ( parent.removeChild (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  (  grandparent != this && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P15_Unwrap_Block]^return ;^67^68^69^70^71^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P16_Remove_Block]^^67^68^69^70^71^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( ! ( value .getParent (  )   == Token.SCRIPT || grandparent != null && grandparent^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^grandparent.removeChild (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^69^70^^^^54^84^grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^69^70^71^^^54^84^grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.BLOCK )  )  {^70^^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^parent .getParent (  )   == Token.BLOCK )  )  {^70^^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^70^71^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  { return;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Preconditions.checkState ( n.removeChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^76^77^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ; Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( n.hasOneChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Preconditions.checkState ( value.removeChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node valueame = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node name = n.removeChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node parentame = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node name = n .getString (  )  ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node value = parent.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node value = name.removeChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node value = value.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node value = name .getString (  )  ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value != null || value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value == null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value != null && value.getType (  )  != Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( parent != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( value != null && value.getType (  )  == Token.4 && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( n != valueull && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( value != null ) {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  (  value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( (value != null && value.getType() == FUNCTION) )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( value.getType (  )  == FUNCTION )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( value != null && value.removeChild (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( parent != false ) {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node fnName = parent.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value.removeChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value .getString (  )  ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Node fnName = name.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^82^83^^^^79^88^Node fnName = value.getFirstChild (  ) ; fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( value.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.replaceChild ( name.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name.removeChild (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.setString ( value.removeChild (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^84^^^^79^88^fnName.setString ( name.getString (  )  ) ; NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^return containsName ( body, name.getString (  )  ) ;fnName.setString ( name.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P12_Insert_Condition]^if  ( name.getString (  ) .isEmpty (  )  )  { fnName.setString ( name.getString (  )  ) ; }^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name .setString (  )   ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.setString ( parent.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( value, fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name, value ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^name.removeChild ( parent ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name.replaceChild ( value ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name .replaceChild ( value , grandparent )  ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, value ) ;name.removeChild ( value ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( parent, value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n, name ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild (  value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( value, n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^name.removeChild ( value ) ;parent.replaceChild ( n, value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^compiler.isNormalized (  ) ;^87^^^^^79^88^compiler.reportCodeChange (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^87^^^^^79^88^compiler.reportCodeChange (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node fnName = parent.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value.removeChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value .getString (  )  ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^value.removeChild (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^80^81^^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^value.removeChild (  )  == Token.FUNCTION && !isRecursiveFunction ( name )  )  {^80^81^^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^80^81^82^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^!isRecursiveFunction ( parent )  )  {^81^^^^^66^96^!isRecursiveFunction ( value )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^81^82^^^^66^96^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( value.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.replaceChild ( name.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name.removeChild (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name .setString (  )   ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.replaceChild ( value.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^84^^^^68^98^fnName.setString ( name.getString (  )  ) ; NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^return containsName ( body, name.getString (  )  ) ;fnName.setString ( name.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P12_Insert_Condition]^if  ( name.getString (  ) .isEmpty (  )  )  { fnName.setString ( name.getString (  )  ) ; }^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( parent.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.setString ( value.removeChild (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( value, fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name, value ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^84^85^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ; name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name.replaceChild ( value ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^name.removeChild ( parent ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, value ) ;name.removeChild ( value ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( value, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n, name ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild (  value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( value, n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^parent .removeChild ( fnName )  ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^parent.replaceChild ( parent, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^86^87^^^^71^101^parent.replaceChild ( n, value ) ; compiler.reportCodeChange (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^name.removeChild ( value ) ;parent.replaceChild ( n, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^compiler.isNormalized (  ) ;^87^^^^^72^102^compiler.reportCodeChange (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^87^^^^^72^102^compiler.reportCodeChange (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node name = body.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^Node name = function.removeChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^Node name = name.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^Node name = function .getString (  )  ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P8_Replace_Mix]^Node name = name.removeChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P14_Delete_Statement]^^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^if  ( function.getString (  ) .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^if  ( name.getString (  ) .equals (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^if  ( name.removeChild (  ) .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P15_Unwrap_Block]^return false;^93^94^95^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  { return false; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P16_Remove_Block]^^93^94^95^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  { return false; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P3_Replace_Literal]^return true;^94^^^^^91^99^return false;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^if  ( name .setString (  )  .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P8_Replace_Mix]^if  ( function.getString (  ) .equals (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^Node args = name.removeChild (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node grandparent = parent.getParent (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^Node args = function.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P14_Delete_Statement]^^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^Node body = name.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^Node body = args.removeChild (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P11_Insert_Donor_Statement]^Node grandparent = parent.getParent (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P8_Replace_Mix]^Node body = name.removeChild (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P14_Delete_Statement]^^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^return containsName ( function, name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^return containsName ( body, function.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^return containsName (  name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^return containsName ( body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P5_Replace_Variable]^return containsName ( name, body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^return containsName ( body, name.removeChild (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P12_Insert_Condition]^if  ( containsName ( child, name )  )  { return containsName ( body, name.getString (  )  ) ; }^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P7_Replace_Invocation]^return containsName ( body, name .setString (  )   ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P14_Delete_Statement]^^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.NAME || n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.NAME ) {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P6_Replace_Expression]^if  ( n.getType (  )  == NAME )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.NAME && n.removeChild (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.NAME ) {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P15_Unwrap_Block]^return true;^102^103^104^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  { return true; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P16_Remove_Block]^^102^103^104^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  { return true; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  !=  ( VAR )  )  {     return ; }^102^^^^^101^112^[Delete]^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P3_Replace_Literal]^return false;^103^^^^^101^112^return true;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P7_Replace_Invocation]^if  ( n .getParent (  )   == Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.NAME && n.getString (  ) .equals ( n )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.NAME && n .setString (  )  .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( containsName ( n, name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( containsName (  name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( containsName ( child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^if  ( containsName ( name, child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P15_Unwrap_Block]^return true;^107^108^109^^^101^112^if  ( containsName ( child, name )  )  { return true; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P16_Remove_Block]^^107^108^109^^^101^112^if  ( containsName ( child, name )  )  { return true; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P3_Replace_Literal]^return false;^108^^^^^101^112^return true;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P5_Replace_Variable]^for  ( Node child : child.children (  )  )  {^106^^^^^101^112^for  ( Node child : n.children (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child : n.removeChild (  )  )  {^106^^^^^101^112^for  ( Node child : n.children (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P8_Replace_Mix]^for  ( Node child : child .getParent (  )   )  {^106^^^^^101^112^for  ( Node child : n.children (  )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P14_Delete_Statement]^^106^107^108^109^^101^112^for  ( Node child : n.children (  )  )  { if  ( containsName ( child, name )  )  { return true; }^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P3_Replace_Literal]^return true;^111^^^^^101^112^return false;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( value.getType (  )  != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( value.removeChild (  )  != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P15_Unwrap_Block]^return ;^56^57^58^^^41^71^if  ( n.getType (  )  != Token.VAR )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P16_Remove_Block]^^56^57^58^^^41^71^if  ( n.getType (  )  != Token.VAR )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( NAME )  )  &&  ( n.getString (  ) .equals ( name )  )  )  {     return true; }^56^^^^^41^71^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( n .getParent (  )   != Token.VAR )  {^56^^^^^41^71^if  ( n.getType (  )  != Token.VAR )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node grandparent = value.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node grandparent = parent.removeChild (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node grandparent = parent .getString (  )  ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node grandparent = parent.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node grandparent = parent.getParent (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Node grandparent = value.removeChild (  ) ;^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^66^^^^^51^81^Node grandparent = parent.getParent (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT && grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  != Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null || grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent == null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( ! ( value.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( ! ( parent.getType (  )  == Token.SCRIPT ) {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  (  grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == SCRIPT )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( ((grandparent != null) && (grandparent.getType() == FUNCTION) && parent.getType() == BLOCK) )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( (grandparent != null && grandparent.getType() == FUNCTION) )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( grandparent != null )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == FUNCTION )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == BLOCK )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( ! ( parent.removeChild (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( ! ( parent .getParent (  )   == Token.SCRIPT || grandparent != null && grandparent^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P15_Unwrap_Block]^return ;^67^68^69^70^71^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P16_Remove_Block]^^67^68^69^70^71^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( ! ( name.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^grandparent.removeChild (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^69^70^^^^54^84^grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^69^70^71^^^54^84^grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.BLOCK )  )  {^70^^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^parent .getParent (  )   == Token.BLOCK )  )  {^70^^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^70^71^^^^55^85^parent.getType (  )  == Token.BLOCK )  )  { return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Preconditions.checkState ( n.removeChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Preconditions.checkState ( n .removeChild ( fnName )   ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^76^^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^76^77^^^^61^91^Preconditions.checkState ( n.hasOneChild (  )  ) ; Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node valueame = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node name = n.removeChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^77^^^^^62^92^Node name = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^77^78^^^^62^92^Node name = n.getFirstChild (  ) ; Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node value = parent.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node value = name.removeChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Node value = parent.removeChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node value = name.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node value = name .getString (  )  ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Node value = value.getFirstChild (  ) ;^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^78^^^^^63^93^Node value = name.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value != null || value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value == null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P2_Replace_Operator]^if  ( value != null && value.getType (  )  != Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( parent != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^if  ( value != valueull && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( value != null ) {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  (  value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( (value != null && value.getType() == FUNCTION) )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P6_Replace_Expression]^if  ( value.getType (  )  == FUNCTION )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^if  ( value != null && value.removeChild (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^if  ( value != true && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^64^94^if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node fnName = parent.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value.removeChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node fnName = name.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^82^83^^^^79^88^Node fnName = value.getFirstChild (  ) ; fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^79^88^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( value.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.replaceChild ( name.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName .getString (  )  ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name.removeChild (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^return containsName ( body, name.getString (  )  ) ;fnName.setString ( name.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P12_Insert_Condition]^if  ( name.getString (  ) .isEmpty (  )  )  { fnName.setString ( name.getString (  )  ) ; }^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.setString ( parent.getString (  )  ) ;^83^^^^^79^88^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^84^^^^79^88^fnName.setString ( name.getString (  )  ) ; NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( value, fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name, value ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^84^85^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ; name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^name.removeChild ( parent ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name.replaceChild ( value ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^85^86^^^^79^88^name.removeChild ( value ) ; parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, value ) ;name.removeChild ( value ) ;^85^^^^^79^88^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( value, value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n, name ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild (  value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( value, n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^parent .removeChild ( value )  ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^86^87^^^^79^88^parent.replaceChild ( n, value ) ; compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^name.removeChild ( value ) ;parent.replaceChild ( n, value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^87^^^^^79^88^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node fnName = parent.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value.removeChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^Node fnName = parent .getString (  )  ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( parent )  )  {^80^81^^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^value.removeChild (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^80^81^^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^value .getParent (  )   == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^80^81^^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^80^81^82^^^65^95^value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^!isRecursiveFunction ( name )  )  {^81^^^^^66^96^!isRecursiveFunction ( value )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^81^82^^^^66^96^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^Node fnName = value .getString (  )  ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^82^83^^^^67^97^Node fnName = value.getFirstChild (  ) ; fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^!isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ;Node fnName = value.getFirstChild (  ) ;^82^^^^^67^97^Node fnName = value.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( value.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.replaceChild ( name.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName .getString (  )  ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name.removeChild (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^fnName.setString ( name .setString (  )   ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^fnName.setString ( value.removeChild (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^84^^^^68^98^fnName.setString ( name.getString (  )  ) ; NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^return containsName ( body, name.getString (  )  ) ;fnName.setString ( name.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^fnName.setString ( parent.getString (  )  ) ;^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P12_Insert_Condition]^if  ( name.getString (  ) .isEmpty (  )  )  { fnName.setString ( name.getString (  )  ) ; }^83^^^^^68^98^fnName.setString ( name.getString (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( value, fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name, value ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^name.removeChild ( parent ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name.replaceChild ( value ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P7_Replace_Invocation]^name .replaceChild ( grandparent , fnName )  ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^85^86^^^^70^100^name.removeChild ( value ) ; parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, value ) ;name.removeChild ( value ) ;^85^^^^^70^100^name.removeChild ( value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( parent, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild (  value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P8_Replace_Mix]^parent.replaceChild ( value, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P11_Insert_Donor_Statement]^name.removeChild ( value ) ;parent.replaceChild ( n, value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P14_Delete_Statement]^^87^^^^^72^102^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[P5_Replace_Variable]^Node name = body.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node name = function.removeChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P8_Replace_Mix]^Node name = body.removeChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node name = function.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^Node name = name.getFirstChild (  ) ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node name = function .getString (  )  ;^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P14_Delete_Statement]^^92^^^^^91^99^Node name = function.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^if  ( function.getString (  ) .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^if  ( name.getString (  ) .equals (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^if  ( name.removeChild (  ) .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P8_Replace_Mix]^if  ( function.removeChild (  ) .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P15_Unwrap_Block]^return false;^93^94^95^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  { return false; }^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P16_Remove_Block]^^93^94^95^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  { return false; }^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P3_Replace_Literal]^return true;^94^^^^^91^99^return false;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^if  ( name .setString (  )  .isEmpty (  )  )  {^93^^^^^91^99^if  ( name.getString (  ) .isEmpty (  )  )  {^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^Node args = function.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node args = name.removeChild (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node args = name .getParent (  )  ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node grandparent = parent.getParent (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node name = function.getFirstChild (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node body = args.getNext (  ) ;Node args = name.getNext (  ) ;^96^^^^^91^99^Node args = name.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P14_Delete_Statement]^^96^97^^^^91^99^Node args = name.getNext (  ) ; Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^Node body = name.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node body = args.removeChild (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^Node body = args .getParent (  )  ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node value = name.getFirstChild (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node fnName = value.getFirstChild (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node args = name.getNext (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P11_Insert_Donor_Statement]^Node grandparent = parent.getParent (  ) ;Node body = args.getNext (  ) ;^97^^^^^91^99^Node body = args.getNext (  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P14_Delete_Statement]^^97^98^^^^91^99^Node body = args.getNext (  ) ; return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^return containsName ( function, name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^return containsName ( body, function.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^return containsName (  name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^return containsName ( body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P5_Replace_Variable]^return containsName ( name, body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^return containsName ( body, name.removeChild (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P7_Replace_Invocation]^return containsName ( body, name .setString (  )   ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P12_Insert_Condition]^if  ( containsName ( child, name )  )  { return containsName ( body, name.getString (  )  ) ; }^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P14_Delete_Statement]^^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.NAME || n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.NAME && n.getString (  ) .equals ( n )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.NAME ) {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P6_Replace_Expression]^if  (  n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P6_Replace_Expression]^if  ( n.getType (  )  == NAME )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.NAME && n.removeChild (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.NAME ) {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P15_Unwrap_Block]^return true;^102^103^104^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  { return true; }^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P16_Remove_Block]^^102^103^104^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  { return true; }^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  !=  ( VAR )  )  {     return ; }^102^^^^^101^112^[Delete]^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P3_Replace_Literal]^return false;^103^^^^^101^112^return true;^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.NAME && n.removeChild (  ) .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P7_Replace_Invocation]^if  ( n.getType (  )  == Token.NAME && n .setString (  )  .equals ( name )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( containsName ( n, name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( containsName (  name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( containsName ( child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^if  ( containsName ( name, child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P15_Unwrap_Block]^return true;^107^108^109^^^101^112^if  ( containsName ( child, name )  )  { return true; }^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P16_Remove_Block]^^107^108^109^^^101^112^if  ( containsName ( child, name )  )  { return true; }^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P3_Replace_Literal]^return false;^108^^^^^101^112^return true;^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P5_Replace_Variable]^for  ( Node child : child.children (  )  )  {^106^^^^^101^112^for  ( Node child : n.children (  )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P7_Replace_Invocation]^for  ( Node child : n.removeChild (  )  )  {^106^^^^^101^112^for  ( Node child : n.children (  )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P14_Delete_Statement]^^106^107^108^109^^101^112^for  ( Node child : n.children (  )  )  { if  ( containsName ( child, name )  )  { return true; }^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[P3_Replace_Literal]^return true;^111^^^^^101^112^return false;^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
