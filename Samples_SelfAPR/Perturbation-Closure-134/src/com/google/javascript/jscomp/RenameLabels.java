[P8_Replace_Mix]^private  AbstractCompiler compiler;^71^^^^^66^76^private final AbstractCompiler compiler;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^89^^^^^84^94^final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", this ) ;^92^93^^^^92^93^final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^final ArrayList<String> names  = null ;^97^^^^^92^102^final ArrayList<String> names = new ArrayList<String> (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P3_Replace_Literal]^boolean referenced = true;^246^^^^^241^251^boolean referenced = false;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^boolean referenced  = null ;^246^^^^^241^251^boolean referenced = false;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P1_Replace_Type]^final  short  id;^247^^^^^242^252^final int id;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^final  long  id;^247^^^^^242^252^final int id;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^256^^^^^251^261^final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo> (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^74^^^^^73^75^this.compiler = compiler;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P4_Replace_Constructor]^namespaceStack.push ( namespaceStack.push (  new LabelInfo ( currentDepth )   ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P7_Replace_Invocation]^namespaceStack.pop ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P7_Replace_Invocation]^namespaceStack .pop (  )  ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P14_Delete_Statement]^^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P11_Insert_Donor_Statement]^namespaceStack.peek (  ) .renameMap.remove ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P8_Replace_Mix]^this.id =  null;^250^^^^^249^251^this.id = id;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] <init> [RETURN_TYPE] RenameLabels$LabelInfo(int)   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P4_Replace_Constructor]^namespaceStack.push ( namespaceStack.push (  new LabelInfo ( currentDepth )   ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P7_Replace_Invocation]^namespaceStack.pop ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P14_Delete_Statement]^^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P11_Insert_Donor_Statement]^namespaceStack.peek (  ) .renameMap.remove ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P7_Replace_Invocation]^namespaceStack.peek (  ) ;^108^^^^^107^109^namespaceStack.pop (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P14_Delete_Statement]^^108^^^^^107^109^namespaceStack.pop (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  id  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P6_Replace_Expression]^if  ( size() + 1 )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P6_Replace_Expression]^if  ( names.size() < currentDepth )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P6_Replace_Expression]^if  (  ( "label renamed: " + name )  + " => " + newName )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P6_Replace_Expression]^if  ( "label renamed: " + name + " => " )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P6_Replace_Expression]^if  ( "label renamed: " + name )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^if  ( node.setString (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P9_Replace_Statement]^if  ( newChild.getType (  )  == Token.BLOCK )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^if  ( names.size (  )  <= currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^if  ( names.size() - 8  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^if  ( names.size (  )  < id )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^if  ( names.ArrayList (  )  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^if  ( names.ArrayList (  )  < id )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P15_Unwrap_Block]^names.add(nameGenerator.generateNextName());^131^132^133^^^117^140^if  ( names.size (  )  < currentDepth )  { names.add ( nameGenerator.generateNextName (  )  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P16_Remove_Block]^^131^132^133^^^117^140^if  ( names.size (  )  < currentDepth )  { names.add ( nameGenerator.generateNextName (  )  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^names.size ( nameGenerator.generateNextName (  )  ) ;^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^names .ArrayList (  )  ;^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P4_Replace_Constructor]^LabelInfo li = new LabelNamespace (  )  ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^LabelInfo li = new LabelInfo ( id ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P1_Replace_Type]^short  currentDepth = current.renameMap.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^int currentDepth = current.renameMap.size (  &  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size (  )  + id;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() - 0  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^int currentDepth = current.renameMap.get (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P1_Replace_Type]^char name = node.getFirstChild (  ) .getchar (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^String name = node.setString (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = node.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = node.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;LabelInfo li = new LabelInfo ( currentDepth ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^LabelInfo li = getLabelInfo ( name ) ;LabelInfo li = new LabelInfo ( currentDepth ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P1_Replace_Type]^char newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( id ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^String newName = getLabelInfo ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^String newName = getLabelInfo ( id ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( li.id ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^LabelNamespace current = 1.peek (  ) ;^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() + 5  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^int currentDepth = null.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^122^123^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^Preconditions.checkState ( !current.renameMap.containsKey ( newName )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^Preconditions .checkState ( referenced )  ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^Preconditions.checkState ( !current.renameMap .size (  )   ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^127^128^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ; current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( nameNode != null ) ;Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name.length (  )  != 0 ) ;Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^current.renameMap.put (  li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^current.renameMap.put ( name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^current.renameMap .get ( id )  ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^if  ( names.size() - 6  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^135^136^^^^117^140^String newName = getNameForId ( currentDepth ) ; compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  ^  name  ^  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  !=  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^compiler.addToDebugLog ( "label renamed: bel re" + name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^compiler.addToDebugLog ( "label renamed: " + name + " =>" + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^compiler.addToDebugLog ( "label renamed: " + name + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^compiler .reportCodeChange (  )  ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^if  ( names.size() + 1  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^int currentDepth = current.renameMap.size (  <<  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size (  )  ;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^int currentDepth = 0.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^String name = node .getLastChild (  )  .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^String name = parent.setString (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^LabelNamespace current = null.peek (  ) ;^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^121^122^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ; int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() + 1  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P8_Replace_Mix]^current.renameMap.put ( newName, li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^if  ( names.size() + 8  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P14_Delete_Statement]^^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  <=  name  <=  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  >>  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^compiler.addToDebugLog ( "dabel renamed: " + name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P3_Replace_Literal]^return false;^139^^^^^117^140^return true;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  LabelNamespace  current  int  currentDepth  id  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^149^^^^^148^159^switch  ( node.getType (  )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^switch  ( node.setString (  )  )  {^149^^^^^148^159^switch  ( node.getType (  )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^149^150^151^^^148^159^switch  ( node.getType (  )  )  { case Token.LABEL: visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^visitLabel (  parent ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^visitLabel ( node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^getLabelInfo ( node ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^156^157^^^^148^159^visitBreakOrContinue ( node ) ; break;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Node nameNode = node.setString (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node newChild = node.getLastChild (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Node nameNode = nameNode.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^if  ( nameNode == null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( node != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( newNameNode != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P6_Replace_Expression]^if  ( name.length (  )  != 0 )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P6_Replace_Expression]^if  ( li != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^if  ( nameNode != this )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^if  ( li == null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^if  ( li != false )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P9_Replace_Statement]^if  ( nameNode != null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( !name.equals ( name )  )  {^176^^^^^165^183^if  ( !name.equals ( newName )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^if  ( !name.equals ( newName )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P15_Unwrap_Block]^nameNode.setString(newName); compiler.reportCodeChange();^176^177^178^179^180^165^183^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P16_Remove_Block]^^176^177^178^179^180^165^183^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^nameNode.setString ( name ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^nameNode.replaceChild ( newName ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^178^179^^^^165^183^nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^compiler .addToDebugLog ( newName )  ;^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^li.referenced = false;^175^^^^^165^183^li.referenced = true;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P1_Replace_Type]^char newName = getNameForId ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^String newName = getLabelInfo ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String newName = getNameForId ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String name = node.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^String name = nameNode.setString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^LabelInfo li = getNameForId ( name ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^LabelInfo li = getNameForId ( newName ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;LabelInfo li = getLabelInfo ( name ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^String name = node.setString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^Preconditions.checkState ( name.length (  )  == 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^Preconditions.checkState ( name.length (  )  != currentDepth ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() - 9  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Preconditions.checkState ( newName.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Preconditions.checkState ( name.equals (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^Preconditions.checkState ( newName.equals (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( nameNode != null ) ;Preconditions.checkState ( name.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;Preconditions.checkState ( name.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() - 7  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^170^171^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ; LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^String newName = getLabelInfo ( id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^169^170^^^^165^183^String name = nameNode.getString (  ) ; Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^Preconditions.checkState ( name.length (  )  < 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() + 3  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Preconditions .checkState ( referenced )  ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() + 2  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^nameNode .getString (  )  ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Node nameNode = parent.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Node nameNode = node.setString (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node newChild = node.getLastChild (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Node nameNode = node .getLastChild (  )  ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^Preconditions .checkState ( referenced )  ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name.length (  )  != 0 ) ;Preconditions.checkState ( nameNode != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;Preconditions.checkState ( nameNode != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^String name = nameNode.setString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^LabelInfo li = getNameForId ( name ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^LabelInfo li = getNameForId ( newName ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;LabelInfo li = getLabelInfo ( name ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( referenced )  {^196^^^^^190^216^if  ( li.referenced )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^if  ( newChild.getType (  )  != Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^if  ( newChild.setString (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.LABEL )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.tryMergeBlock(newChild);^208^209^210^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P16_Remove_Block]^^208^209^210^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;NodeUtil.tryMergeBlock ( newChild ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Node newChild = node.setString (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^Node newChild = parent.setString (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;Node newChild = node.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^205^206^^^^196^212^Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^node.removeChild ( parent ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^node.replaceChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^206^207^^^^196^212^node.removeChild ( newChild ) ; parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, newChild ) ;node.removeChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^NodeUtil.tryMergeBlock ( newChild ) ;node.removeChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( node, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild (  newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^parent.replaceChild ( newChild, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;parent.replaceChild ( node, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^compiler .addToDebugLog ( name )  ;^211^^^^^196^212^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^211^^^^^196^212^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^if  ( !name.equals ( newName )  )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P15_Unwrap_Block]^nameNode.setString(newName); compiler.reportCodeChange();^198^199^200^201^202^190^216^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P16_Remove_Block]^^198^199^200^201^202^190^216^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^nameNode.setString ( name ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^nameNode.replaceChild ( newName ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^nameNode .getString (  )  ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^compiler .addToDebugLog ( name )  ;^201^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^201^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P1_Replace_Type]^char newName = getNameForId ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^String newName = getLabelInfo ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^String newName = getLabelInfo ( id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String newName = getNameForId ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^nameNode.replaceChild ( name ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^200^201^^^^190^216^nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^if  ( newChild.getType (  )  < Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^if  ( newChild.setString (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.LABEL )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.tryMergeBlock(newChild);^208^209^210^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P16_Remove_Block]^^208^209^210^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;NodeUtil.tryMergeBlock ( newChild ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^Node newChild = parent.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^Node newChild = node.setString (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^Node newChild = parent.setString (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;Node newChild = node.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^205^206^^^^190^216^Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^node.replaceChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^node .replaceChild ( parent , newChild )  ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^node .replaceChild ( newChild , newChild )  ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^206^207^^^^190^216^node.removeChild ( newChild ) ; parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, newChild ) ;node.removeChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^NodeUtil.tryMergeBlock ( newChild ) ;node.removeChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( parent, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( node, parent ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild (  newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^parent.replaceChild ( newChild, node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^parent .getLastChild (  )  ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;parent.replaceChild ( node, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^if  ( parent.setString (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^compiler .addToDebugLog ( name )  ;^211^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^211^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^namespaceStack.peek (  ) .renameMap.remove ( newName ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^namespaceStack.peek (  ) .renameMap.get ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^namespaceStack.peek (  ) .renameMap .size (  )  ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^namespaceStack.pop (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.peek (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  AbstractCompiler  compiler  boolean  referenced  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^return names.get ( id  &&  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^return names.get ( id  ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^return names.get ( currentDepth - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P2_Replace_Operator]^return names.get ( id  ==  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P3_Replace_Literal]^return names.get ( id -  ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^return namespaceStackspaceStack.peek (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^return namespaceStack.peek (  ) .renameMap.remove ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P7_Replace_Invocation]^return namespaceStack.pop (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^return name.peek (  ) .renameMap.get ( namespaceStack ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] AbstractCompiler  compiler  boolean  referenced  ArrayList  names  NameGenerator  nameGenerator  String  name  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new LabelInfo ( currentDepth )   ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ProcessLabels (  )  ) ;^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P14_Delete_Statement]^^241^^^^^239^242^NodeTraversal.traverse ( compiler, root, new ProcessLabels (  )  ) ;^[CLASS] RenameLabels ProcessLabels LabelInfo LabelNamespace  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^final Deque<LabelNamespace> namespaceStack ;^89^^^^^84^94^final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList (  ) ;^[CLASS] ProcessLabels  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^final NameGenerator nameGenerator ;^92^93^^^^92^93^final NameGenerator nameGenerator = new NameGenerator ( new HashSet<String> (  ) , "", null ) ;^[CLASS] ProcessLabels  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P8_Replace_Mix]^final ArrayList<String> names ;^97^^^^^92^102^final ArrayList<String> names = new ArrayList<String> (  ) ;^[CLASS] ProcessLabels  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  ArrayList  names  NameGenerator  nameGenerator  Deque  namespaceStack  Map  renameMap  int  currentDepth  id  
[P4_Replace_Constructor]^namespaceStack.push ( namespaceStack.push (  new LabelInfo ( currentDepth )   ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack.pop ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack .pop (  )  ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P14_Delete_Statement]^^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^namespaceStack.peek (  ) .renameMap.remove ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^84^^^^^82^85^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] <init> [RETURN_TYPE] RenameLabels$ProcessLabels()   [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  
[P4_Replace_Constructor]^namespaceStack.push ( namespaceStack.push (  new LabelInfo ( currentDepth )   ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P7_Replace_Invocation]^namespaceStack.pop ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P14_Delete_Statement]^^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P11_Insert_Donor_Statement]^namespaceStack.peek (  ) .renameMap.remove ( name ) ;namespaceStack.push ( new LabelNamespace (  )  ) ;^103^^^^^101^104^namespaceStack.push ( new LabelNamespace (  )  ) ;^[CLASS] ProcessLabels  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P7_Replace_Invocation]^namespaceStack.peek (  ) ;^108^^^^^107^109^namespaceStack.pop (  ) ;^[CLASS] ProcessLabels  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P14_Delete_Statement]^^108^^^^^107^109^namespaceStack.pop (  ) ;^[CLASS] ProcessLabels  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal nodeTraversal [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  
[P2_Replace_Operator]^if  ( node.getType (  )  > Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.this )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P6_Replace_Expression]^if  ( size() + 1 )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P6_Replace_Expression]^if  ( names.size() < currentDepth )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P6_Replace_Expression]^if  (  ( "label renamed: " + name )  + " => " + newName )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P6_Replace_Expression]^if  ( "label renamed: " + name + " => " )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P6_Replace_Expression]^if  ( "label renamed: " + name )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^if  ( node.setString (  )  == Token.LABEL )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P9_Replace_Statement]^if  ( newChild.getType (  )  == Token.BLOCK )  {^119^^^^^117^140^if  ( node.getType (  )  == Token.LABEL )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^if  ( names.size (  )  <= currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^if  ( names.size() + 2  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^if  ( currentDepth.size (  )  < names )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^if  ( names.ArrayList (  )  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P15_Unwrap_Block]^names.add(nameGenerator.generateNextName());^131^132^133^^^117^140^if  ( names.size (  )  < currentDepth )  { names.add ( nameGenerator.generateNextName (  )  ) ; }^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P16_Remove_Block]^^131^132^133^^^117^140^if  ( names.size (  )  < currentDepth )  { names.add ( nameGenerator.generateNextName (  )  ) ; }^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^names.size ( nameGenerator.generateNextName (  )  ) ;^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^names .ArrayList (  )  ;^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^132^^^^^117^140^names.add ( nameGenerator.generateNextName (  )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P4_Replace_Constructor]^LabelInfo li = new LabelNamespace (  )  ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^LabelNamespace current = namespaceStack.pop (  ) ;^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P1_Replace_Type]^long  currentDepth = current.renameMap.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^int currentDepth = current.renameMap.size (  |  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size (  )  + currentDepth;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() - 1  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^int current.renameMapDepth = current.size (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^int currentDepth = current.renameMap.get (  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P1_Replace_Type]^char name = node.getFirstChild (  ) .getchar (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^String name = parent.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^String name = node.setString (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^String name = node .getLastChild (  )  .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P8_Replace_Mix]^String name = parent .getLastChild (  )  .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = node.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = node.getFirstChild (  ) .getString (  ) ;^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;LabelInfo li = new LabelInfo ( currentDepth ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^LabelInfo li = getLabelInfo ( name ) ;LabelInfo li = new LabelInfo ( currentDepth ) ;^126^^^^^117^140^LabelInfo li = new LabelInfo ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P1_Replace_Type]^char newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^String newName = getLabelInfo ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( li.id ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String newName = getNameForId ( currentDepth ) ;^135^^^^^117^140^String newName = getNameForId ( currentDepth ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^121^^^^^117^140^LabelNamespace current = namespaceStack.peek (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() + 1  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^123^^^^^117^140^String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^Preconditions.checkState ( !current.renameMap.containsKey ( newName )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P8_Replace_Mix]^Preconditions.checkState ( !current.renameMap .size (  )   ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( nameNode != null ) ;Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name.length (  )  != 0 ) ;Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^127^^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^127^128^^^^117^140^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ; current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^current.renameMap.put (  li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^current.renameMap.put ( name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^current.renameMap.put ( li, name ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P8_Replace_Mix]^current.renameMap.put ( newName, li ) ;^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^128^^^^^117^140^current.renameMap.put ( name, li ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^if  ( names.size() - 6  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^135^136^^^^117^140^String newName = getNameForId ( currentDepth ) ; compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  &&  name  &&  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  >=  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^compiler.addToDebugLog ( "lababel renamed: " + name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^compiler.addToDebugLog ( "label renamed: " + name + "" + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P5_Replace_Variable]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + name ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P8_Replace_Mix]^compiler.addToDebugLog ( "label renamed: " + newName + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^if  ( names.size() - 3  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^int currentDepth = current.renameMap.size (  <=  )  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size (  )  + ;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() + 2  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^int currentDepth = current.renameMap.size() - 4  + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P8_Replace_Mix]^int currentDepth = current.renameMap .containsKey ( 2 )   + 1;^122^^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P14_Delete_Statement]^^122^123^^^^117^140^int currentDepth = current.renameMap.size (  )  + 1; String name = node.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^if  ( names.size() + 9  < currentDepth )  {^131^^^^^117^140^if  ( names.size (  )  < currentDepth )  {^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  ||  name  ||  " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P2_Replace_Operator]^compiler.addToDebugLog ( "label renamed: "  <=  name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^compiler.addToDebugLog ( "label abel renamed: " + name + " => " + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^compiler.addToDebugLog ( "label renamed: " + name + " => =" + newName ) ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^136^^^^^117^140^compiler.addToDebugLog ( "label renamed: " + name + " => " + newName ) ;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P3_Replace_Literal]^return false;^139^^^^^117^140^return true;^[CLASS] ProcessLabels  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] LabelInfo  li  boolean  NodeTraversal  nodeTraversal  Node  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  LabelNamespace  current  int  currentDepth  
[P7_Replace_Invocation]^switch  ( node.setString (  )  )  {^149^^^^^148^159^switch  ( node.getType (  )  )  {^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P8_Replace_Mix]^switch  ( parent.setString (  )  )  {^149^^^^^148^159^switch  ( node.getType (  )  )  {^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P14_Delete_Statement]^^149^150^151^^^148^159^switch  ( node.getType (  )  )  { case Token.LABEL: visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P5_Replace_Variable]^visitLabel (  parent ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P5_Replace_Variable]^visitLabel ( node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P5_Replace_Variable]^visitLabel ( parent, node ) ;^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P14_Delete_Statement]^^151^^^^^148^159^visitLabel ( node, parent ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P5_Replace_Variable]^visitBreakOrContinue ( parent ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P7_Replace_Invocation]^getLabelInfo ( node ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P8_Replace_Mix]^getLabelInfo ( parent ) ;^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P14_Delete_Statement]^^156^^^^^148^159^visitBreakOrContinue ( node ) ;^[CLASS] ProcessLabels  [METHOD] visit [RETURN_TYPE] void   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  NodeTraversal  nodeTraversal  Node  node  parent  
[P7_Replace_Invocation]^Node nameNode = node.setString (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node newChild = node.getLastChild (  ) ;Node nameNode = node.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Node nameNode = nameNode.getFirstChild (  ) ;^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^166^^^^^165^183^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^if  ( nameNode == null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^if  ( node != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^if  ( newNameNode != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^if  ( name != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P6_Replace_Expression]^if  ( name.length (  )  != 0 )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P6_Replace_Expression]^if  ( li != null )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( nameNode != this )  {^167^^^^^165^183^if  ( nameNode != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^if  ( li == null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( li != true )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P9_Replace_Statement]^if  ( nameNode != null )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( name.equals ( newName )  )  {^176^^^^^165^183^if  ( !name.equals ( newName )  )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P15_Unwrap_Block]^nameNode.setString(newName); compiler.reportCodeChange();^176^177^178^179^180^165^183^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P16_Remove_Block]^^176^177^178^179^180^165^183^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^nameNode.setString ( name ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^nameNode.replaceChild ( newName ) ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^li.referenced = false;^175^^^^^165^183^li.referenced = true;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P1_Replace_Type]^char newName = getNameForId ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( null ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( li.id.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( li ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^String newName = getLabelInfo ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String newName = getNameForId ( li.id ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^nameNode .getString (  )  ;^178^^^^^165^183^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String name = node.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^String name = nameNode.setString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^LabelInfo li = getLabelInfo ( newName ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^LabelInfo li = getNameForId ( name ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;LabelInfo li = getLabelInfo ( name ) ;^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^String name = node.setString (  ) ;^169^^^^^165^183^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^169^170^^^^165^183^String name = nameNode.getString (  ) ; Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^Preconditions.checkState ( name.length (  )  >= 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length (  )  != -5 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() + 6  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Preconditions.checkState ( newName.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^Preconditions.checkState ( name.equals (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( nameNode != null ) ;Preconditions.checkState ( name.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;Preconditions.checkState ( name.length (  )  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() - 8  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^171^^^^^165^183^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^String newName = getNameForId ( 3 ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^compiler .addToDebugLog ( name )  ;^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( li != false )  {^172^^^^^165^183^if  ( li != null )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( !name.equals ( name )  )  {^176^^^^^165^183^if  ( !name.equals ( newName )  )  {^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^compiler .addToDebugLog ( newName )  ;^179^^^^^165^183^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( 0 ) ;^173^^^^^165^183^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^Preconditions.checkState ( name.length (  )  <= 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length (  )  != 7 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() - 7  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P3_Replace_Literal]^Preconditions.checkState ( name.length() - 5  != 0 ) ;^170^^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^170^171^^^^165^183^Preconditions.checkState ( name.length (  )  != 0 ) ; LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitBreakOrContinue [RETURN_TYPE] void   Node node [VARIABLES] LabelInfo  li  boolean  Node  nameNode  node  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Node nameNode = parent.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^Node nameNode = node.setString (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^Node nameNode = parent.setString (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node newChild = node.getLastChild (  ) ;Node nameNode = node.getFirstChild (  ) ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^Node nameNode = node .getLastChild (  )  ;^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^191^^^^^190^216^Node nameNode = node.getFirstChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^Preconditions.checkState ( nameNode == null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( name.length (  )  != 0 ) ;Preconditions.checkState ( nameNode != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !current.renameMap.containsKey ( name )  ) ;Preconditions.checkState ( nameNode != null ) ;^192^^^^^190^216^Preconditions.checkState ( nameNode != null ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^String name = nameNode.setString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String name = node.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^String name = parent.setString (  ) ;^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^193^^^^^190^216^String name = nameNode.getString (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^LabelInfo li = getLabelInfo ( newName ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^LabelInfo li = getNameForId ( name ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^LabelInfo li = new LabelInfo ( currentDepth ) ;LabelInfo li = getLabelInfo ( name ) ;^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^194^^^^^190^216^LabelInfo li = getLabelInfo ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^if  ( newChild.getType (  )  > Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^if  ( newChild.setString (  )  == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^if  ( newChild .getString (  )   == Token.BLOCK )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.LABEL )  {^208^^^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.tryMergeBlock(newChild);^208^209^210^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P16_Remove_Block]^^208^209^210^^^196^212^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;NodeUtil.tryMergeBlock ( newChild ) ;^209^^^^^196^212^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Node newChild = parent.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^Node newChild = node.setString (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;Node newChild = node.getLastChild (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^Node newChild = parent.setString (  ) ;^205^^^^^196^212^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^205^206^^^^196^212^Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^node.removeChild ( parent ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^node.replaceChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^node.replaceChild ( parent ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, newChild ) ;node.removeChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^NodeUtil.tryMergeBlock ( newChild ) ;node.removeChild ( newChild ) ;^206^^^^^196^212^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( newChild, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( node, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild (  newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( newChild, node ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;parent.replaceChild ( node, newChild ) ;^207^^^^^196^212^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^211^^^^^196^212^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( name.equals ( newName )  )  {^198^^^^^190^216^if  ( !name.equals ( newName )  )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P15_Unwrap_Block]^nameNode.setString(newName); compiler.reportCodeChange();^198^199^200^201^202^190^216^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P16_Remove_Block]^^198^199^200^201^202^190^216^if  ( !name.equals ( newName )  )  {  nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^nameNode.setString ( name ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^nameNode.replaceChild ( newName ) ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^200^201^^^^190^216^nameNode.setString ( newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^compiler .addToDebugLog ( newName )  ;^201^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^201^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P1_Replace_Type]^char newName = getNameForId ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( li.id.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( li ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^String newName = getLabelInfo ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^String newName = getNameForId ( currentDepth ) ;String newName = getNameForId ( li.id ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^String newName = getNameForId ( 3 ) ;^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^197^^^^^190^216^String newName = getNameForId ( li.id ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^nameNode .getString (  )  ;^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^200^^^^^190^216^nameNode.setString ( newName ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^if  ( newChild.getType (  )  <= Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^if  ( newChild.setString (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.LABEL )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.tryMergeBlock(newChild);^208^209^210^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P16_Remove_Block]^^208^209^210^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  { NodeUtil.tryMergeBlock ( newChild ) ; }^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^NodeUtil.tryMergeBlock ( parent ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;NodeUtil.tryMergeBlock ( newChild ) ;^209^^^^^190^216^NodeUtil.tryMergeBlock ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^Node newChild = parent.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^Node newChild = node.setString (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^Node nameNode = node.getFirstChild (  ) ;Node newChild = node.getLastChild (  ) ;^205^^^^^190^216^Node newChild = node.getLastChild (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^205^206^^^^190^216^Node newChild = node.getLastChild (  ) ; node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^node.removeChild ( parent ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^node.replaceChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^206^207^^^^190^216^node.removeChild ( newChild ) ; parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, newChild ) ;node.removeChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^NodeUtil.tryMergeBlock ( newChild ) ;node.removeChild ( newChild ) ;^206^^^^^190^216^node.removeChild ( newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( parent, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( node, parent ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild (  newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^parent.replaceChild ( newChild, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^node.removeChild ( newChild ) ;parent.replaceChild ( node, newChild ) ;^207^^^^^190^216^parent.replaceChild ( node, newChild ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^if  ( newChild .getString (  )   == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.BLOCK )  {^208^^^^^190^216^if  ( newChild.getType (  )  == Token.BLOCK )  {^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^compiler .addToDebugLog ( newName )  ;^211^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^211^^^^^190^216^compiler.reportCodeChange (  ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P5_Replace_Variable]^namespaceStack.peek (  ) .renameMap.remove ( newName ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack.peek (  ) .renameMap.get ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack.peek (  ) .renameMap .size (  )  ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack.pop (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P7_Replace_Invocation]^namespaceStack .push ( null )  .renameMap.remove ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P14_Delete_Statement]^^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P11_Insert_Donor_Statement]^return namespaceStack.peek (  ) .renameMap.get ( name ) ;namespaceStack.peek (  ) .renameMap.remove ( name ) ;^215^^^^^190^216^namespaceStack.peek (  ) .renameMap.remove ( name ) ;^[CLASS] ProcessLabels  [METHOD] visitLabel [RETURN_TYPE] void   Node node Node parent [VARIABLES] LabelInfo  li  boolean  Node  nameNode  newChild  node  parent  ArrayList  names  NameGenerator  nameGenerator  String  name  newName  Deque  namespaceStack  
[P2_Replace_Operator]^return names.get ( id  <<  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P3_Replace_Literal]^return names.get ( id  ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P5_Replace_Variable]^return id.get ( names - 1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P8_Replace_Mix]^return names.get ( id  ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P2_Replace_Operator]^return names.get ( id  >=  1 ) ;^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P14_Delete_Statement]^^224^^^^^223^225^return names.get ( id - 1 ) ;^[CLASS] ProcessLabels  [METHOD] getNameForId [RETURN_TYPE] String   int id [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  boolean  Deque  namespaceStack  int  id  
[P5_Replace_Variable]^return namespaceStackspaceStack.peek (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P5_Replace_Variable]^return name.peek (  ) .renameMap.get ( namespaceStack ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P7_Replace_Invocation]^return namespaceStack.peek (  ) .renameMap.remove ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P7_Replace_Invocation]^return namespaceStack.peek (  ) .renameMap .ArrayList (  )  ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P7_Replace_Invocation]^return namespaceStack.pop (  ) .renameMap.get ( name ) ;^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P14_Delete_Statement]^^232^^^^^231^233^return namespaceStack.peek (  ) .renameMap.get ( name ) ;^[CLASS] ProcessLabels  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P3_Replace_Literal]^boolean referenced = true;^246^^^^^241^251^boolean referenced = false;^[CLASS] LabelInfo  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P1_Replace_Type]^final  short  id;^247^^^^^242^252^final int id;^[CLASS] LabelInfo  [METHOD] getLabelInfo [RETURN_TYPE] RenameLabels$LabelInfo   String name [VARIABLES] ArrayList  names  NameGenerator  nameGenerator  String  name  boolean  Deque  namespaceStack  
[P8_Replace_Mix]^this.id =  null;^250^^^^^249^251^this.id = id;^[CLASS] LabelInfo  [METHOD] <init> [RETURN_TYPE] RenameLabels$LabelInfo(int)   int id [VARIABLES] int  id  boolean  referenced  
