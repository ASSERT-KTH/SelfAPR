[P8_Replace_Mix]^private  Deque<GraphColoring<Var, Void>> colorings;^65^^^^^60^70^private final Deque<GraphColoring<Var, Void>> colorings;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P8_Replace_Mix]^private  boolean usePseudoNames;^66^^^^^61^71^private final boolean usePseudoNames;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P8_Replace_Mix]^private static  Comparator<Var> coloringTieBreaker = new Comparator<Var> (  )  {^68^69^^^^68^73^private static final Comparator<Var> coloringTieBreaker = new Comparator<Var> (  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P3_Replace_Literal]^boolean defFound = true;^390^^^^^385^395^boolean defFound = false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P8_Replace_Mix]^boolean defFound ;^390^^^^^385^395^boolean defFound = false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P3_Replace_Literal]^boolean crossed = true;^391^^^^^386^396^boolean crossed = false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P8_Replace_Mix]^private  Var use;^393^^^^^388^398^private final Var use;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^80^^^^^79^83^this.compiler = compiler;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean usePseudoNames [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^colorings ;^81^^^^^79^83^colorings = Lists.newLinkedList (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean usePseudoNames [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^81^82^^^^79^83^colorings = Lists.newLinkedList (  ) ; this.usePseudoNames = usePseudoNames;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean usePseudoNames [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^this.usePseudoNames = defFound;^82^^^^^79^83^this.usePseudoNames = usePseudoNames;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean usePseudoNames [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^this.callbacks =  null;^296^^^^^294^297^this.callbacks = callbacks;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] ArrayList)   CombinedLiveRangeChecker> callbacks [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callback1 = callback1;this.callbacks = callbacks;^296^^^^^294^297^this.callbacks = callbacks;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] ArrayList)   CombinedLiveRangeChecker> callbacks [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callback2 = callback2;this.callbacks = callbacks;^296^^^^^294^297^this.callbacks = callbacks;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] ArrayList)   CombinedLiveRangeChecker> callbacks [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^this.callback1 = callback2;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callbacks = callbacks;this.callback1 = callback1;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callback2 = callback2;this.callback1 = callback1;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^this.callback2 =  callback1;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callbacks = callbacks;this.callback2 = callback2;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.callback1 = callback1;this.callback2 = callback2;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^this.def =  use;^396^^^^^395^398^this.def = def;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.use = use;this.def = def;^396^^^^^395^398^this.def = def;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^this.use = def;^397^^^^^395^398^this.use = use;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^this.def = def;this.use = use;^397^^^^^395^398^this.use = use;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return v1.index  >  v2.index;^71^^^^^70^72^return v1.index - v2.index;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] compare [RETURN_TYPE] int   Var v1 Var v2 [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, callbacks ) ;NodeTraversal.traverse ( compiler, root, this ) ;^87^^^^^86^88^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Var  def  use  v1  v2  Node  externs  root  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^96^^^^^91^116^Scope scope = t.getScope (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^96^^^^^91^116^Scope scope = t.getScope (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P9_Replace_Statement]^if  ( t.inGlobalScope (  )  )  {^97^^^^^91^116^if  ( scope.isGlobal (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P15_Unwrap_Block]^return ;^97^98^99^^^91^116^if  ( scope.isGlobal (  )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P16_Remove_Block]^^97^98^99^^^91^116^if  ( scope.isGlobal (  )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P13_Insert_Block]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {     return ; }^97^^^^^91^116^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     return ; }^97^^^^^91^116^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P13_Insert_Block]^if  ( vNode == null )  {     return ; }^97^^^^^91^116^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^if  ( scope .getVars (  )   )  {^97^^^^^91^116^if  ( scope.isGlobal (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^ControlFlowGraph<Node> cfg = t .getScope (  )  ;^100^^^^^91^116^ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^100^^^^^91^116^ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P4_Replace_Constructor]^new LiveVariablesAnalysis (  scope, compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P4_Replace_Constructor]^new LiveVariablesAnalysis ( cfg,  compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new LiveVariablesAnalysis ( cfg, scope ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^103^^^^^91^116^new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P4_Replace_Constructor]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis (  scope, compiler ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P4_Replace_Constructor]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg,  compiler ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^102^103^^^^91^116^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^liveness .getEscapedLocals (  )  ;^104^^^^^91^116^liveness.analyze (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^104^^^^^91^116^liveness.analyze (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph (  cfg, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t,  liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( cfg, t, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, liveness, cfg.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( liveness, cfg, t.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P7_Replace_Invocation]^UndiGraph<Var, Void> interferenceGraph = visit ( t, cfg, liveness.getEscapedLocals (  )  ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P7_Replace_Invocation]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness .analyze (  )   ) ;^106^107^108^^^91^116^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeVariableNamesInterferenceGraph (  cfg, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeVariableNamesInterferenceGraph ( t,  liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeVariableNamesInterferenceGraph ( t, cfg.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeVariableNamesInterferenceGraph ( cfg, t, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeVariableNamesInterferenceGraph ( liveness, cfg, t.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P7_Replace_Invocation]^visit ( t, cfg, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^t, cfg, liveness.getEscapedLocals (  )  ) ;computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^107^108^^^^91^116^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P7_Replace_Invocation]^t, cfg, liveness .analyze (  )   ) ;^108^^^^^91^116^t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^108^^^^^91^116^t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;t, cfg, liveness.getEscapedLocals (  )  ) ;^108^^^^^91^116^t, cfg, liveness.getEscapedLocals (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new GreedyGraphColoring<Var, Void> (  coloringTieBreaker ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new GreedyGraphColoring<Var, Void> ( interferenceGraph ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^111^112^^^^91^116^new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( 3, coloringTieBreaker ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> (  coloringTieBreaker ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( coloringTieBreaker, interferenceGraph ) ;^110^111^112^^^91^116^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^114^115^^^^91^116^coloring.color (  ) ; colorings.push ( coloring ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^colorings.pop (  ) ;coloring.color (  ) ;^114^^^^^91^116^coloring.color (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^colorings.push ( coloring ) ;coloring.color (  ) ;^114^^^^^91^116^coloring.color (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^colorings .pop (  )  ;^115^^^^^91^116^colorings.push ( coloring ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^115^^^^^91^116^colorings.push ( coloring ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^colorings.pop (  ) ;colorings.push ( coloring ) ;^115^^^^^91^116^colorings.push ( coloring ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P11_Insert_Donor_Statement]^coloring.color (  ) ;colorings.push ( coloring ) ;^115^^^^^91^116^colorings.push ( coloring ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] UndiGraph  interferenceGraph  NodeTraversal  t  GraphColoring  coloring  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  LiveVariablesAnalysis  liveness  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Scope  scope  ControlFlowGraph  cfg  
[P9_Replace_Statement]^if  ( scope.isGlobal (  )  )  {^120^^^^^119^124^if  ( t.inGlobalScope (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^return ;^120^121^122^^^119^124^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^120^121^122^^^119^124^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( scope.isGlobal (  )  )  {     return ; }^120^^^^^119^124^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {     return ; }^120^^^^^119^124^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( allMergedNames.size (  )  )  == 1 )  {     return ; }^120^^^^^119^124^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( vNode == null )  {     return ; }^120^^^^^119^124^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^colorings.peek (  ) ;^123^^^^^119^124^colorings.pop (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^123^^^^^119^124^colorings.pop (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^coloring.color (  ) ;colorings.pop (  ) ;^123^^^^^119^124^colorings.pop (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^colorings.push ( coloring ) ;colorings.pop (  ) ;^123^^^^^119^124^colorings.pop (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  NodeTraversal  t  Var  def  use  v1  v2  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( colorings.isEmpty (  )  && !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( parent )  || NodeUtil.isFunction ( n )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( parent.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( colorings )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( colorings.isEmpty (  )  ) {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  (  !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( colorings.isEmpty( || isName(n))) )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.pop (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.isEmpty (  )  || !NodeUtil.isVar ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isForIn ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( parent )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^return ;^128^129^^131^132^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^128^129^^131^132^113^143^if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( FOR )  )  {     assign = newExpr ( assign ) ; }^128^^^^^113^143^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( LP )  )  {     return true; }else     if  ( isVar ( parent )  )  {         return n.hasChildren (  ) ;     }^128^^^^^113^143^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^128^^^^^113^143^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^128^^^^^113^143^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^NodeUtil.isFunction ( n )  )  {^129^^^^^114^144^NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^NodeUtil.isForIn ( parent )  )  {^129^^^^^114^144^NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^NodeUtil .isForIn ( n )   )  {^129^^^^^114^144^NodeUtil.isFunction ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^129^130^131^^^114^144^NodeUtil.isFunction ( parent )  )  {  return;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^129^^^^^114^144^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^129^^^^^114^144^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .isDeclared ( n.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var var = t .inGlobalScope (  )  .getVar ( n.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var var = t.getScope (  ) .getVar ( n.setString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^Var var = t.getScope (  ) .getVar ( parent.setString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getVars (  )  ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^Var var = t.getScope (  ) .isDeclared ( parent.getString (  )  ) ;^133^^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^133^134^^^^118^148^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ; GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^GraphNode<Var, ?> vNode = var.peek (  ) .getGraph (  ) .getNode ( colorings ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .equals ( var ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  )  .getType (  )  ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getVar (  ) .getNode ( var ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^GraphNode<Var, ?> vNode = colorings.pop (  ) .getGraph (  ) .getNode ( var ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( v2 ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( v1 ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^GraphNode<Var, ?> vNode = 1.peek (  ) .getGraph (  ) .getNode ( var ) ;^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^134^^^^^119^149^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( vNode != null )  {^135^^^^^120^150^if  ( vNode == null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( vNode == this )  {^135^^^^^120^150^if  ( vNode == null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^return ;^135^136^137^138^^120^150^if  ( vNode == null )  {  return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^135^136^137^138^^120^150^if  ( vNode == null )  {  return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( scope.isGlobal (  )  )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( v2 ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var coalescedVar = var.peek (  ) .getPartitionSuperNode ( colorings ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var coalescedVar = colorings.peek (  ) .getNode ( var ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var coalescedVar = colorings.peek (  )  .getNode ( use )  ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var coalescedVar = colorings.pop (  ) .getPartitionSuperNode ( var ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  { allMergedNames.add ( iVar.name ) ;Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^139^^^^^124^154^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^while  ( t.getScope (  ) .isDeclared ( pseudoName, false )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^while  ( t.getScope (  ) .isDeclared ( pseudoNamerue )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^while  ( t.getScope (  ) .isDeclared (  true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^while  ( pseudoName.getScope (  ) .isDeclared ( t, true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^while  ( t .inGlobalScope (  )  .isDeclared ( pseudoName, true )  )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^pseudoName += "";^179^^^^^164^194^pseudoName += "$";^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^pseudoName +;^179^^^^^164^194^pseudoName += "$";^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null )  {^141^^^^^126^156^if  ( !usePseudoNames )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( allMergedNames.size() == 1 )  {^141^^^^^126^156^if  ( !usePseudoNames )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( equals(coalescedVar)) && isVar(parent) )  {^141^^^^^126^156^if  ( !usePseudoNames )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( usePseudoNames )  {^141^^^^^126^156^if  ( !usePseudoNames )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^if (vNode.getValue().equals(coalescedVar)) {    return ;}; n.setString(coalescedVar.name); compiler.reportCodeChange(); if (com.google.javascript.jscomp.NodeUtil.isVar(parent)) {    removeVarDeclaration(n);};^141^142^^144^145^126^156^if  ( !usePseudoNames )  { if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^141^142^^144^145^126^156^if  ( !usePseudoNames )  { if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^while  ( t.getScope (  )  .isLive ( def )   )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^pseudoName + =  pseudoName +;^179^^^^^164^194^pseudoName += "$";^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null || coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null ) {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  (  coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .equals ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  )  .getType (  )   != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getVar (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.pop (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar .equals ( coalescedVar )   )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  )  .getNode ( use )   )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  (  coalescedVar.equals ( colorings.peek (  )  .getNode ( v2 )   )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^allMergedNames.add(iVar.name);^165^166^167^168^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  { allMergedNames.add ( iVar.name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^165^166^167^168^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  { allMergedNames.add ( iVar.name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^167^^^^^165^168^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;allMergedNames.add ( iVar.name ) ;^167^^^^^165^168^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( allMergedNames.size (  )  != 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size (  )  == 3 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size() + 3  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( allMergedNames.add (  )  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( allMergedNames.add (  )  == 0  )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^return ;^172^173^174^^^157^187^if  ( allMergedNames.size (  )  == 1 )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^172^173^174^^^157^187^if  ( allMergedNames.size (  )  == 1 )  { return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     return ; }^172^^^^^157^187^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  || NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( !vNode.getValue (  ) .equals ( v2 )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( !vNode.getValue (  ) .equals ( parent )  && NodeUtil.isVar ( coalescedVar )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  ) {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P6_Replace_Expression]^if  (  NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( !vNode.getValue (  ) .isDeclared ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isName ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( !vNode.getValue (  ) .equals ( var )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^removeVarDeclaration(n);^185^186^187^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^185^186^187^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^185^^^^^170^200^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^185^^^^^170^200^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^removeVarDeclaration ( parent ) ;^186^^^^^171^201^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^enterScope ( n ) ;^186^^^^^171^201^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^186^^^^^171^201^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^for  ( Iterator<Var> i = t.getScope (  ) .join (  ) ; i.hasNext (  ) ; )  {^160^^^^^145^175^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^for  ( Iterator<Var> i = t.getScope (  )  .getVar (  )  ; i.hasNext (  ) ; )  {^160^^^^^145^175^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^for  ( Iterator<Var> i = t .inGlobalScope (  )  .getVars (  ) ; i.hasNext (  ) ; )  {^160^^^^^145^175^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != this ) {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^allMergedNames .contains ( v2 )  ;^167^^^^^165^168^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var 4Var = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Var iVar = i .hasNext (  )  ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^Var v2 = i2.next (  ) ;Var iVar = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^Var v = i.next (  ) ;Var iVar = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^Var v1 = i1.next (  ) ;Var iVar = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( var )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( iVar.peek (  ) .getGraph (  ) .getNode ( colorings )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^coalescedVar.equals ( iVar.peek (  ) .getPartitionSuperNode ( colorings )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^coalescedVar .equals ( use )   )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^coalescedVar.equals ( colorings.peek (  ) .getNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^coalescedVar.equals ( colorings.peek (  )  .getNode ( v2 )   )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^coalescedVar.equals ( colorings.pop (  ) .getPartitionSuperNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( var )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^166^167^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  { allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^coalescedVar.equals ( null.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( v1 )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^167^^^^^152^182^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;allMergedNames.add ( iVar.name ) ;^167^^^^^152^182^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^pseudoName = Joiner.on ( "" ) .join ( allMergedNames ) ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^pseudoName = Joiner.on ( "_" ) .isDeclared ( allMergedNames ) ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^pseudoName =  Joiner.on ( "_" ) .join ( null ) ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P1_Replace_Type]^char pseudoName = null;^158^^^^^143^173^String pseudoName = null;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^Var 2Var = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^159^^^^^144^174^Set<String> allMergedNames = Sets.newTreeSet (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( colorings.peek (  ) .getGraph (  ) .equals ( var )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( v2 )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^allMergedNames .contains ( iVar )  ;^167^^^^^152^182^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size() - 2  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( allMergedNames .contains ( iVar )   == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^pseudoName = Joiner.on ( "_" )  .isLive ( def )  ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^while  ( t.getScope (  )  .isLive ( iVar )   )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^178^179^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  { pseudoName += "$";^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^n.replaceChild ( pseudoName ) ;^182^^^^^167^197^n.setString ( pseudoName ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^n .setString (  )  ;^182^^^^^167^197^n.setString ( pseudoName ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^182^183^^^^167^197^n.setString ( pseudoName ) ; compiler.reportCodeChange (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^n.setString ( coalescedVar.name ) ;n.setString ( pseudoName ) ;^182^^^^^167^197^n.setString ( pseudoName ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^183^^^^^168^198^compiler.reportCodeChange (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( !vNode.getValue (  ) .isDeclared ( v2 )  && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {     return ; }^185^^^^^170^200^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( n )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( vNode.getValue (  ) .equals ( var )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( coalescedVar.getValue (  ) .equals ( vNode )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( vNode.getValue (  ) .isDeclared ( coalescedVar )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( vNode.getValue (  ) .equals ( v2 )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^return ;^142^143^144^145^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {  return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^142^143^144^145^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {  return; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( scope.isGlobal (  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( vNode == null )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( parent )  )  {^151^^^^^136^166^if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P9_Replace_Statement]^if  ( NodeUtil.isForIn ( parent )  )  {^151^^^^^136^166^if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P15_Unwrap_Block]^removeVarDeclaration(n);^151^152^153^^^136^166^if  ( NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P16_Remove_Block]^^151^152^153^^^136^166^if  ( NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^151^^^^^136^166^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  (  ( ! ( vNode.getValue (  ) .equals ( coalescedVar )  )  )  &&  ( isVar ( parent )  )  )  {     removeVarDeclaration ( n ) ; }^151^^^^^136^166^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( ! ( isFunction ( v.getParentNode (  )  )  )  )  {     interferenceGraph.createNode ( v ) ; }^151^^^^^136^166^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^removeVarDeclaration ( parent ) ;^152^^^^^137^167^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^enterScope ( n ) ;^152^^^^^137^167^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^152^^^^^137^167^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( vNode.getValue (  ) .equals ( v1 )  )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {     return ; }^142^^^^^127^157^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^n.replaceChild ( coalescedVar.name ) ;^148^^^^^133^163^n.setString ( coalescedVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^148^149^^^^133^163^n.setString ( coalescedVar.name ) ; compiler.reportCodeChange (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P11_Insert_Donor_Statement]^n.setString ( pseudoName ) ;n.setString ( coalescedVar.name ) ;^148^^^^^133^163^n.setString ( coalescedVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P14_Delete_Statement]^^149^^^^^134^164^compiler.reportCodeChange (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( n )  )  {^151^^^^^136^166^if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( NodeUtil .isName ( n )   )  {^151^^^^^136^166^if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^151^^^^^136^166^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( vNode.getValue (  )  .equals ( use )   )  {^142^^^^^127^157^if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^enterScope ( parent ) ;^152^^^^^137^167^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar .equals ( var )   )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != false && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^allMergedNames .contains ( v1 )  ;^167^^^^^165^168^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P2_Replace_Operator]^if  ( allMergedNames.size (  )  < 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size (  )  == 4 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size() + 4  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( allMergedNames .contains ( use )   == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( allMergedNames.size (  )  == 0  )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( !vNode.getValue (  )  .equals ( def )   && NodeUtil.isVar ( parent )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i .next (  )  ; )  {^160^^^^^145^175^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  )  .getNode ( coalescedVar )   )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^Var nullVar = i.next (  ) ;^161^^^^^146^176^Var iVar = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( v2 )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( 4.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^coalescedVar.equals ( 3.pop (  ) .getPartitionSuperNode ( iVar )  )  )  {^166^^^^^151^181^coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( colorings.peek (  ) .getVar (  ) .getNode ( var )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^150^180^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^allMergedNames .contains ( v1 )  ;^167^^^^^152^182^allMergedNames.add ( iVar.name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P3_Replace_Literal]^if  ( allMergedNames.size() - 5  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P5_Replace_Variable]^if  ( null.size (  )  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^if  ( allMergedNames .contains ( def )   == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( 1.add (  )  == 1 )  {^172^^^^^157^187^if  ( allMergedNames.size (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^pseudoName = Joiner.on ( "_" )  .isLive ( use )  ;^176^^^^^161^191^pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^while  ( t.getScope (  )  .isLive ( v2 )   )  {^178^^^^^163^193^while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isName ( n )  )  {^185^^^^^170^200^if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P8_Replace_Mix]^enterScope ( parent ) ;^186^^^^^171^201^removeVarDeclaration ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  allMergedNames  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v1  v2  var  Node  n  parent  ArrayList  callbacks  LiveRangeChecker  callback1  callback2  GraphNode  vNode  String  pseudoName  Deque  colorings  Comparator  coloringTieBreaker  AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  Iterator  i  
[P7_Replace_Invocation]^Scope scope = t .inGlobalScope (  )  ;^195^^^^^180^210^Scope scope = t.getScope (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^195^^^^^180^210^Scope scope = t.getScope (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^195^^^^^180^210^Scope scope = t.getScope (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( !escaped .add ( this )   )  {^200^^^^^185^215^if  ( !escaped.contains ( v )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( ! ( isFunction ( v.getParentNode (  )  )  )  )  {     interferenceGraph.createNode ( v ) ; }^200^^^^^185^215^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( !NodeUtil.isFunction ( v1.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( !NodeUtil.isFunction ( v .getName (  )   )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P15_Unwrap_Block]^interferenceGraph.createNode(v);^208^209^210^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  { interferenceGraph.createNode ( v ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P16_Remove_Block]^^208^209^210^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  { interferenceGraph.createNode ( v ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^208^^^^^193^223^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( ! ( escaped.contains ( v )  )  )  {     if  ( ! ( isFunction ( v.getParentNode (  )  )  )  )  {         interferenceGraph.createNode ( v ) ;     } }^208^^^^^193^223^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^208^^^^^193^223^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.createNode ( var ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.createNode ( v2 ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( !NodeUtil.isFunction ( var.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( !NodeUtil.isFunction ( v2 .getName (  )   )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( ! ( isFunction ( v.getParentNode (  )  )  )  )  {     interferenceGraph.createNode ( v ) ; }^208^^^^^193^223^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .hasNode ( v1 )  ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( !NodeUtil.isFunction ( v2.getParentNode (  )  )  )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.createNode ( v1 ) ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .hasNode ( def )  ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( Iterator<Var> i = scope .getVar (  )  ; i.hasNext (  ) ; )  {^198^^^^^183^213^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( Iterator<Var> i = scope.getVars (  ) ; i .next (  )  ; )  {^198^^^^^183^213^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^for  ( Iterator<Var> null = scope.getVars (  ) ; i.hasNext (  ) ; )  {^198^^^^^183^213^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( !escaped.contains ( v1 )  )  {^200^^^^^185^215^if  ( !escaped.contains ( v )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( !escaped.contains ( var )  )  {^200^^^^^185^215^if  ( !escaped.contains ( v )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .hasNode ( use )  ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( !NodeUtil .isForIn ( null )   )  {^208^^^^^193^223^if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^Var v = i .hasNext (  )  ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v2 = i2.next (  ) ;Var v = i.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v1 = callback1.getDef (  ) ;Var v = i.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v1 = i1.next (  ) ;Var v = i.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var iVar = i.next (  ) ;Var v = i.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v2 = callback2.getDef (  ) ;Var v = i.next (  ) ;^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^199^^^^^184^214^Var v = i.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( !escaped.contains ( v2 )  )  {^200^^^^^185^215^if  ( !escaped.contains ( v )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .hasNode ( v )  ;^209^^^^^194^224^interferenceGraph.createNode ( v ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( cfgNode.isImplicitReturn ( cfg )  )  {^218^^^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( cfg .getDirectedGraphNodes (  )   )  {^218^^^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P15_Unwrap_Block]^continue;^218^219^220^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  { continue; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P16_Remove_Block]^^218^219^220^^^203^233^if  ( cfg.isImplicitReturn ( cfgNode )  )  { continue; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1 == v2 && !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1 != v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( var == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v1 == v || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v2 == v1 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( v1 == v2 ) {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  (  !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( (v1 == v2 || !(interferenceGraph.hasNode(v1))) )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( v1 == var || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P15_Unwrap_Block]^continue;^232^233^^^236^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  { continue; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P16_Remove_Block]^^232^233^^^236^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  { continue; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP || v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1.getParentNode (  ) .getType (  )  >= Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1.getParentNode (  ) .getType (  )  != Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( var.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v1.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v2.getParentNode (  ) .getType (  )  == Token.LP && v1.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP ) {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  (  v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( v1.getParentNode (  ) .getType (  )  == LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( v2.getParentNode (  ) .getType (  )  == LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( isLive(v1) && isLive(v2) || v1OutLive && v2OutLive )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( isLive(v1 && isLive(v2)) )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^if  ( (v1OutLive && v2OutLive) )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1.getParentNode (  ) .join (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1.getParentNode (  )  .getNode ( v )   == Token.LP && v2.getParentNode (  )^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1 .getName (  )  .getType (  )  == Token.LP && v2^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  && ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  || state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( var )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( usePseudoNames && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1OutLive )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1 && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2OutLive )  )  || ( v1OutLive && v2 )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v2OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  ) {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^} else if  (  ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^} else if  ( isLive(v1 && isLive(v2)) )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^} else {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^} else if  (  ( state.getIn (  ) .isDeclared ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^} else if  (  ( state .getOut (  )  .isLive ( v1 )  && state^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^}  if  (  ( v1OutLive && v1OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  (  (  ( v1.getParentNode (  ) .getType (  )  )  ==  ( LP )  )  &&  (  ( v2.getParentNode (  ) .getType (  )  )  ==  ( LP )  )  )  {     interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; }else     if  (  (  ( state.getIn (  ) .isLive ( v1 )  )  &&  ( state.getIn (  ) .isLive ( v2 )  )  )  ||  ( v1OutLive && v2OutLive )  )  {         interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;     }else {         LiveRangeChecker checker1 = new LiveRangeChecker ( v1,  ( v2OutLive ? null : v2 )  ) ;         LiveRangeChecker checker2 = new LiveRangeChecker ( v2,  ( v1OutLive ? null : v1 )  ) ;         rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;     }^245^^^^^230^260^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2,  ( v1OutLive ? null : v1 )  )  ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1 ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^new LiveRangeChecker ( v2, v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1,  ( v2OutLive ? null : v2 )  )  ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2 ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( rangesToCheck.add (  new CombinedCfgNodeLiveRangeChecker ( rangesToCheck )   ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( new CombinedLiveRangeChecker (  checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( callback2, checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, callback2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2,  ( v1OutLive ? null : v1 )  )  ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1 ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker1  =  v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker1  =  null ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( shouldVisit ( n )  )  {     for  ( CombinedLiveRangeChecker callback : callbacks )  {         callback.visit ( t, n, parent ) ;     } }^249^^^^^245^254^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1,  ( v2OutLive ? null : v2 )  )  ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2 ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker2  =  v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker2  =  null ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^interferenceGraph.createNode ( v ) ;interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2,  ( v1OutLive ? null : v1 )  )  ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1 ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v1,  ( v2OutLive ? null : v2 )  )  ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2 ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( rangesToCheck.add (  new CombinedCfgNodeLiveRangeChecker ( rangesToCheck )   ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( new CombinedLiveRangeChecker (  checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( callback2, checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, callback2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2,  ( v1OutLive ? null : v1 )  )  ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker (  v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1 ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2 ? null : v2OutLive ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker1  =  v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker1  =  null ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( shouldVisit ( n )  )  {     for  ( CombinedLiveRangeChecker callback : callbacks )  {         callback.visit ( t, n, parent ) ;     } }^249^^^^^234^264^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1,  ( v2OutLive ? null : v2 )  )  ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker (  v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2 ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v2OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker2  =  v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P6_Replace_Expression]^LiveRangeChecker checker2  =  null ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, varOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v2 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( v1.getIn (  ) .isLive ( state )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^} else if  (  ( state.getIn (  ) .isLive ( var )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( 1.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( v2.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( state )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^} else if  (  ( state.getIn (  ) .isDeclared ( v1 )  && state.getIn (  ) .isLive ( v )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^interferenceGraph.createNode ( v ) ;interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^interferenceGraph.createNode ( v ) ;interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v2OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( v1OutLive.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( state && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v2 )  && state.getIn (  ) .isLive ( v1 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^} else if  (  ( state.getIn (  )  .isDeclared ( 0 , v2OutLive )   && state.getIn (  )^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v2OutLive ? null : v1 ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker1 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^rangesToCheck .contains ( v )  ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^for  ( Iterator<Var> null = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^227^^^^^212^242^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^for  ( Iterator<Var> 3 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^227^^^^^212^242^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v2.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( var.getParentNode (  ) .getType (  )  == Token.LP ) {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v1 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v1OutLive )  )  || ( v2 && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^}  if  (  ( state.getIn (  ) .isLive ( var )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^245^254^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v1 ? null : v1OutLive ) ;^252^^^^^245^254^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v, v1OutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker2 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( coalescedVar )  ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && usePseudoNames )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( v2OutLive.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && state )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^251^252^^^^245^254^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker2, checker2 )  ) ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^rangesToCheck .contains ( v2 )  ;^253^^^^^245^254^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( Iterator<Var> i2 = scope .getVar (  )  ; i2.hasNext (  ) ; )  {^229^^^^^214^244^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2 .next (  )  ; )  {^229^^^^^214^244^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1 <= v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1 == v2 || !interferenceGraph .createNode ( def )   || !interferenceGraph^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1.getParentNode (  ) .getType (  )  <= Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && var.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1.getParentNode (  )  .getNode ( var )   == Token.LP && v2.getParentNode (  )^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^}  if  (  ( state.getIn (  ) .isDeclared ( v1 )  && state.getIn (  ) .isLive ( v )  )  ) {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1, vOutLive ? null : v2 ) ;^250^^^^^235^265^new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v1 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( v )  ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^rangesToCheck .contains ( def )  ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( var )  ;^244^^^^^242^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v1 ) ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .createNode ( iVar )  ;^247^^^^^245^254^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, vOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v1OutLive, v2 ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^Var v2 = 4.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v = i.next (  ) ;Var v2 = i2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v1 = callback1.getDef (  ) ;Var v2 = i2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v1 = i1.next (  ) ;Var v2 = i2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var iVar = i.next (  ) ;Var v2 = i2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v2 = callback2.getDef (  ) ;Var v2 = i2.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^boolean stateOutLive = v1.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^boolean v1OutLive = state.getOut (  ) .isDeclared ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean vOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^boolean varOutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^boolean stateOutLive = v2.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^boolean v2OutLive = state.getOut (  ) .isDeclared ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^boolean v2OutLive = state .getIn (  )  .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean varOutLive = state .getIn (  )  .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLiveOutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^LiveRangeChecker checker1 = new LiveRangeChecker ( v, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, usePseudoNames ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^!interferenceGraph.hasNode ( var )  )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^boolean varOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^boolean v1OutLive = state .getIn (  )  .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean vOutLive = state.getOut (  ) .isDeclared ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean v2OutLive = 0 .getIn (  )  .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1.getParentNode (  )  .getNode ( use )   == Token.LP && v2.getParentNode (  )^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^v2.getParentNode (  ) .join (  )  == Token.LP )  {^243^^^^^228^258^v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^243^244^^^^228^258^v2.getParentNode (  ) .getType (  )  == Token.LP )  { interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^v2 .getName (  )  .getType (  )  == Token.LP )  {^243^^^^^228^258^v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v, null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( coalescedVar )  ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^interferenceGraph.createNode ( v ) ;interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^} else if  (  ( state.getIn (  ) .isDeclared ( v )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^Var v1 = i1 .hasNext (  )  ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v2 = i2.next (  ) ;Var v1 = i1.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v = i.next (  ) ;Var v1 = i1.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v1 = callback1.getDef (  ) ;Var v1 = i1.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var iVar = i.next (  ) ;Var v1 = i1.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Var v2 = callback2.getDef (  ) ;Var v1 = i1.next (  ) ;^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean v2OutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean v1OutLive = state.getOut (  ) .isDeclared ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2OutLive, v1 ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker2 = new LiveRangeChecker ( v1, v1OutLive ? null : v1 ) ;^251^252^^^^236^266^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^228^^^^^213^243^Var v1 = i1.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^Var v2 = 0.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^Var v2 = i2 .hasNext (  )  ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v2 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^if  ( v == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^!interferenceGraph .createNode ( var )   )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean vOutLive = state.getOut (  ) .isDeclared ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean vOutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^v2.getParentNode (  )  .getNode ( v1 )   == Token.LP )  {^243^^^^^228^258^v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .createNode ( def )  ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( var )  ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .createNode ( v1 )  ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^for  ( Iterator<Var> null = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^229^^^^^214^244^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^if  ( v1 >= v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^}  if  (  ( state.getIn (  ) .isLive ( var )  && state.getIn (  ) .isLive ( v2 )  )  ) {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^new LiveRangeChecker ( v2, v1OutLiveOutLive ? null : v1 ) ;^252^^^^^237^267^new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( 3.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker1 )  ) ;^253^^^^^238^268^rangesToCheck.add ( new CombinedLiveRangeChecker ( checker1, checker2 )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( state.getIn (  ) .isLive ( v2OutLive )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v1 )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, usePseudoNames ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^LiveRangeChecker checker1 = new LiveRangeChecker ( var, v2OutLive ? null : v2 ) ;^249^250^^^^245^254^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^LiveRangeChecker checker1 = new LiveRangeChecker ( v2, v2OutLive ? null : v2 ) ;^249^250^^^^234^264^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^!interferenceGraph .createNode ( v2 )   )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean v1OutLive = 0.getOut (  ) .isDeclared ( v1 ) ;^239^^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^boolean v1OutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^225^255^boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1.getParentNode (  )  .getNode ( iVar )   == Token.LP && v2.getParentNode (  )^242^243^^^^227^257^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^interferenceGraph .createNode ( var )  ;^244^^^^^229^259^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^} else if  (  ( this.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^245^246^^^^230^260^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v2 ) ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P1_Replace_Type]^new  LinkedList <CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^224^225^^^^209^239^new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^new ArrayList<CombinedLiveRangeChecker> ( varsInScope / varsInScope ) ;^224^225^^^^209^239^new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^FlowState<LiveVariableLattice> state = cfgNode .getValue (  )  ;^217^^^^^202^232^FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P1_Replace_Type]^long  varsInScope = scope.getVarCount (  ) ;^222^^^^^207^237^int varsInScope = scope.getVarCount (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^int varsInScope = scope .getVars (  )  ;^222^^^^^207^237^int varsInScope = scope.getVarCount (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P11_Insert_Donor_Statement]^Node var = name.getParent (  ) ;int varsInScope = scope.getVarCount (  ) ;^222^^^^^207^237^int varsInScope = scope.getVarCount (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P2_Replace_Operator]^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope / varsInScope ) ;^223^224^225^^^208^238^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^Var v2 = null.next (  ) ;^230^^^^^215^245^Var v2 = i2.next (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( DiGraphNode<Node, Branch> cfgNode : cfg.isImplicitReturn (  )  )  {^216^^^^^201^231^for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^216^217^218^219^220^201^231^for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  { FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ; if  ( cfg.isImplicitReturn ( cfgNode )  )  { continue; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^217^^^^^202^232^FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P13_Insert_Block]^if  ( cfg.isImplicitReturn ( cfgNode )  )  {     continue; }^218^^^^^203^233^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^222^^^^^207^237^int varsInScope = scope.getVarCount (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( Iterator<Var> i1 = scope .getVar (  )  ; i1.hasNext (  ) ; )  {^227^^^^^212^242^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1 .next (  )  ; )  {^227^^^^^212^242^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^if  ( v1 == v2 || !interferenceGraph .createNode ( v )   || !interferenceGraph^232^233^^^^217^247^if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^!interferenceGraph.hasNode ( v1 )  )  {^233^^^^^218^248^!interferenceGraph.hasNode ( v2 )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^239^240^^^^224^254^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ; boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^interferenceGraph .createNode ( iVar )  ;^247^^^^^232^262^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^checkRanges (  cfgNode.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^checkRanges ( rangesToCheck.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P5_Replace_Variable]^checkRanges ( cfgNode, rangesToCheck.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^process ( rangesToCheck, cfgNode.getValue (  )  ) ;^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^259^^^^^244^274^checkRanges ( rangesToCheck, cfgNode.getValue (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P7_Replace_Invocation]^range.CombinedLiveRangeChecker ( interferenceGraph ) ;^261^^^^^246^276^range.connectIfCrossed ( interferenceGraph ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P8_Replace_Mix]^range .CombinedLiveRangeChecker ( checker2 , callback2 )  ;^261^^^^^246^276^range.connectIfCrossed ( interferenceGraph ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P14_Delete_Statement]^^261^^^^^246^276^range.connectIfCrossed ( interferenceGraph ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] computeVariableNamesInterferenceGraph [RETURN_TYPE] UndiGraph   NodeTraversal t Node> cfg Var> escaped [VARIABLES] FlowState  state  Set  escaped  UndiGraph  interferenceGraph  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  int  varsInScope  Comparator  coloringTieBreaker  AbstractCompiler  compiler  DiGraphNode  cfgNode  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Scope  scope  ControlFlowGraph  cfg  Iterator  i  i1  i2  CombinedLiveRangeChecker  range  
[P4_Replace_Constructor]^new CombinedLiveRangeChecker ( checker1, checker2 )  ;^280^^^^^277^282^new CombinedCfgNodeLiveRangeChecker ( rangesToCheck ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P4_Replace_Constructor]^CombinedCfgNodeLiveRangeChecker callbacks = new CombinedLiveRangeChecker ( checker1, checker2 )  ;^279^280^^^^277^282^CombinedCfgNodeLiveRangeChecker callbacks = new CombinedCfgNodeLiveRangeChecker ( rangesToCheck ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, callbacks, root ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, this ) ;NodeTraversal.traverse ( compiler, root, callbacks ) ;^281^^^^^277^282^NodeTraversal.traverse ( compiler, root, callbacks ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] checkRanges [RETURN_TYPE] void   CombinedLiveRangeChecker> rangesToCheck Node root [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  root  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  CombinedCfgNodeLiveRangeChecker  callbacks  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( CombinedLiveRangeChecker.shouldVisit ( parent )  )  {^301^^^^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( CombinedLiveRangeChecker.connectIfCrossed ( n )  )  {^301^^^^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^for (com.google.javascript.jscomp.CoalesceVariableNames.CombinedLiveRangeChecker callback : callbacks) {    callback.visit(t, n, parent);};^301^302^303^304^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^301^302^303^304^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit ( t, parent, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit (  n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit ( t,  parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit ( t, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit ( parent, n, t ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback.visit ( t, parent, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^callback .exitScope ( t )  ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback1.visit ( t, n, parent ) ;callback.visit ( t, n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback2.visit ( t, n, parent ) ;callback.visit ( t, n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  CombinedLiveRangeChecker  callback  Deque  colorings  Comparator  coloringTieBreaker  
[P12_Insert_Condition]^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { return LiveRangeChecker.shouldVisit ( n ) ; }^332^^^^^331^333^return LiveRangeChecker.shouldVisit ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^332^^^^^331^333^return LiveRangeChecker.shouldVisit ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback1.visit (  n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback1.visit ( t,  parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback1.visit ( t, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^callback1.isAssignTo ( t, n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback.visit ( t, n, parent ) ;callback1.visit ( t, n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback2.visit ( t, n, parent ) ;callback1.visit ( t, n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( t, parent, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( t, n, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit (  n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( t,  parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( t, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( n, t, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^callback2.isAssignTo ( t, n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback1.visit ( t, n, parent ) ;callback2.visit ( t, n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^callback.visit ( t, n, parent ) ;callback2.visit ( t, n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( callback1.crossed && callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( usePseudoNames || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( checker2.crossed || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( callback1.crossed || usePseudoNames )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( callback1.crossed || checker2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( callback1.crossed || callback2.crossed.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( callback1.crossed ) {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  (  callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope.Var v1 = callback1.getDef(); com.google.javascript.jscomp.Scope.Var v2 = callback2.getDef(); interferenceGraph.connectIfNotFound(v1, null, v2);^342^343^344^345^346^341^347^if  ( callback1.crossed || callback2.crossed )  { Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^342^343^344^345^346^341^347^if  ( callback1.crossed || callback2.crossed )  { Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Var v1 = checker2.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v2 = i2.next (  ) ;Var v1 = callback1.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v = i.next (  ) ;Var v1 = callback1.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v1 = i1.next (  ) ;Var v1 = callback1.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v2 = callback2.getDef (  ) ;Var v1 = callback1.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Var v2 = checker2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v2 = i2.next (  ) ;Var v2 = callback2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v = i.next (  ) ;Var v2 = callback2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v1 = callback1.getDef (  ) ;Var v2 = callback2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Var v1 = i1.next (  ) ;Var v2 = callback2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^344^345^^^^341^347^Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( var, null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^interferenceGraph .createNode ( var )  ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^interferenceGraph.createNode ( v ) ;interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^343^344^^^^341^347^Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, var ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^interferenceGraph .createNode ( coalescedVar )  ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  UndiGraph  interferenceGraph  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node var = value.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node var = name.setString (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node value = name.removeFirstChild (  ) ;Node var = name.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^int varsInScope = scope.getVarCount (  ) ;Node var = name.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node parent = var.getParent (  ) ;Node var = name.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node var = name.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node var = var.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;Node var = name.getParent (  ) ;^355^^^^^340^370^Node var = name.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node parent = value.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node parent = var.setString (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node parent = var .getString (  )  ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node parent = value.setString (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node parent = var.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node var = name.getParent (  ) ;Node parent = var.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^356^^^^^341^371^Node parent = var.getParent (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isForIn ( var )  )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( parent.getType() != FOR )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( parent )  )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^} else if  ( var.getChildCount (  )  <= 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^} else if  ( var.getChildCount (  )  == -4 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^} else if  ( parent.getChildCount (  )  == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^} else if  ( parent.getType() != FOR )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^} else {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^} else if  ( var.setString (  )  == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( !name.setString (  )  )  {^381^^^^^362^385^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P9_Replace_Statement]^if  ( name.hasChildren (  )  )  {^381^^^^^362^385^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^var.removeChild(name);^381^382^383^^^362^385^if  ( !name.hasChildren (  )  )  { var.removeChild ( name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^381^382^383^^^362^385^if  ( !name.hasChildren (  )  )  { var.removeChild ( name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.removeChild ( value ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.replaceChild ( name ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^var.replaceChild ( value ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, assign ) ;var.removeChild ( name ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;var.removeChild ( name ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, var ) ;var.removeChild ( name ) ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( !name .getChildCount (  )   )  {^381^^^^^362^385^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .removeChild ( name )  ;^382^^^^^362^385^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( var.hasChildren (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( name.setString (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( name .getChildCount (  )   )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P9_Replace_Statement]^if  ( !name.hasChildren (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( value, var ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild (  var ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( value.getType (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent.setString (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( var )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( var.getType (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.LP )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^assign = com.google.javascript.jscomp.NodeUtil.newExpr(assign);^370^371^372^^^355^385^if  ( parent.getType (  )  != Token.FOR )  { assign = NodeUtil.newExpr ( assign ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^370^371^372^^^355^385^if  ( parent.getType (  )  != Token.FOR )  { assign = NodeUtil.newExpr ( assign ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( LP )  )  {     return true; }else     if  ( isVar ( parent )  )  {         return n.hasChildren (  ) ;     }^370^^^^^355^385^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  (  ( colorings.isEmpty (  )  )  ||  ( ! ( isName ( n )  )  )  )  ||  ( isFunction ( parent )  )  )  {     return ; }^370^^^^^355^385^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^assign = NodeUtil.newExpr ( value ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil.isVar ( assign ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^assign = NodeUtil.newExpr ( var ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil .removeChild ( value )  ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^371^^^^^356^386^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^371^^^^^356^386^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P4_Replace_Constructor]^Node assign = new Node ( Token.ASSIGN,  value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P4_Replace_Constructor]^Node assign = new Node ( Token.ASSIGN, name ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, var, value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, name, var ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node assign = new Node ( Token. name, value ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, value, name ) ;^367^^^^^352^382^Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node value = var.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node value = name.setString (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node value = var .removeChild ( name )  ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node value = name.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node var = name.getParent (  ) ;Node value = name.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^365^366^^^^350^380^Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.removeChild ( value ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.replaceChild ( name ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .removeChild ( assign )  ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, assign ) ;var.removeChild ( name ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;var.removeChild ( name ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, var ) ;var.removeChild ( name ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( v )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( var.setString (  )  != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( var, var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( assign, var ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^var.removeChild ( name ) ;parent.replaceChild ( var, assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;parent.replaceChild ( var, assign ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil .removeChild ( parent )  ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node value = var.setString (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( value .getChildCount (  )   )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil .removeChild ( assign )  ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^assign = NodeUtil.isVar ( var ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( var, value ) ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( value, var ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild (  var ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.removeChild ( var, parent ) ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^NodeUtil .removeChild ( assign )  ;^378^^^^^364^379^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( parent.getType (  )  < Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil .removeChild ( var )  ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node value = var .removeChild ( value )  ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node value = value.removeFirstChild (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^366^367^^^^351^381^var.removeChild ( name ) ; Node assign = new Node ( Token.ASSIGN, name, value ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( value .getNode ( var )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( !name.setString (  )  )  {^381^^^^^366^396^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( !name .getChildCount (  )   )  {^381^^^^^366^396^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P9_Replace_Statement]^if  ( name.hasChildren (  )  )  {^381^^^^^366^396^if  ( !name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^var.removeChild(name);^381^382^383^^^366^396^if  ( !name.hasChildren (  )  )  { var.removeChild ( name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^381^382^383^^^366^396^if  ( !name.hasChildren (  )  )  { var.removeChild ( name ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.removeChild ( value ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.replaceChild ( name ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, assign ) ;var.removeChild ( name ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;var.removeChild ( name ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, var ) ;var.removeChild ( name ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node value = name .removeChild ( assign )  ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^} else if  ( value.getChildCount (  )  == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^} else if  ( var .hasChildren (  )   == 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( value.hasChildren (  )  )  {^364^^^^^349^379^if  ( name.hasChildren (  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^var.replaceChild ( value ) ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.removeChild ( value ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.replaceChild ( name ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, assign ) ;var.removeChild ( name ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, name ) ;var.removeChild ( name ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, var ) ;var.removeChild ( name ) ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( value, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( var, var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild (  name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^allMergedNames.add ( iVar.name ) ;parent.replaceChild ( var, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^var.removeChild ( name ) ;parent.replaceChild ( var, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^parent.replaceChild ( var, assign ) ;parent.replaceChild ( var, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, var ) ;parent.replaceChild ( var, name ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^} else if  ( var.getChildCount (  )  != 1 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^} else if  ( var.getChildCount (  )  == 7 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^} else if  ( var.setString (  )  == 0 )  {^362^^^^^347^377^} else if  ( var.getChildCount (  )  == 1 )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^assign = NodeUtil .removeChild ( name )  ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^parent .removeChild ( var )  ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( use )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( var .getNode ( use )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^assign =  NodeUtil.newExpr ( null ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^parent .removeChild ( name )  ;^373^^^^^358^388^parent.replaceChild ( var, assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^NodeUtil .removeChild ( value )  ;^378^^^^^363^393^NodeUtil.removeChild ( parent, var ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^assign = NodeUtil.isVar ( value ) ;^371^^^^^356^386^assign = NodeUtil.newExpr ( assign ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node value = name .removeChild ( value )  ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node value = name .removeChild ( parent )  ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .removeChild ( parent )  ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^var.replaceChild ( value ) ;^366^^^^^351^381^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( v2 )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( v1 )   != Token.FOR )  {^370^^^^^355^385^if  ( parent.getType (  )  != Token.FOR )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .removeChild ( parent )  ;^382^^^^^367^397^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunction ( value )   )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( NodeUtil.isForIn ( value )  )  {^359^^^^^344^374^if  ( NodeUtil.isForIn ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^359^^^^^344^374^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^359^^^^^344^374^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .removeChild ( parent )  ;^360^^^^^345^375^var.removeChild ( name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^360^361^^^^345^375^var.removeChild ( name ) ; parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^parent.replaceChild ( name, var ) ;^361^^^^^346^376^parent.replaceChild ( var, name ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node value = value.setString (  ) ;^365^^^^^350^380^Node value = name.removeFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] removeVarDeclaration [RETURN_TYPE] void   Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  assign  name  parent  value  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return var;^401^^^^^400^402^return def;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] getDef [RETURN_TYPE] Var   [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return  ( NodeUtil.isName ( n ) &&  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return  ( NodeUtil.isVar ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return  ( NodeUtil.isName ( n ) ||  ( n.setString (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return  ( NodeUtil.isName ( n ) ||  ( n .getChildCount (  )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.setString (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^||  ( n.setString (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.setString (  )  )  )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^||  ( n.hasChildren (  )  && NodeUtil.isName ( n .removeFirstChild (  )   )  )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( !defFound || isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !v2OutLive && isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( v2, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def,  parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo (  n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( parent, n, def )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( !defFound ) {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  (  isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( !defFound && isReadFrom ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( !defFound && isAssignTo ( def, parent, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^defFound = true;^414^415^416^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  { defFound = true; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^414^415^416^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  { defFound = true; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( defFound )  &&  (  (  ( use )  == null )  ||  ( isReadFrom ( use, n )  )  )  )  {     crossed = true; }^414^^^^^413^421^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^defFound = false;^415^^^^^413^421^defFound = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^crossed = true;defFound = true;^415^^^^^413^421^defFound = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( var, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( n, def, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( !defFound && isReadFrom ( var, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( ! ( defFound )  )  &&  ( isAssignTo ( def, n, parent )  )  )  {     defFound = true; }^414^^^^^413^421^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( defFound ||  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( defFound &&  ( use == null && isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( defFound &&  ( use != null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( use == parentull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( v2OutLive &&  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( v2 == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( use == null || isReadFrom ( use )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( use == null || isReadFrom (  n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( use &&  ( defFound == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( defFound &&  ( use == null ) {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  (  isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( (use == null || isReadFrom(use, n)) )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( use == null )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( defFound &&  ( use == null || shouldVisit ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  (  shouldVisit ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^crossed = true;^418^419^420^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  { crossed = true; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^418^419^420^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  { crossed = true; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( ! ( defFound )  )  &&  ( isAssignTo ( def, n, parent )  )  )  {     defFound = true; }^418^^^^^413^421^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^crossed = false;^419^^^^^413^421^crossed = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^defFound = true;crossed = true;^419^^^^^413^421^crossed = true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( defFound &&  ( var == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( defFound )  &&  (  (  ( use )  == null )  ||  ( isReadFrom ( use, n )  )  )  )  {     crossed = true; }^418^^^^^413^421^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  NodeTraversal  t  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && v2.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && parent.getName (  ) .equals ( n.getString (  )  )  && var != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  (  var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( isName(n && getString())) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( parent.getType() == LP )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( ((name != null) && isName(name)) && getString()) && isAssignmentOp(n) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( ((name != null) && isName(name) && getString())) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( (name != null && isName(name)) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^if  ( name != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .isDeclared ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.setString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && var .getParentNode (  )  .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return parent != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && v2.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return parentame != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return varame != null && NodeUtil.isName ( name )  && n.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isVar ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .isDeclared ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.setString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isName ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil .isName ( parent )  ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node name = n.setString (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^Node name = n .removeFirstChild (  )  ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node parentame = n .removeFirstChild (  )  ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node value = name.removeFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node name = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node parent = var.getParent (  ) ;Node name = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^Node var = name.getParent (  ) ;Node name = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^Node parentame = n.setString (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil .isVar ( parent )   && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^return parent != null && NodeUtil .isVar ( name )   && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.getName (  ) .equals ( parent.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.getName (  ) .isDeclared ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.getName (  ) .equals ( name.setString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var .getParentNode (  )  .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^NodeUtil.isAssignmentOp ( parent ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^NodeUtil.isName ( n ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^NodeUtil.isName ( parent ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.checker2 )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent.setString (  )  == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P9_Replace_Statement]^if  ( parent.getType (  )  != Token.FOR )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  !=  ( FOR )  )  {     assign = newExpr ( assign ) ; }^426^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  (  ( colorings.isEmpty (  )  )  ||  ( ! ( isName ( n )  )  )  )  ||  ( isFunction ( parent )  )  )  {     return ; }^426^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P6_Replace_Expression]^} else {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isName ( parent )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isName ( name )   )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P15_Unwrap_Block]^return n.hasChildren();^429^430^^432^433^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P16_Remove_Block]^^429^430^^432^433^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  (  ( ! ( vNode.getValue (  ) .equals ( coalescedVar )  )  )  &&  ( isVar ( parent )  )  )  {     removeVarDeclaration ( n ) ; }^429^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( ! ( isFunction ( v.getParentNode (  )  )  )  )  {     interferenceGraph.createNode ( v ) ; }^429^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^429^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return parent.hasChildren (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return n.setString (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return n .getChildCount (  )  ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P12_Insert_Condition]^if  ( !name.hasChildren (  )  )  { return n.hasChildren (  ) ; }^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P12_Insert_Condition]^if  ( name.hasChildren (  )  )  { return n.hasChildren (  ) ; }^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^429^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^return false;^428^^^^^423^442^return true;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^}  if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P3_Replace_Literal]^return true;^434^^^^^423^442^return false;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^if  ( parent .getNode ( v2 )   == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.checker1 )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isName ( n )   )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^}  if  ( NodeUtil .isName ( name )   )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && v.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^424^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     removeVarDeclaration ( n ) ; }^424^^^^^423^442^[Delete]^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  && v2.getName (  ) .isDeclared ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^if  ( name .getNode ( var )   == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^return parent.setString (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^var.getName (  ) .isDeclared ( parent.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  n  name  parent  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && v.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isVar ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .isDeclared ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.setString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.removeChild ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil .isVar ( name )  ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.setString (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^return name != null && NodeUtil.isVar ( name )  && v2.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P5_Replace_Variable]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.getName (  ) .isDeclared ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^var.getName (  ) .equals ( name.setString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P11_Insert_Donor_Statement]^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P8_Replace_Mix]^var .getParentNode (  )  .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^!NodeUtil.removeChild ( name, name.getParent (  )  ) ;^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^!NodeUtil.isLhs ( name, name.setString (  )  ) ;^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P14_Delete_Statement]^^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P7_Replace_Invocation]^!NodeUtil.isLhs ( name, name .getString (  )   ) ;^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] AbstractCompiler  compiler  boolean  crossed  defFound  usePseudoNames  v1OutLive  v2OutLive  Var  coalescedVar  def  iVar  use  v  v1  v2  var  Node  name  ArrayList  callbacks  rangesToCheck  LiveRangeChecker  callback1  callback2  checker1  checker2  Deque  colorings  Comparator  coloringTieBreaker  
[P2_Replace_Operator]^return v1.index  !=  v2.index;^71^^^^^70^72^return v1.index - v2.index;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Var v1 Var v2 [VARIABLES] boolean  Var  v1  v2  
[P8_Replace_Mix]^return v1.index  ;^71^^^^^70^72^return v1.index - v2.index;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Var v1 Var v2 [VARIABLES] boolean  Var  v1  v2  
[P8_Replace_Mix]^this.callbacks =  null;^296^^^^^294^297^this.callbacks = callbacks;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] ArrayList)   CombinedLiveRangeChecker> callbacks [VARIABLES] ArrayList  callbacks  boolean  
[P5_Replace_Variable]^if  ( CombinedLiveRangeChecker.shouldVisit ( parent )  )  {^301^^^^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^for (com.google.javascript.jscomp.CoalesceVariableNames.CombinedLiveRangeChecker callback : callbacks) {    callback.visit(t, n, parent);};^301^302^303^304^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^301^302^303^304^^300^306^if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit ( t, n, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit (  n, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit ( t,  parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit ( t, n ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit ( n, t, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback.visit ( parent, n, t ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^callback.visit ( t, parent, parent ) ;^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^303^^^^^300^306^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCfgNodeLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^private  LiveRangeChecker callback2;^318^^^^^313^323^private final LiveRangeChecker callback2;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ArrayList  callbacks  boolean  CombinedLiveRangeChecker  callback  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^this.callback1 = callback2;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CombinedLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  
[P11_Insert_Donor_Statement]^this.callback2 = callback2;this.callback1 = callback1;^323^^^^^320^325^this.callback1 = callback1;^[CLASS] CombinedLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  
[P5_Replace_Variable]^this.callback2 = callback1;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CombinedLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  
[P11_Insert_Donor_Statement]^this.callback1 = callback1;this.callback2 = callback2;^324^^^^^320^325^this.callback2 = callback2;^[CLASS] CombinedLiveRangeChecker  [METHOD] <init> [RETURN_TYPE] CoalesceVariableNames$LiveRangeChecker)   LiveRangeChecker callback1 LiveRangeChecker callback2 [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  
[P14_Delete_Statement]^^332^^^^^331^333^return LiveRangeChecker.shouldVisit ( n ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] LiveRangeChecker  callback1  callback2  Node  n  boolean  
[P5_Replace_Variable]^callback1.visit ( t, n, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback1.visit (  n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback1.visit ( t,  parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback1.visit ( t, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback1.visit ( t, parent, n ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^337^338^^^^336^339^callback1.visit ( t, n, parent ) ; callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^callback2.visit ( t, n, parent ) ;callback1.visit ( t, n, parent ) ;^337^^^^^336^339^callback1.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback2.visit (  n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback2.visit ( t,  parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback2.visit ( t, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback2.visit ( n, t, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^callback2.visit ( t, parent, n ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^callback2 .shouldVisit ( parent )  ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^callback1.visit ( t, n, parent ) ;callback2.visit ( t, n, parent ) ;^338^^^^^336^339^callback2.visit ( t, n, parent ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] LiveRangeChecker  callback1  callback2  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( callback1.crossed && callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^if  ( callback2.crossed || callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^if  ( callback1.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^if  ( callback2.crossed || callback1.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^if  ( callback2.crossed.crossed || callback1 )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P6_Replace_Expression]^if  ( callback1.crossed ) {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P6_Replace_Expression]^if  (  callback2.crossed )  {^342^^^^^341^347^if  ( callback1.crossed || callback2.crossed )  {^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P15_Unwrap_Block]^com.google.javascript.jscomp.Scope.Var v1 = callback1.getDef(); com.google.javascript.jscomp.Scope.Var v2 = callback2.getDef(); interferenceGraph.connectIfNotFound(v1, null, v2);^342^343^344^345^346^341^347^if  ( callback1.crossed || callback2.crossed )  { Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; }^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P16_Remove_Block]^^342^343^344^345^346^341^347^if  ( callback1.crossed || callback2.crossed )  { Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; }^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^Var v1 = callback2.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P11_Insert_Donor_Statement]^Var v2 = callback2.getDef (  ) ;Var v1 = callback1.getDef (  ) ;^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^Var v2 = callback1.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P11_Insert_Donor_Statement]^Var v1 = callback1.getDef (  ) ;Var v2 = callback2.getDef (  ) ;^344^^^^^341^347^Var v2 = callback2.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P14_Delete_Statement]^^343^344^^^^341^347^Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P14_Delete_Statement]^^344^345^^^^341^347^Var v2 = callback2.getDef (  ) ; interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound (  null, v2 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v1, null ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P14_Delete_Statement]^^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P14_Delete_Statement]^^343^^^^^341^347^Var v1 = callback1.getDef (  ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^interferenceGraph.connectIfNotFound ( v2, null, v1 ) ;^345^^^^^341^347^interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[CLASS] CombinedLiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P3_Replace_Literal]^boolean defFound = true;^390^^^^^385^395^boolean defFound = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P8_Replace_Mix]^boolean defFound ;^390^^^^^385^395^boolean defFound = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P3_Replace_Literal]^boolean crossed = true;^391^^^^^386^396^boolean crossed = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P8_Replace_Mix]^boolean crossed ;^391^^^^^386^396^boolean crossed = false;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P8_Replace_Mix]^private  Var def;^392^^^^^387^397^private final Var def;^[CLASS] LiveRangeChecker  [METHOD] connectIfCrossed [RETURN_TYPE] void   Void> interferenceGraph [VARIABLES] LiveRangeChecker  callback1  callback2  UndiGraph  interferenceGraph  boolean  Var  v1  v2  
[P5_Replace_Variable]^this.def = use;^396^^^^^395^398^this.def = def;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[P11_Insert_Donor_Statement]^this.use = use;this.def = def;^396^^^^^395^398^this.def = def;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[P5_Replace_Variable]^this.use = def;^397^^^^^395^398^this.use = use;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[P11_Insert_Donor_Statement]^this.def = def;this.use = use;^397^^^^^395^398^this.use = use;^[CLASS] LiveRangeChecker  [METHOD] <init> [RETURN_TYPE] Var)   Var def Var use [VARIABLES] Var  def  use  boolean  crossed  defFound  
[P5_Replace_Variable]^return use;^401^^^^^400^402^return def;^[CLASS] LiveRangeChecker  [METHOD] getDef [RETURN_TYPE] Var   [VARIABLES] Var  def  use  boolean  crossed  defFound  
[P2_Replace_Operator]^return  ( NodeUtil.isName ( n ) &&  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P2_Replace_Operator]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P7_Replace_Invocation]^return  ( NodeUtil.isVar ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P7_Replace_Invocation]^return  ( NodeUtil .isVar ( n )  ||  ( n.hasChildren (  )  && NodeUtil^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P7_Replace_Invocation]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n .getString (  )   )  )  ) ;^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P14_Delete_Statement]^^408^409^^^^407^410^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P8_Replace_Mix]^||  ( n .getFirstChild (  )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P14_Delete_Statement]^^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P11_Insert_Donor_Statement]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P7_Replace_Invocation]^||  ( n.hasChildren (  )  && NodeUtil .isVar ( n )   )  ) ;^409^^^^^407^410^||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] shouldVisit [RETURN_TYPE] boolean   Node n [VARIABLES] Var  def  use  boolean  crossed  defFound  Node  n  
[P2_Replace_Operator]^if  ( !defFound || isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !crossed && isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( use, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def,  parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo (  n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( n, def, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( def, parent, n )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  ( !defFound ) {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  (  isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P7_Replace_Invocation]^if  ( !defFound && isReadFrom ( def, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P8_Replace_Mix]^if  (  isAssignTo ( use, n, parent )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P15_Unwrap_Block]^defFound = true;^414^415^416^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  { defFound = true; }^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P16_Remove_Block]^^414^415^416^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  { defFound = true; }^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P13_Insert_Block]^if  (  ( defFound )  &&  (  (  ( use )  == null )  ||  ( isReadFrom ( use, n )  )  )  )  {     crossed = true; }^414^^^^^413^421^[Delete]^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P3_Replace_Literal]^defFound = false;^415^^^^^413^421^defFound = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P11_Insert_Donor_Statement]^crossed = true;defFound = true;^415^^^^^413^421^defFound = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( !defFound && isAssignTo ( parent, n, def )  )  {^414^^^^^413^421^if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P13_Insert_Block]^if  (  ( ! ( defFound )  )  &&  ( isAssignTo ( def, n, parent )  )  )  {     defFound = true; }^414^^^^^413^421^[Delete]^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P2_Replace_Operator]^if  ( defFound ||  ( use == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P2_Replace_Operator]^if  ( defFound &&  ( use == null && isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P2_Replace_Operator]^if  ( defFound &&  ( use != null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( defFound &&  ( use == null || isReadFrom ( use )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( defFound &&  ( use == null || isReadFrom (  n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( n &&  ( use == defFoundull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( use &&  ( defFound == null || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( defFound &&  ( n == useull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  ( defFound &&  ( use == null ) {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  (  isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  ( (use == null || isReadFrom(use, n)) )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P6_Replace_Expression]^if  ( use == null )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P7_Replace_Invocation]^if  ( defFound &&  ( use == null || shouldVisit ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P8_Replace_Mix]^if  ( defFound &&  ( use == false ) {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P15_Unwrap_Block]^crossed = true;^418^419^420^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  { crossed = true; }^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P16_Remove_Block]^^418^419^420^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  { crossed = true; }^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P13_Insert_Block]^if  (  ( ! ( defFound )  )  &&  ( isAssignTo ( def, n, parent )  )  )  {     defFound = true; }^418^^^^^413^421^[Delete]^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P3_Replace_Literal]^crossed = false;^419^^^^^413^421^crossed = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P11_Insert_Donor_Statement]^defFound = true;crossed = true;^419^^^^^413^421^crossed = true;^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P5_Replace_Variable]^if  ( defFound &&  ( use == parentull || isReadFrom ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P8_Replace_Mix]^if  ( defFound &&  ( use == parentull || shouldVisit ( use, n )  )  )  {^418^^^^^413^421^if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P13_Insert_Block]^if  (  ( defFound )  &&  (  (  ( use )  == null )  ||  ( isReadFrom ( use, n )  )  )  )  {     crossed = true; }^418^^^^^413^421^[Delete]^[CLASS] LiveRangeChecker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  crossed  defFound  NodeTraversal  t  Var  def  use  Node  n  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && use.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && n != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  (  var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( isName(n && getString())) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( parent.getType() == LP )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( ((name != null) && isName(name)) && getString()) && isAssignmentOp(n) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( ((name != null) && isName(name) && getString())) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( (name != null && isName(name)) )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^if  ( name != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n .getParent (  )   )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != true )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return parent != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && use.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return parentame != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return varame != null && NodeUtil.isName ( name )  && n.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^return name != null && NodeUtil.isVar ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isName ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P14_Delete_Statement]^^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P14_Delete_Statement]^^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^var.getName (  ) .equals ( parent.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^var.getName (  ) .equals ( name .getParent (  )   )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P14_Delete_Statement]^^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P11_Insert_Donor_Statement]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^NodeUtil.isAssignmentOp ( parent ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^NodeUtil.isName ( n ) ;^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P14_Delete_Statement]^^440^^^^^423^442^NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P6_Replace_Expression]^} else {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isName ( parent )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^}  if  ( NodeUtil.isName ( name )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P15_Unwrap_Block]^return n.hasChildren();^429^430^^432^433^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P16_Remove_Block]^^429^430^^432^433^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return parent.hasChildren (  ) ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^return n .getFirstChild (  )  ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P14_Delete_Statement]^^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isName ( name )   )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^429^^^^^423^442^[Delete]^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P3_Replace_Literal]^return false;^428^^^^^423^442^return true;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^}  if  ( NodeUtil.isName ( parent )  )  {^429^^^^^423^442^} else if  ( NodeUtil.isVar ( parent )  )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P3_Replace_Literal]^return true;^434^^^^^423^442^return false;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.LP )  {^426^^^^^423^442^if  ( parent.getType (  )  == Token.LP )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^return parent .getFirstChild (  )  ;^432^^^^^423^442^return n.hasChildren (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return n != nameull && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^return nameame != null && NodeUtil.isName ( n )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^return name != null && NodeUtil .isVar ( parent )   && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name .getParent (  )   )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil .isName ( name )  ;^438^439^440^^^423^442^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P13_Insert_Block]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^424^^^^^423^442^[Delete]^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( var )  && n.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^424^425^^^^423^442^if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P7_Replace_Invocation]^Node name = n .getString (  )  ;^437^^^^^423^442^Node name = n.getFirstChild (  ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P8_Replace_Mix]^var.getName (  ) .equals ( parent .getParent (  )   )  && NodeUtil.isAssignmentOp ( n ) ;^439^440^^^^423^442^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[CLASS] LiveRangeChecker  [METHOD] isAssignTo [RETURN_TYPE] boolean   Var var Node n Node parent [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  n  name  parent  
[P2_Replace_Operator]^return name != null || NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P2_Replace_Operator]^return name == null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P5_Replace_Variable]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P5_Replace_Variable]^return var != null && NodeUtil.isName ( name )  && name.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P7_Replace_Invocation]^return name != null && NodeUtil.isVar ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name .getParent (  )   )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P7_Replace_Invocation]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil .isVar ( name )  ;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P8_Replace_Mix]^return name != this ;;^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P14_Delete_Statement]^^445^446^447^^^444^448^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P5_Replace_Variable]^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs (  name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P14_Delete_Statement]^^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P11_Insert_Donor_Statement]^var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^446^447^^^^444^448^var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P7_Replace_Invocation]^!NodeUtil.isLhs ( name, name .getString (  )   ) ;^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
[P14_Delete_Statement]^^447^^^^^444^448^!NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[CLASS] LiveRangeChecker  [METHOD] isReadFrom [RETURN_TYPE] boolean   Var var Node name [VARIABLES] Var  def  use  var  boolean  crossed  defFound  Node  name  
